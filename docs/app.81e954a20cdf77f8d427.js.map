{"version":3,"file":"app.81e954a20cdf77f8d427.js","mappings":"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","sources":["webpack:///./output/fable_modules/fable-library.4.1.4/Util.js","webpack:///./output/fable_modules/fable-library.4.1.4/Date.js","webpack:///./output/fable_modules/fable-library.4.1.4/Numeric.js","webpack:///./output/fable_modules/fable-library.4.1.4/RegExp.js","webpack:///./output/fable_modules/fable-library.4.1.4/Types.js","webpack:///./output/fable_modules/fable-library.4.1.4/String.js","webpack:///./output/fable_modules/fable-library.4.1.4/Option.js","webpack:///./output/fable_modules/fable-library.4.1.4/Native.js","webpack:///./output/fable_modules/fable-library.4.1.4/Array.js","webpack:///./output/fable_modules/fable-library.4.1.4/List.js","webpack:///./output/fable_modules/Fable.Elmish.3.1.0/cmd.fs","webpack:///./output/fable_modules/fable-library.4.1.4/Double.js","webpack:///./output/fable_modules/fable-library.4.1.4/Seq.js","webpack:///./output/fable_modules/fable-library.4.1.4/FSharp.Core.js","webpack:///./output/fable_modules/fable-library.4.1.4/Range.js","webpack:///./output/fable_modules/Fable.Elmish.3.1.0/ring.fs","webpack:///./output/fable_modules/Fable.Elmish.3.1.0/program.fs","webpack:///./output/fable_modules/Fable.Elmish.React.3.0.1/common.fs","webpack:///./output/fable_modules/fable-library.4.1.4/Reflection.js","webpack:///./src/Client/CodeHelpers/BrowserStorage.fs","webpack:///./output/fable_modules/fable-library.4.1.4/Choice.js","webpack:///./output/fable_modules/Thoth.Json.7.0.0/Types.fs","webpack:///./output/fable_modules/fable-library.4.1.4/Guid.js","webpack:///./output/fable_modules/fable-library.4.1.4/Int32.js","webpack:///./output/fable_modules/fable-library.4.1.4/DateOffset.js","webpack:///./output/fable_modules/fable-library.4.1.4/TimeSpan.js","webpack:///./output/fable_modules/fable-library.4.1.4/Map.js","webpack:///./output/fable_modules/fable-library.4.1.4/Set.js","webpack:///./output/fable_modules/Thoth.Json.7.0.0/Decode.fs","webpack:///./output/fable_modules/Thoth.Json.7.0.0/Encode.fs","webpack:///./output/fable_modules/Thoth.Json.7.0.0/Extra.fs","webpack:///./output/fable_modules/fable-library.4.1.4/MapUtil.js","webpack:///./output/fable_modules/Fable.FontAwesome.2.0.0/FontAwesome.fs","webpack:///./output/fable_modules/Fulma.2.16.0/Common.fs","webpack:///./src/Client/Components/SharedComponents.fs","webpack:///./output/fable_modules/Fable.React.8.0.1/Fable.React.Standard.fs","webpack:///./output/fable_modules/Fable.React.8.0.1/Fable.React.Props.fs","webpack:///./output/fable_modules/Fable.React.8.0.1/Fable.React.Helpers.fs","webpack:///./output/fable_modules/Fulma.2.16.0/Elements/Icon.fs","webpack:///./src/Client/CodeHelpers/FableHelpers.fs","webpack:///./src/Client/Index.fs","webpack:///./src/Client/Client.fs","webpack:///./src/Client/Components/Summary.fs","webpack:///./output/fable_modules/Fable.FontAwesome.Free.2.1.0/Icons.fs","webpack:///./output/fable_modules/Fulma.2.16.0/Layouts/Container.fs","webpack:///./output/fable_modules/Fable.Elmish.3.1.0/prelude.fs","webpack:///./output/fable_modules/Fable.Elmish.React.3.0.1/react.fs"],"sourcesContent":["// tslint:disable:ban-types\nexport function isArrayLike(x) {\n    return Array.isArray(x) || ArrayBuffer.isView(x);\n}\nexport function isIterable(x) {\n    return x != null && typeof x === \"object\" && Symbol.iterator in x;\n}\nexport function isEnumerable(x) {\n    return x != null && typeof x.GetEnumerator === \"function\";\n}\nexport function isComparer(x) {\n    return x != null && typeof x.Compare === \"function\";\n}\nexport function isComparable(x) {\n    return x != null && typeof x.CompareTo === \"function\";\n}\nexport function isEquatable(x) {\n    return x != null && typeof x.Equals === \"function\";\n}\nexport function isHashable(x) {\n    return x != null && typeof x.GetHashCode === \"function\";\n}\nexport function isDisposable(x) {\n    return x != null && typeof x.Dispose === \"function\";\n}\nexport function disposeSafe(x) {\n    if (isDisposable(x)) {\n        x.Dispose();\n    }\n}\nexport function defaultOf() {\n    return null;\n}\nexport function sameConstructor(x, y) {\n    return Object.getPrototypeOf(x)?.constructor === Object.getPrototypeOf(y)?.constructor;\n}\nexport class Enumerable {\n    constructor(en) {\n        this.en = en;\n    }\n    GetEnumerator() { return this.en; }\n    \"System.Collections.IEnumerable.GetEnumerator\"() { return this.en; }\n    [Symbol.iterator]() {\n        return this;\n    }\n    next() {\n        const hasNext = this.en[\"System.Collections.IEnumerator.MoveNext\"]();\n        const current = hasNext ? this.en[\"System.Collections.Generic.IEnumerator`1.get_Current\"]() : undefined;\n        return { done: !hasNext, value: current };\n    }\n}\nexport class Enumerator {\n    constructor(iter) {\n        this.iter = iter;\n        this.current = defaultOf();\n    }\n    [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\n        return this.current;\n    }\n    [\"System.Collections.IEnumerator.get_Current\"]() {\n        return this.current;\n    }\n    [\"System.Collections.IEnumerator.MoveNext\"]() {\n        const cur = this.iter.next();\n        this.current = cur.value;\n        return !cur.done;\n    }\n    [\"System.Collections.IEnumerator.Reset\"]() {\n        throw new Error(\"JS iterators cannot be reset\");\n    }\n    Dispose() {\n        return;\n    }\n}\nexport function toEnumerable(e) {\n    if (isEnumerable(e)) {\n        return e;\n    }\n    else {\n        return new Enumerable(new Enumerator(e[Symbol.iterator]()));\n    }\n}\nexport function getEnumerator(e) {\n    if (isEnumerable(e)) {\n        return e.GetEnumerator();\n    }\n    else {\n        return new Enumerator(e[Symbol.iterator]());\n    }\n}\nexport function toIterator(en) {\n    return {\n        next() {\n            const hasNext = en[\"System.Collections.IEnumerator.MoveNext\"]();\n            const current = hasNext ? en[\"System.Collections.Generic.IEnumerator`1.get_Current\"]() : undefined;\n            return { done: !hasNext, value: current };\n        },\n    };\n}\nexport function enumerableToIterator(e) {\n    return toIterator(toEnumerable(e).GetEnumerator());\n}\nexport class Comparer {\n    constructor(f) {\n        this.Compare = f || compare;\n    }\n}\nexport function comparerFromEqualityComparer(comparer) {\n    // Sometimes IEqualityComparer also implements IComparer\n    if (isComparer(comparer)) {\n        return new Comparer(comparer.Compare);\n    }\n    else {\n        return new Comparer((x, y) => {\n            const xhash = comparer.GetHashCode(x);\n            const yhash = comparer.GetHashCode(y);\n            if (xhash === yhash) {\n                return comparer.Equals(x, y) ? 0 : -1;\n            }\n            else {\n                return xhash < yhash ? -1 : 1;\n            }\n        });\n    }\n}\nexport function assertEqual(actual, expected, msg) {\n    if (!equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport function assertNotEqual(actual, expected, msg) {\n    if (equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport class Lazy {\n    constructor(factory) {\n        this.factory = factory;\n        this.isValueCreated = false;\n    }\n    get Value() {\n        if (!this.isValueCreated) {\n            this.createdValue = this.factory();\n            this.isValueCreated = true;\n        }\n        return this.createdValue;\n    }\n    get IsValueCreated() {\n        return this.isValueCreated;\n    }\n}\nexport function lazyFromValue(v) {\n    return new Lazy(() => v);\n}\nexport function padWithZeros(i, length) {\n    let str = i.toString(10);\n    while (str.length < length) {\n        str = \"0\" + str;\n    }\n    return str;\n}\nexport function padLeftAndRightWithZeros(i, lengthLeft, lengthRight) {\n    let str = i.toString(10);\n    while (str.length < lengthLeft) {\n        str = \"0\" + str;\n    }\n    while (str.length < lengthRight) {\n        str = str + \"0\";\n    }\n    return str;\n}\nexport function dateOffset(date) {\n    const date1 = date;\n    return typeof date1.offset === \"number\"\n        ? date1.offset\n        : (date.kind === 1 /* DateKind.UTC */\n            ? 0 : date.getTimezoneOffset() * -60000);\n}\nexport function int16ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport function int32ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFFFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport function int64ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xffffffffffffffffn + i + 1n : i;\n    return i.toString(radix);\n}\nclass ObjectRef {\n    static id(o) {\n        if (!ObjectRef.idMap.has(o)) {\n            ObjectRef.idMap.set(o, ++ObjectRef.count);\n        }\n        return ObjectRef.idMap.get(o);\n    }\n}\nObjectRef.idMap = new WeakMap();\nObjectRef.count = 0;\nexport { ObjectRef };\nexport function stringHash(s) {\n    let i = 0;\n    let h = 5381;\n    const len = s.length;\n    while (i < len) {\n        h = (h * 33) ^ s.charCodeAt(i++);\n    }\n    return h;\n}\nexport function numberHash(x) {\n    return x * 2654435761 | 0;\n}\nexport function bigintHash(x) {\n    return stringHash(x.toString(32));\n}\n// From https://stackoverflow.com/a/37449594\nexport function combineHashCodes(hashes) {\n    let h1 = 0;\n    const len = hashes.length;\n    for (let i = 0; i < len; i++) {\n        const h2 = hashes[i];\n        h1 = ((h1 << 5) + h1) ^ h2;\n    }\n    return h1;\n}\nexport function physicalHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"bigint\":\n            return bigintHash(x);\n        case \"string\":\n            return stringHash(x);\n        default:\n            return numberHash(ObjectRef.id(x));\n    }\n}\nexport function identityHash(x) {\n    if (isHashable(x)) {\n        return x.GetHashCode();\n    }\n    else {\n        return physicalHash(x);\n    }\n}\nexport function dateHash(x) {\n    return x.getTime();\n}\nexport function arrayHash(x) {\n    const len = x.length;\n    const hashes = new Array(len);\n    for (let i = 0; i < len; i++) {\n        hashes[i] = structuralHash(x[i]);\n    }\n    return combineHashCodes(hashes);\n}\nexport function structuralHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"bigint\":\n            return bigintHash(x);\n        case \"string\":\n            return stringHash(x);\n        default: {\n            if (isHashable(x)) {\n                return x.GetHashCode();\n            }\n            else if (isArrayLike(x)) {\n                return arrayHash(x);\n            }\n            else if (x instanceof Date) {\n                return dateHash(x);\n            }\n            else if (Object.getPrototypeOf(x)?.constructor === Object) {\n                // TODO: check call-stack to prevent cyclic objects?\n                const hashes = Object.values(x).map((v) => structuralHash(v));\n                return combineHashCodes(hashes);\n            }\n            else {\n                // Classes don't implement GetHashCode by default, but must use identity hashing\n                return numberHash(ObjectRef.id(x));\n                // return stringHash(String(x));\n            }\n        }\n    }\n}\n// Intended for custom numeric types, like long or decimal\nexport function fastStructuralHash(x) {\n    return stringHash(String(x));\n}\n// Intended for declared types that may or may not implement GetHashCode\nexport function safeHash(x) {\n    // return x == null ? 0 : isHashable(x) ? x.GetHashCode() : numberHash(ObjectRef.id(x));\n    return identityHash(x);\n}\nexport function equalArraysWith(x, y, eq) {\n    if (x == null) {\n        return y == null;\n    }\n    if (y == null) {\n        return false;\n    }\n    if (x.length !== y.length) {\n        return false;\n    }\n    for (let i = 0; i < x.length; i++) {\n        if (!eq(x[i], y[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalArrays(x, y) {\n    return equalArraysWith(x, y, equals);\n}\nfunction equalObjects(x, y) {\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return false;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0; i < xKeys.length; i++) {\n        if (xKeys[i] !== yKeys[i] || !equals(x[xKeys[i]], y[yKeys[i]])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function physicalEquality(x, y) {\n    return x === y;\n}\nexport function equals(x, y) {\n    if (x === y) {\n        return true;\n    }\n    else if (x == null) {\n        return y == null;\n    }\n    else if (y == null) {\n        return false;\n    }\n    else if (isEquatable(x)) {\n        return x.Equals(y);\n    }\n    else if (isArrayLike(x)) {\n        return isArrayLike(y) && equalArrays(x, y);\n    }\n    else if (typeof x !== \"object\") {\n        return false;\n    }\n    else if (x instanceof Date) {\n        return (y instanceof Date) && compareDates(x, y) === 0;\n    }\n    else {\n        return Object.getPrototypeOf(x)?.constructor === Object && equalObjects(x, y);\n    }\n}\nexport function compareDates(x, y) {\n    let xtime;\n    let ytime;\n    // DateTimeOffset and DateTime deals with equality differently.\n    if (\"offset\" in x && \"offset\" in y) {\n        xtime = x.getTime();\n        ytime = y.getTime();\n    }\n    else {\n        xtime = x.getTime() + dateOffset(x);\n        ytime = y.getTime() + dateOffset(y);\n    }\n    return xtime === ytime ? 0 : (xtime < ytime ? -1 : 1);\n}\nexport function comparePrimitives(x, y) {\n    return x === y ? 0 : (x < y ? -1 : 1);\n}\nexport function compareArraysWith(x, y, comp) {\n    if (x == null) {\n        return y == null ? 0 : 1;\n    }\n    if (y == null) {\n        return -1;\n    }\n    if (x.length !== y.length) {\n        return x.length < y.length ? -1 : 1;\n    }\n    for (let i = 0, j = 0; i < x.length; i++) {\n        j = comp(x[i], y[i]);\n        if (j !== 0) {\n            return j;\n        }\n    }\n    return 0;\n}\nexport function compareArrays(x, y) {\n    return compareArraysWith(x, y, compare);\n}\nfunction compareObjects(x, y) {\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return xKeys.length < yKeys.length ? -1 : 1;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0, j = 0; i < xKeys.length; i++) {\n        const key = xKeys[i];\n        if (key !== yKeys[i]) {\n            return key < yKeys[i] ? -1 : 1;\n        }\n        else {\n            j = compare(x[key], y[key]);\n            if (j !== 0) {\n                return j;\n            }\n        }\n    }\n    return 0;\n}\nexport function compare(x, y) {\n    if (x === y) {\n        return 0;\n    }\n    else if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    else if (y == null) {\n        return 1;\n    }\n    else if (isComparable(x)) {\n        return x.CompareTo(y);\n    }\n    else if (isArrayLike(x)) {\n        return isArrayLike(y) ? compareArrays(x, y) : -1;\n    }\n    else if (typeof x !== \"object\") {\n        return x < y ? -1 : 1;\n    }\n    else if (x instanceof Date) {\n        return y instanceof Date ? compareDates(x, y) : -1;\n    }\n    else {\n        return Object.getPrototypeOf(x)?.constructor === Object ? compareObjects(x, y) : -1;\n    }\n}\nexport function min(comparer, x, y) {\n    return comparer(x, y) < 0 ? x : y;\n}\nexport function max(comparer, x, y) {\n    return comparer(x, y) > 0 ? x : y;\n}\nexport function clamp(comparer, value, min, max) {\n    return (comparer(value, min) < 0) ? min : (comparer(value, max) > 0) ? max : value;\n}\nexport function createAtom(value) {\n    let atom = value;\n    return (...args) => {\n        if (args.length === 0) {\n            return atom;\n        }\n        else {\n            atom = args[0];\n        }\n    };\n}\nexport function createObj(fields) {\n    const obj = {};\n    for (const kv of fields) {\n        obj[kv[0]] = kv[1];\n    }\n    return obj;\n}\nexport function jsOptions(mutator) {\n    const opts = {};\n    mutator(opts);\n    return opts;\n}\nexport function round(value, digits = 0) {\n    const m = Math.pow(10, digits);\n    const n = +(digits ? value * m : value).toFixed(8);\n    const i = Math.floor(n);\n    const f = n - i;\n    const e = 1e-8;\n    const r = (f > 0.5 - e && f < 0.5 + e) ? ((i % 2 === 0) ? i : i + 1) : Math.round(n);\n    return digits ? r / m : r;\n}\nexport function sign(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n}\nexport function unescapeDataString(s) {\n    // https://stackoverflow.com/a/4458580/524236\n    return decodeURIComponent((s).replace(/\\+/g, \"%20\"));\n}\nexport function escapeDataString(s) {\n    return encodeURIComponent(s).replace(/!/g, \"%21\")\n        .replace(/'/g, \"%27\")\n        .replace(/\\(/g, \"%28\")\n        .replace(/\\)/g, \"%29\")\n        .replace(/\\*/g, \"%2A\");\n}\nexport function escapeUriString(s) {\n    return encodeURI(s);\n}\n// ICollection.Clear and Count members can be called on Arrays\n// or Dictionaries so we need a runtime check (see #1120)\nexport function count(col) {\n    if (isArrayLike(col)) {\n        return col.length;\n    }\n    else {\n        let count = 0;\n        for (const _ of col) {\n            count++;\n        }\n        return count;\n    }\n}\nexport function clear(col) {\n    if (isArrayLike(col)) {\n        col.splice(0);\n    }\n    else {\n        col.clear();\n    }\n}\nconst curried = new WeakMap();\nexport function uncurry2(f) {\n    if (f == null) {\n        return null;\n    }\n    const f2 = (a1, a2) => f(a1)(a2);\n    curried.set(f2, f);\n    return f2;\n}\nexport function curry2(f) {\n    return curried.get(f) ?? ((a1) => (a2) => f(a1, a2));\n}\nexport function uncurry3(f) {\n    if (f == null) {\n        return null;\n    }\n    const f2 = (a1, a2, a3) => f(a1)(a2)(a3);\n    curried.set(f2, f);\n    return f2;\n}\nexport function curry3(f) {\n    return curried.get(f)\n        ?? ((a1) => (a2) => (a3) => f(a1, a2, a3));\n}\nexport function uncurry4(f) {\n    if (f == null) {\n        return null;\n    }\n    const f2 = (a1, a2, a3, a4) => f(a1)(a2)(a3)(a4);\n    curried.set(f2, f);\n    return f2;\n}\nexport function curry4(f) {\n    return curried.get(f)\n        ?? ((a1) => (a2) => (a3) => (a4) => f(a1, a2, a3, a4));\n}\nexport function uncurry5(f) {\n    if (f == null) {\n        return null;\n    }\n    const f2 = (a1, a2, a3, a4, a5) => f(a1)(a2)(a3)(a4)(a5);\n    curried.set(f2, f);\n    return f2;\n}\nexport function curry5(f) {\n    return curried.get(f)\n        ?? ((a1) => (a2) => (a3) => (a4) => (a5) => f(a1, a2, a3, a4, a5));\n}\nexport function uncurry6(f) {\n    if (f == null) {\n        return null;\n    }\n    const f2 = (a1, a2, a3, a4, a5, a6) => f(a1)(a2)(a3)(a4)(a5)(a6);\n    curried.set(f2, f);\n    return f2;\n}\nexport function curry6(f) {\n    return curried.get(f)\n        ?? ((a1) => (a2) => (a3) => (a4) => (a5) => (a6) => f(a1, a2, a3, a4, a5, a6));\n}\nexport function uncurry7(f) {\n    if (f == null) {\n        return null;\n    }\n    const f2 = (a1, a2, a3, a4, a5, a6, a7) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7);\n    curried.set(f2, f);\n    return f2;\n}\nexport function curry7(f) {\n    return curried.get(f)\n        ?? ((a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => f(a1, a2, a3, a4, a5, a6, a7));\n}\nexport function uncurry8(f) {\n    if (f == null) {\n        return null;\n    }\n    const f2 = (a1, a2, a3, a4, a5, a6, a7, a8) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8);\n    curried.set(f2, f);\n    return f2;\n}\nexport function curry8(f) {\n    return curried.get(f)\n        ?? ((a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => f(a1, a2, a3, a4, a5, a6, a7, a8));\n}\nexport function uncurry9(f) {\n    if (f == null) {\n        return null;\n    }\n    const f2 = (a1, a2, a3, a4, a5, a6, a7, a8, a9) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8)(a9);\n    curried.set(f2, f);\n    return f2;\n}\nexport function curry9(f) {\n    return curried.get(f)\n        ?? ((a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => (a9) => f(a1, a2, a3, a4, a5, a6, a7, a8, a9));\n}\nexport function uncurry10(f) {\n    if (f == null) {\n        return null;\n    }\n    const f2 = (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8)(a9)(a10);\n    curried.set(f2, f);\n    return f2;\n}\nexport function curry10(f) {\n    return curried.get(f)\n        ?? ((a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => (a9) => (a10) => f(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10));\n}\n// More performant method to copy arrays, see #2352\nexport function copyToArray(source, sourceIndex, target, targetIndex, count) {\n    if (ArrayBuffer.isView(source) && ArrayBuffer.isView(target)) {\n        target.set(source.subarray(sourceIndex, sourceIndex + count), targetIndex);\n    }\n    else {\n        for (let i = 0; i < count; ++i) {\n            target[targetIndex + i] = source[sourceIndex + i];\n        }\n    }\n}\n","/**\n * DateTimeOffset functions.\n *\n * Note: Date instances are always DateObjects in local\n * timezone (because JS dates are all kinds of messed up).\n * A local date returns UTC epoch when `.getTime()` is called.\n *\n * Basically; invariant: date.getTime() always return UTC time.\n */\nimport { toInt64, toFloat64 } from \"./BigInt.js\";\nimport { compareDates, dateOffset, padWithZeros } from \"./Util.js\";\nexport function kind(value) {\n    return value.kind || 0;\n}\nexport function unixEpochMillisecondsToTicks(ms, offset) {\n    return toInt64(((BigInt(ms) + 62135596800000n) + BigInt(offset)) * 10000n);\n}\nexport function ticksToUnixEpochMilliseconds(ticks) {\n    return Number(((BigInt(ticks) / 10000n) - 62135596800000n));\n}\nexport function dateOffsetToString(offset) {\n    const isMinus = offset < 0;\n    offset = Math.abs(offset);\n    const hours = ~~(offset / 3600000);\n    const minutes = (offset % 3600000) / 60000;\n    return (isMinus ? \"-\" : \"+\") +\n        padWithZeros(hours, 2) + \":\" +\n        padWithZeros(minutes, 2);\n}\nexport function dateToHalfUTCString(date, half) {\n    const str = date.toISOString();\n    return half === \"first\"\n        ? str.substring(0, str.indexOf(\"T\"))\n        : str.substring(str.indexOf(\"T\") + 1, str.length - 1);\n}\nfunction dateToISOString(d, utc) {\n    if (utc) {\n        return d.toISOString();\n    }\n    else {\n        // JS Date is always local\n        const printOffset = d.kind == null ? true : d.kind === 2 /* DateKind.Local */;\n        return padWithZeros(d.getFullYear(), 4) + \"-\" +\n            padWithZeros(d.getMonth() + 1, 2) + \"-\" +\n            padWithZeros(d.getDate(), 2) + \"T\" +\n            padWithZeros(d.getHours(), 2) + \":\" +\n            padWithZeros(d.getMinutes(), 2) + \":\" +\n            padWithZeros(d.getSeconds(), 2) + \".\" +\n            padWithZeros(d.getMilliseconds(), 3) +\n            (printOffset ? dateOffsetToString(d.getTimezoneOffset() * -60000) : \"\");\n    }\n}\nfunction dateToISOStringWithOffset(dateWithOffset, offset) {\n    const str = dateWithOffset.toISOString();\n    return str.substring(0, str.length - 1) + dateOffsetToString(offset);\n}\nfunction dateToStringWithCustomFormat(date, format, utc) {\n    return format.replace(/(\\w)\\1*/g, (match) => {\n        let rep = Number.NaN;\n        switch (match.substring(0, 1)) {\n            case \"y\":\n                const y = utc ? date.getUTCFullYear() : date.getFullYear();\n                rep = match.length < 4 ? y % 100 : y;\n                break;\n            case \"M\":\n                rep = (utc ? date.getUTCMonth() : date.getMonth()) + 1;\n                break;\n            case \"d\":\n                rep = utc ? date.getUTCDate() : date.getDate();\n                break;\n            case \"H\":\n                rep = utc ? date.getUTCHours() : date.getHours();\n                break;\n            case \"h\":\n                const h = utc ? date.getUTCHours() : date.getHours();\n                rep = h > 12 ? h % 12 : h;\n                break;\n            case \"m\":\n                rep = utc ? date.getUTCMinutes() : date.getMinutes();\n                break;\n            case \"s\":\n                rep = utc ? date.getUTCSeconds() : date.getSeconds();\n                break;\n            case \"f\":\n                rep = utc ? date.getUTCMilliseconds() : date.getMilliseconds();\n                break;\n        }\n        if (Number.isNaN(rep)) {\n            return match;\n        }\n        else {\n            return padWithZeros(rep, match.length);\n        }\n    });\n}\nfunction dateToStringWithOffset(date, format) {\n    const d = new Date(date.getTime() + (date.offset ?? 0));\n    if (typeof format !== \"string\") {\n        return d.toISOString().replace(/\\.\\d+/, \"\").replace(/[A-Z]|\\.\\d+/g, \" \") + dateOffsetToString((date.offset ?? 0));\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\": return dateToHalfUTCString(d, \"first\");\n            case \"T\":\n            case \"t\": return dateToHalfUTCString(d, \"second\");\n            case \"O\":\n            case \"o\": return dateToISOStringWithOffset(d, (date.offset ?? 0));\n            default: throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(d, format, true);\n    }\n}\nfunction dateToStringWithKind(date, format) {\n    const utc = date.kind === 1 /* DateKind.UTC */;\n    if (typeof format !== \"string\") {\n        return utc ? date.toUTCString() : date.toLocaleString();\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\":\n                return utc ? dateToHalfUTCString(date, \"first\") : date.toLocaleDateString();\n            case \"T\":\n            case \"t\":\n                return utc ? dateToHalfUTCString(date, \"second\") : date.toLocaleTimeString();\n            case \"O\":\n            case \"o\":\n                return dateToISOString(date, utc);\n            default:\n                throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(date, format, utc);\n    }\n}\nexport function toString(date, format, _provider) {\n    return date.offset != null\n        ? dateToStringWithOffset(date, format)\n        : dateToStringWithKind(date, format);\n}\nexport function DateTime(value, kind) {\n    const d = new Date(value);\n    d.kind = (kind == null ? 0 /* DateKind.Unspecified */ : kind) | 0;\n    return d;\n}\nexport function fromTicks(ticks, kind) {\n    kind = kind != null ? kind : 2 /* DateKind.Local */; // better default than Unspecified\n    let date = DateTime(ticksToUnixEpochMilliseconds(ticks), kind);\n    // Ticks are local to offset (in this case, either UTC or Local/Unknown).\n    // If kind is anything but UTC, that means that the tick number was not\n    // in utc, thus getTime() cannot return UTC, and needs to be shifted.\n    if (kind !== 1 /* DateKind.UTC */) {\n        date = DateTime(date.getTime() - dateOffset(date), kind);\n    }\n    return date;\n}\nexport function fromDateTimeOffset(date, kind) {\n    switch (kind) {\n        case 1 /* DateKind.UTC */: return DateTime(date.getTime(), 1 /* DateKind.UTC */);\n        case 2 /* DateKind.Local */: return DateTime(date.getTime(), 2 /* DateKind.Local */);\n        default:\n            const d = DateTime(date.getTime() + (date.offset ?? 0), kind);\n            return DateTime(d.getTime() - dateOffset(d), kind);\n    }\n}\nexport function getTicks(date) {\n    return unixEpochMillisecondsToTicks(date.getTime(), dateOffset(date));\n}\nexport function minValue() {\n    // This is \"0001-01-01T00:00:00.000Z\", actual JS min value is -8640000000000000\n    return DateTime(-62135596800000, 0 /* DateKind.Unspecified */);\n}\nexport function maxValue() {\n    // This is \"9999-12-31T23:59:59.999Z\", actual JS max value is 8640000000000000\n    return DateTime(253402300799999, 0 /* DateKind.Unspecified */);\n}\nexport function parseRaw(input) {\n    function fail() {\n        throw new Error(`The string is not a valid Date: ${input}`);\n    }\n    if (input == null || input.trim() === \"\") {\n        fail();\n    }\n    // ISO dates without TZ are parsed as UTC. Adding time without TZ keeps them local.\n    if (input.length === 10 && input[4] === \"-\" && input[7] === \"-\") {\n        input += \"T00:00:00\";\n    }\n    let date = new Date(input);\n    let offset = null;\n    if (isNaN(date.getTime())) {\n        // Try to check strings JS Date cannot parse (see #1045, #1422)\n        // tslint:disable-next-line:max-line-length\n        const m = /^\\s*(\\d+[^\\w\\s:]\\d+[^\\w\\s:]\\d+)?\\s*(\\d+:\\d+(?::\\d+(?:\\.\\d+)?)?)?\\s*([AaPp][Mm])?\\s*(Z|[+-]([01]?\\d):?([0-5]?\\d)?)?\\s*$/.exec(input);\n        if (m != null) {\n            let baseDate;\n            let timeInSeconds = 0;\n            if (m[2] != null) {\n                const timeParts = m[2].split(\":\");\n                timeInSeconds =\n                    parseInt(timeParts[0], 10) * 3600 +\n                        parseInt(timeParts[1] || \"0\", 10) * 60 +\n                        parseFloat(timeParts[2] || \"0\");\n                if (m[3] != null && m[3].toUpperCase() === \"PM\") {\n                    timeInSeconds += 720;\n                }\n            }\n            if (m[4] != null) { // There's an offset, parse as UTC\n                if (m[1] != null) {\n                    baseDate = new Date(m[1] + \" UTC\");\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getUTCFullYear() + \"/\" + (d.getUTCMonth() + 1) + \"/\" + d.getUTCDate());\n                }\n                if (m[4] === \"Z\") {\n                    offset = \"Z\";\n                }\n                else {\n                    let offsetInMinutes = parseInt(m[5], 10) * 60 + parseInt(m[6] || \"0\", 10);\n                    if (m[4][0] === \"-\") {\n                        offsetInMinutes *= -1;\n                    }\n                    offset = offsetInMinutes;\n                    timeInSeconds -= offsetInMinutes * 60;\n                }\n            }\n            else {\n                if (m[1] != null) {\n                    baseDate = new Date(m[1]);\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getFullYear() + \"/\" + (d.getMonth() + 1) + \"/\" + d.getDate());\n                }\n            }\n            date = new Date(baseDate.getTime() + timeInSeconds * 1000);\n            // correct for daylight savings time\n            date = new Date(date.getTime() + (date.getTimezoneOffset() - baseDate.getTimezoneOffset()) * 60000);\n        }\n        else {\n            fail();\n        }\n        // Check again the date is valid after transformations, see #2229\n        if (isNaN(date.getTime())) {\n            fail();\n        }\n    }\n    return [date, offset];\n}\nexport function parse(str, detectUTC = false) {\n    const [date, offset] = parseRaw(str);\n    // .NET always parses DateTime as Local if there's offset info (even \"Z\")\n    // Newtonsoft.Json uses UTC if the offset is \"Z\"\n    const kind = offset != null\n        ? (detectUTC && offset === \"Z\" ? 1 /* DateKind.UTC */ : 2 /* DateKind.Local */)\n        : 0 /* DateKind.Unspecified */;\n    return DateTime(date.getTime(), kind);\n}\nexport function tryParse(v, defValue) {\n    try {\n        defValue.contents = parse(v);\n        return true;\n    }\n    catch (_err) {\n        return false;\n    }\n}\nexport function create(year, month, day, h = 0, m = 0, s = 0, ms = 0, kind) {\n    const date = kind === 1 /* DateKind.UTC */\n        ? new Date(Date.UTC(year, month - 1, day, h, m, s, ms))\n        : new Date(year, month - 1, day, h, m, s, ms);\n    if (year <= 99) {\n        if (kind === 1 /* DateKind.UTC */) {\n            date.setUTCFullYear(year, month - 1, day);\n        }\n        else {\n            date.setFullYear(year, month - 1, day);\n        }\n    }\n    const dateValue = date.getTime();\n    if (isNaN(dateValue)) {\n        throw new Error(\"The parameters describe an unrepresentable Date.\");\n    }\n    return DateTime(dateValue, kind);\n}\nexport function now() {\n    return DateTime(Date.now(), 2 /* DateKind.Local */);\n}\nexport function utcNow() {\n    return DateTime(Date.now(), 1 /* DateKind.UTC */);\n}\nexport function today() {\n    return date(now());\n}\nexport function isLeapYear(year) {\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\nexport function daysInMonth(year, month) {\n    return month === 2\n        ? (isLeapYear(year) ? 29 : 28)\n        : (month >= 8 ? (month % 2 === 0 ? 31 : 30) : (month % 2 === 0 ? 30 : 31));\n}\nexport function toUniversalTime(date) {\n    return date.kind === 1 /* DateKind.UTC */ ? date : DateTime(date.getTime(), 1 /* DateKind.UTC */);\n}\nexport function toLocalTime(date) {\n    return date.kind === 2 /* DateKind.Local */ ? date : DateTime(date.getTime(), 2 /* DateKind.Local */);\n}\nexport function specifyKind(d, kind) {\n    return create(year(d), month(d), day(d), hour(d), minute(d), second(d), millisecond(d), kind);\n}\nexport function timeOfDay(d) {\n    return hour(d) * 3600000\n        + minute(d) * 60000\n        + second(d) * 1000\n        + millisecond(d);\n}\nexport function date(d) {\n    return create(year(d), month(d), day(d), 0, 0, 0, 0, d.kind);\n}\nexport function day(d) {\n    return d.kind === 1 /* DateKind.UTC */ ? d.getUTCDate() : d.getDate();\n}\nexport function hour(d) {\n    return d.kind === 1 /* DateKind.UTC */ ? d.getUTCHours() : d.getHours();\n}\nexport function millisecond(d) {\n    return d.kind === 1 /* DateKind.UTC */ ? d.getUTCMilliseconds() : d.getMilliseconds();\n}\nexport function minute(d) {\n    return d.kind === 1 /* DateKind.UTC */ ? d.getUTCMinutes() : d.getMinutes();\n}\nexport function month(d) {\n    return (d.kind === 1 /* DateKind.UTC */ ? d.getUTCMonth() : d.getMonth()) + 1;\n}\nexport function second(d) {\n    return d.kind === 1 /* DateKind.UTC */ ? d.getUTCSeconds() : d.getSeconds();\n}\nexport function year(d) {\n    return d.kind === 1 /* DateKind.UTC */ ? d.getUTCFullYear() : d.getFullYear();\n}\nexport function dayOfWeek(d) {\n    return d.kind === 1 /* DateKind.UTC */ ? d.getUTCDay() : d.getDay();\n}\nexport function dayOfYear(d) {\n    const _year = year(d);\n    const _month = month(d);\n    let _day = day(d);\n    for (let i = 1; i < _month; i++) {\n        _day += daysInMonth(_year, i);\n    }\n    return _day;\n}\nexport function add(d, ts) {\n    const newDate = DateTime(d.getTime() + ts, d.kind);\n    if (d.kind === 2 /* DateKind.Local */) {\n        const oldTzOffset = d.getTimezoneOffset();\n        const newTzOffset = newDate.getTimezoneOffset();\n        return oldTzOffset !== newTzOffset\n            ? DateTime(newDate.getTime() + (newTzOffset - oldTzOffset) * 60000, d.kind)\n            : newDate;\n    }\n    else {\n        return newDate;\n    }\n}\nexport function addDays(d, v) {\n    return add(d, v * 86400000);\n}\nexport function addHours(d, v) {\n    return add(d, v * 3600000);\n}\nexport function addMinutes(d, v) {\n    return add(d, v * 60000);\n}\nexport function addSeconds(d, v) {\n    return add(d, v * 1000);\n}\nexport function addMilliseconds(d, v) {\n    return add(d, v);\n}\nexport function addTicks(d, v) {\n    return add(d, toFloat64(v / 10000n));\n}\nexport function addYears(d, v) {\n    const newMonth = month(d);\n    const newYear = year(d) + v;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function addMonths(d, v) {\n    let newMonth = month(d) + v;\n    let newMonth_ = 0;\n    let yearOffset = 0;\n    if (newMonth > 12) {\n        newMonth_ = newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12);\n        newMonth = newMonth_;\n    }\n    else if (newMonth < 1) {\n        newMonth_ = 12 + newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12) + (newMonth_ === 12 ? -1 : 0);\n        newMonth = newMonth_;\n    }\n    const newYear = year(d) + yearOffset;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function subtract(d, that) {\n    return typeof that === \"number\"\n        ? add(d, -that)\n        : d.getTime() - that.getTime();\n}\nexport function toLongDateString(d) {\n    return d.toDateString();\n}\nexport function toShortDateString(d) {\n    return d.toLocaleDateString();\n}\nexport function toLongTimeString(d) {\n    return d.toLocaleTimeString();\n}\nexport function toShortTimeString(d) {\n    return d.toLocaleTimeString().replace(/:\\d\\d(?!:)/, \"\");\n}\nexport function equals(d1, d2) {\n    return d1.getTime() === d2.getTime();\n}\nexport const compare = compareDates;\nexport const compareTo = compareDates;\nexport function op_Addition(x, y) {\n    return add(x, y);\n}\nexport function op_Subtraction(x, y) {\n    return subtract(x, y);\n}\nexport function isDaylightSavingTime(x) {\n    const jan = new Date(x.getFullYear(), 0, 1);\n    const jul = new Date(x.getFullYear(), 6, 1);\n    return isDST(jan.getTimezoneOffset(), jul.getTimezoneOffset(), x.getTimezoneOffset());\n}\nfunction isDST(janOffset, julOffset, tOffset) {\n    return Math.min(janOffset, julOffset) === tOffset;\n}\nexport default DateTime;\n","export const symbol = Symbol(\"numeric\");\nexport function isNumeric(x) {\n    return typeof x === \"number\" || typeof x === \"bigint\" || x?.[symbol];\n}\nexport function compare(x, y) {\n    if (typeof x === \"number\") {\n        return x < y ? -1 : (x > y ? 1 : 0);\n    }\n    else if (typeof x === \"bigint\") {\n        return x < y ? -1 : (x > y ? 1 : 0);\n    }\n    else {\n        return x.CompareTo(y);\n    }\n}\nexport function multiply(x, y) {\n    if (typeof x === \"number\") {\n        return x * y;\n    }\n    else if (typeof x === \"bigint\") {\n        return x * BigInt(y);\n    }\n    else {\n        return x[symbol]().multiply(y);\n    }\n}\nexport function toFixed(x, dp) {\n    if (typeof x === \"number\") {\n        return x.toFixed(dp);\n    }\n    else if (typeof x === \"bigint\") {\n        return x;\n    }\n    else {\n        return x[symbol]().toFixed(dp);\n    }\n}\nexport function toPrecision(x, sd) {\n    if (typeof x === \"number\") {\n        return x.toPrecision(sd);\n    }\n    else if (typeof x === \"bigint\") {\n        return x;\n    }\n    else {\n        return x[symbol]().toPrecision(sd);\n    }\n}\nexport function toExponential(x, dp) {\n    if (typeof x === \"number\") {\n        return x.toExponential(dp);\n    }\n    else if (typeof x === \"bigint\") {\n        return x;\n    }\n    else {\n        return x[symbol]().toExponential(dp);\n    }\n}\nexport function toHex(x) {\n    if (typeof x === \"number\") {\n        return (Number(x) >>> 0).toString(16);\n    }\n    else if (typeof x === \"bigint\") {\n        // TODO: properly handle other bit sizes\n        return BigInt.asUintN(64, x).toString(16);\n    }\n    else {\n        return x[symbol]().toHex();\n    }\n}\n","export function create(pattern, options = 0) {\n    // Supported RegexOptions\n    // * IgnoreCase:  0x0001\n    // * Multiline:   0x0002\n    // * Compiled:    0x0008 (ignored)\n    // * Singleline:  0x0010\n    // * ECMAScript:  0x0100 (ignored)\n    if ((options & ~(1 ^ 2 ^ 8 ^ 16 ^ 256)) !== 0) {\n        throw new Error(\"RegexOptions only supports: IgnoreCase, Multiline, Compiled, Singleline and ECMAScript\");\n    }\n    // Set always global and unicode flags for compatibility with dotnet, see #2925\n    let flags = \"gu\";\n    flags += options & 1 ? \"i\" : \"\"; // 0x0001 RegexOptions.IgnoreCase\n    flags += options & 2 ? \"m\" : \"\";\n    flags += options & 16 ? \"s\" : \"\";\n    return new RegExp(pattern, flags);\n}\n// From http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex\nexport function escape(str) {\n    return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\nexport function unescape(str) {\n    return str.replace(/\\\\([\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|])/g, \"$1\");\n}\nexport function isMatch(reg, input, startAt = 0) {\n    reg.lastIndex = startAt;\n    return reg.test(input);\n}\nexport function match(reg, input, startAt = 0) {\n    reg.lastIndex = startAt;\n    return reg.exec(input);\n}\nexport function matches(reg, input, startAt = 0) {\n    if (input == null) {\n        throw new Error(\"Input cannot ve null\");\n    }\n    if (!reg.global) {\n        throw new Error(\"Non-global RegExp\"); // Prevent infinite loop\n    }\n    reg.lastIndex = startAt;\n    const matches = [];\n    let m;\n    let lastMatchIndex = -1;\n    // tslint:disable-next-line:no-conditional-assignment\n    while ((m = reg.exec(input)) != null) {\n        // It can happen even global regex get stuck, see #2845\n        if (m.index === lastMatchIndex) {\n            reg.lastIndex++;\n        }\n        else {\n            lastMatchIndex = m.index;\n            matches.push(m);\n        }\n    }\n    return matches;\n}\nexport function options(reg) {\n    let options = 256; // ECMAScript\n    options |= reg.ignoreCase ? 1 : 0;\n    options |= reg.multiline ? 2 : 0;\n    return options;\n}\nexport function replace(reg, input, replacement, limit, offset = 0) {\n    function replacer() {\n        let res = arguments[0];\n        if (limit) {\n            limit--;\n            const match = [];\n            const len = arguments.length;\n            // arguments: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#specifying_a_function_as_a_parameter\n            // * match: matched substring\n            // * p1, p2, ...: nth capture group string\n            // * offset: offset of matched substring\n            // * string: whole string examined\n            // * groups: named capturing groups\n            //           ONLY if regex contains a named capture group AND browser supports named groups\n            // -> last element can be groups OR input string\n            // -> check if last element is string\n            const withGroups = typeof arguments[len - 1] !== \"string\";\n            let pLast = withGroups ? len - 3 : len - 2;\n            for (let i = 0; i < pLast; i++) {\n                match.push(arguments[i]);\n            }\n            match.index = arguments[pLast++];\n            match.input = arguments[pLast++];\n            if (withGroups) {\n                match.groups = arguments[pLast];\n            }\n            res = replacement(match);\n        }\n        return res;\n    }\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit ?? 0);\n        input = tmp;\n        limit = undefined;\n    }\n    if (typeof replacement === \"function\") {\n        limit = limit == null ? -1 : limit;\n        return input.substring(0, offset) + input.substring(offset).replace(reg, replacer);\n    }\n    else {\n        replacement =\n            replacement\n                // $0 doesn't work with JS regex, see #1155\n                .replace(/\\$0/g, (_s) => \"$&\")\n                // named groups in replacement are `${name}` in .Net, but `$<name>` in JS (in regex: groups are `(?<name>...)` in both)\n                .replace(/\\${([^}]+)}/g, \"\\$<$1>\");\n        if (limit != null) {\n            let m;\n            const sub1 = input.substring(offset);\n            const _matches = matches(reg, sub1);\n            const sub2 = matches.length > limit ? (m = _matches[limit - 1], sub1.substring(0, m.index + m[0].length)) : sub1;\n            return input.substring(0, offset) + sub2.replace(reg, replacement)\n                + input.substring(offset + sub2.length);\n        }\n        else {\n            return input.replace(reg, replacement);\n        }\n    }\n}\nexport function split(reg, input, limit, offset = 0) {\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit ?? 0);\n        input = tmp;\n        limit = undefined;\n    }\n    input = input.substring(offset);\n    return input.split(reg, limit);\n}\n","import { combineHashCodes, compare, compareArrays, equalArrays, equals, sameConstructor, numberHash, structuralHash } from \"./Util.js\";\nexport function seqToString(self) {\n    let count = 0;\n    let str = \"[\";\n    for (const x of self) {\n        if (count === 0) {\n            str += toString(x);\n        }\n        else if (count === 100) {\n            str += \"; ...\";\n            break;\n        }\n        else {\n            str += \"; \" + toString(x);\n        }\n        count++;\n    }\n    return str + \"]\";\n}\nexport function toString(x, callStack = 0) {\n    if (x != null && typeof x === \"object\") {\n        if (typeof x.toString === \"function\") {\n            return x.toString();\n        }\n        else if (Symbol.iterator in x) {\n            return seqToString(x);\n        }\n        else { // TODO: Date?\n            const cons = Object.getPrototypeOf(x)?.constructor;\n            return cons === Object && callStack < 10\n                // Same format as recordToString\n                ? \"{ \" + Object.entries(x).map(([k, v]) => k + \" = \" + toString(v, callStack + 1)).join(\"\\n  \") + \" }\"\n                : cons?.name ?? \"\";\n        }\n    }\n    return String(x);\n}\nexport function unionToString(name, fields) {\n    if (fields.length === 0) {\n        return name;\n    }\n    else {\n        let fieldStr;\n        let withParens = true;\n        if (fields.length === 1) {\n            fieldStr = toString(fields[0]);\n            withParens = fieldStr.indexOf(\" \") >= 0;\n        }\n        else {\n            fieldStr = fields.map((x) => toString(x)).join(\", \");\n        }\n        return name + (withParens ? \" (\" : \" \") + fieldStr + (withParens ? \")\" : \"\");\n    }\n}\nexport class Union {\n    get name() {\n        return this.cases()[this.tag];\n    }\n    toJSON() {\n        return this.fields.length === 0 ? this.name : [this.name].concat(this.fields);\n    }\n    toString() {\n        return unionToString(this.name, this.fields);\n    }\n    GetHashCode() {\n        const hashes = this.fields.map((x) => structuralHash(x));\n        hashes.splice(0, 0, numberHash(this.tag));\n        return combineHashCodes(hashes);\n    }\n    Equals(other) {\n        if (this === other) {\n            return true;\n        }\n        else if (!sameConstructor(this, other)) {\n            return false;\n        }\n        else if (this.tag === other.tag) {\n            return equalArrays(this.fields, other.fields);\n        }\n        else {\n            return false;\n        }\n    }\n    CompareTo(other) {\n        if (this === other) {\n            return 0;\n        }\n        else if (!sameConstructor(this, other)) {\n            return -1;\n        }\n        else if (this.tag === other.tag) {\n            return compareArrays(this.fields, other.fields);\n        }\n        else {\n            return this.tag < other.tag ? -1 : 1;\n        }\n    }\n}\nfunction recordToJSON(self) {\n    const o = {};\n    const keys = Object.keys(self);\n    for (let i = 0; i < keys.length; i++) {\n        o[keys[i]] = self[keys[i]];\n    }\n    return o;\n}\nfunction recordToString(self) {\n    return \"{ \" + Object.entries(self).map(([k, v]) => k + \" = \" + toString(v)).join(\"\\n  \") + \" }\";\n}\nfunction recordGetHashCode(self) {\n    const hashes = Object.values(self).map((v) => structuralHash(v));\n    return combineHashCodes(hashes);\n}\nfunction recordEquals(self, other) {\n    if (self === other) {\n        return true;\n    }\n    else if (!sameConstructor(self, other)) {\n        return false;\n    }\n    else {\n        const thisNames = Object.keys(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            if (!equals(self[thisNames[i]], other[thisNames[i]])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nfunction recordCompareTo(self, other) {\n    if (self === other) {\n        return 0;\n    }\n    else if (!sameConstructor(self, other)) {\n        return -1;\n    }\n    else {\n        const thisNames = Object.keys(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            const result = compare(self[thisNames[i]], other[thisNames[i]]);\n            if (result !== 0) {\n                return result;\n            }\n        }\n        return 0;\n    }\n}\nexport class Record {\n    toJSON() { return recordToJSON(this); }\n    toString() { return recordToString(this); }\n    GetHashCode() { return recordGetHashCode(this); }\n    Equals(other) { return recordEquals(this, other); }\n    CompareTo(other) { return recordCompareTo(this, other); }\n}\nexport class FSharpRef {\n    get contents() {\n        return this.getter();\n    }\n    set contents(v) {\n        this.setter(v);\n    }\n    constructor(contentsOrGetter, setter) {\n        if (typeof setter === \"function\") {\n            this.getter = contentsOrGetter;\n            this.setter = setter;\n        }\n        else {\n            this.getter = () => contentsOrGetter;\n            this.setter = (v) => { contentsOrGetter = v; };\n        }\n    }\n}\n// EXCEPTIONS\n// Exception is intentionally not derived from Error, for performance reasons (see #2160)\nexport class Exception {\n    constructor(message) {\n        this.message = message;\n    }\n}\nexport function isException(x) {\n    return x instanceof Exception || x instanceof Error;\n}\nexport function isPromise(x) {\n    return x instanceof Promise;\n}\nexport function ensureErrorOrException(e) {\n    // Exceptionally admitting promises as errors for compatibility with React.suspense (see #3298)\n    return (isException(e) || isPromise(e)) ? e : new Error(String(e));\n}\nexport class FSharpException extends Exception {\n    toJSON() { return recordToJSON(this); }\n    toString() { return recordToString(this); }\n    GetHashCode() { return recordGetHashCode(this); }\n    Equals(other) { return recordEquals(this, other); }\n    CompareTo(other) { return recordCompareTo(this, other); }\n}\nexport class MatchFailureException extends FSharpException {\n    constructor(arg1, arg2, arg3) {\n        super();\n        this.arg1 = arg1;\n        this.arg2 = arg2 | 0;\n        this.arg3 = arg3 | 0;\n        this.message = \"The match cases were incomplete\";\n    }\n}\nexport class Attribute {\n}\n","import { toString as dateToString } from \"./Date.js\";\nimport { compare as numericCompare, isNumeric, multiply, toExponential, toFixed, toHex, toPrecision } from \"./Numeric.js\";\nimport { escape } from \"./RegExp.js\";\nimport { toString } from \"./Types.js\";\nconst fsFormatRegExp = /(^|[^%])%([0+\\- ]*)(\\*|\\d+)?(?:\\.(\\d+))?(\\w)/g;\nconst interpolateRegExp = /(?:(^|[^%])%([0+\\- ]*)(\\d+)?(?:\\.(\\d+))?(\\w))?%P\\(\\)/g;\nconst formatRegExp = /\\{(\\d+)(,-?\\d+)?(?:\\:([a-zA-Z])(\\d{0,2})|\\:(.+?))?\\}/g;\nfunction isLessThan(x, y) {\n    return numericCompare(x, y) < 0;\n}\nfunction cmp(x, y, ic) {\n    function isIgnoreCase(i) {\n        return i === true ||\n            i === 1 /* StringComparison.CurrentCultureIgnoreCase */ ||\n            i === 3 /* StringComparison.InvariantCultureIgnoreCase */ ||\n            i === 5 /* StringComparison.OrdinalIgnoreCase */;\n    }\n    function isOrdinal(i) {\n        return i === 4 /* StringComparison.Ordinal */ ||\n            i === 5 /* StringComparison.OrdinalIgnoreCase */;\n    }\n    if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    if (y == null) {\n        return 1;\n    } // everything is bigger than null\n    if (isOrdinal(ic)) {\n        if (isIgnoreCase(ic)) {\n            x = x.toLowerCase();\n            y = y.toLowerCase();\n        }\n        return (x === y) ? 0 : (x < y ? -1 : 1);\n    }\n    else {\n        if (isIgnoreCase(ic)) {\n            x = x.toLocaleLowerCase();\n            y = y.toLocaleLowerCase();\n        }\n        return x.localeCompare(y);\n    }\n}\nexport function compare(...args) {\n    switch (args.length) {\n        case 2: return cmp(args[0], args[1], false);\n        case 3: return cmp(args[0], args[1], args[2]);\n        case 4: return cmp(args[0], args[1], args[2] === true);\n        case 5: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), false);\n        case 6: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5]);\n        case 7: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5] === true);\n        default: throw new Error(\"String.compare: Unsupported number of parameters\");\n    }\n}\nexport function compareOrdinal(x, y) {\n    return cmp(x, y, 4 /* StringComparison.Ordinal */);\n}\nexport function compareTo(x, y) {\n    return cmp(x, y, 0 /* StringComparison.CurrentCulture */);\n}\nexport function startsWith(str, pattern, ic) {\n    if (str.length >= pattern.length) {\n        return cmp(str.substr(0, pattern.length), pattern, ic) === 0;\n    }\n    return false;\n}\nexport function indexOfAny(str, anyOf, ...args) {\n    if (str == null || str === \"\") {\n        return -1;\n    }\n    const startIndex = (args.length > 0) ? args[0] : 0;\n    if (startIndex < 0) {\n        throw new Error(\"Start index cannot be negative\");\n    }\n    const length = (args.length > 1) ? args[1] : str.length - startIndex;\n    if (length < 0) {\n        throw new Error(\"Length cannot be negative\");\n    }\n    if (startIndex + length > str.length) {\n        throw new Error(\"Invalid startIndex and length\");\n    }\n    str = str.substring(startIndex, startIndex + length);\n    for (const c of anyOf) {\n        const index = str.indexOf(c);\n        if (index > -1) {\n            return index + startIndex;\n        }\n    }\n    return -1;\n}\nexport function printf(input) {\n    return {\n        input,\n        cont: fsFormat(input),\n    };\n}\nexport function interpolate(str, values) {\n    let valIdx = 0;\n    let strIdx = 0;\n    let result = \"\";\n    interpolateRegExp.lastIndex = 0;\n    let match = interpolateRegExp.exec(str);\n    while (match) {\n        // The first group corresponds to the no-escape char (^|[^%]), the actual pattern starts in the next char\n        // Note: we don't use negative lookbehind because some browsers don't support it yet\n        const matchIndex = match.index + (match[1] || \"\").length;\n        result += str.substring(strIdx, matchIndex).replace(/%%/g, \"%\");\n        const [, , flags, padLength, precision, format] = match;\n        // Save interpolateRegExp.lastIndex before running formatReplacement because the values\n        // may also involve interpolation and make use of interpolateRegExp (see #3078)\n        strIdx = interpolateRegExp.lastIndex;\n        result += formatReplacement(values[valIdx++], flags, padLength, precision, format);\n        // Move interpolateRegExp.lastIndex one char behind to make sure we match the no-escape char next time\n        interpolateRegExp.lastIndex = strIdx - 1;\n        match = interpolateRegExp.exec(str);\n    }\n    result += str.substring(strIdx).replace(/%%/g, \"%\");\n    return result;\n}\nfunction continuePrint(cont, arg) {\n    return typeof arg === \"string\" ? cont(arg) : arg.cont(cont);\n}\nexport function toConsole(arg) {\n    // Don't remove the lambda here, see #1357\n    return continuePrint((x) => console.log(x), arg);\n}\nexport function toConsoleError(arg) {\n    return continuePrint((x) => console.error(x), arg);\n}\nexport function toText(arg) {\n    return continuePrint((x) => x, arg);\n}\nexport function toFail(arg) {\n    return continuePrint((x) => {\n        throw new Error(x);\n    }, arg);\n}\nfunction formatReplacement(rep, flags, padLength, precision, format) {\n    let sign = \"\";\n    flags = flags || \"\";\n    format = format || \"\";\n    if (isNumeric(rep)) {\n        if (format.toLowerCase() !== \"x\") {\n            if (isLessThan(rep, 0)) {\n                rep = multiply(rep, -1);\n                sign = \"-\";\n            }\n            else {\n                if (flags.indexOf(\" \") >= 0) {\n                    sign = \" \";\n                }\n                else if (flags.indexOf(\"+\") >= 0) {\n                    sign = \"+\";\n                }\n            }\n        }\n        precision = precision == null ? null : parseInt(precision, 10);\n        switch (format) {\n            case \"f\":\n            case \"F\":\n                precision = precision != null ? precision : 6;\n                rep = toFixed(rep, precision);\n                break;\n            case \"g\":\n            case \"G\":\n                rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                break;\n            case \"e\":\n            case \"E\":\n                rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                break;\n            case \"x\":\n                rep = toHex(rep);\n                break;\n            case \"X\":\n                rep = toHex(rep).toUpperCase();\n                break;\n            default: // AOid\n                rep = String(rep);\n                break;\n        }\n    }\n    else if (rep instanceof Date) {\n        rep = dateToString(rep);\n    }\n    else {\n        rep = toString(rep);\n    }\n    padLength = typeof padLength === \"number\" ? padLength : parseInt(padLength, 10);\n    if (!isNaN(padLength)) {\n        const zeroFlag = flags.indexOf(\"0\") >= 0; // Use '0' for left padding\n        const minusFlag = flags.indexOf(\"-\") >= 0; // Right padding\n        const ch = minusFlag || !zeroFlag ? \" \" : \"0\";\n        if (ch === \"0\") {\n            rep = pad(rep, padLength - sign.length, ch, minusFlag);\n            rep = sign + rep;\n        }\n        else {\n            rep = pad(sign + rep, padLength, ch, minusFlag);\n        }\n    }\n    else {\n        rep = sign + rep;\n    }\n    return rep;\n}\nfunction createPrinter(cont, _strParts, _matches, _result = \"\", padArg = -1) {\n    return (...args) => {\n        // Make copies of the values passed by reference because the function can be used multiple times\n        let result = _result;\n        const strParts = _strParts.slice();\n        const matches = _matches.slice();\n        for (const arg of args) {\n            const [, , flags, _padLength, precision, format] = matches[0];\n            let padLength = _padLength;\n            if (padArg >= 0) {\n                padLength = padArg;\n                padArg = -1;\n            }\n            else if (padLength === \"*\") {\n                if (arg < 0) {\n                    throw new Error(\"Non-negative number required\");\n                }\n                padArg = arg;\n                continue;\n            }\n            result += strParts[0];\n            result += formatReplacement(arg, flags, padLength, precision, format);\n            strParts.splice(0, 1);\n            matches.splice(0, 1);\n        }\n        if (matches.length === 0) {\n            result += strParts[0];\n            return cont(result);\n        }\n        else {\n            return createPrinter(cont, strParts, matches, result, padArg);\n        }\n    };\n}\nexport function fsFormat(str) {\n    return (cont) => {\n        fsFormatRegExp.lastIndex = 0;\n        const strParts = [];\n        const matches = [];\n        let strIdx = 0;\n        let match = fsFormatRegExp.exec(str);\n        while (match) {\n            // The first group corresponds to the no-escape char (^|[^%]), the actual pattern starts in the next char\n            // Note: we don't use negative lookbehind because some browsers don't support it yet\n            const matchIndex = match.index + (match[1] || \"\").length;\n            strParts.push(str.substring(strIdx, matchIndex).replace(/%%/g, \"%\"));\n            matches.push(match);\n            strIdx = fsFormatRegExp.lastIndex;\n            // Likewise we need to move fsFormatRegExp.lastIndex one char behind to make sure we match the no-escape char next time\n            fsFormatRegExp.lastIndex -= 1;\n            match = fsFormatRegExp.exec(str);\n        }\n        if (strParts.length === 0) {\n            return cont(str.replace(/%%/g, \"%\"));\n        }\n        else {\n            strParts.push(str.substring(strIdx).replace(/%%/g, \"%\"));\n            return createPrinter(cont, strParts, matches);\n        }\n    };\n}\nexport function format(str, ...args) {\n    let str2;\n    if (typeof str === \"object\") {\n        // Called with culture info\n        str2 = String(args[0]);\n        args.shift();\n    }\n    else {\n        str2 = str;\n    }\n    return str2.replace(formatRegExp, (_, idx, padLength, format, precision, pattern) => {\n        if (idx < 0 || idx >= args.length) {\n            throw new Error(\"Index must be greater or equal to zero and less than the arguments' length.\");\n        }\n        let rep = args[idx];\n        if (isNumeric(rep)) {\n            precision = precision == null ? null : parseInt(precision, 10);\n            switch (format) {\n                case \"f\":\n                case \"F\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(rep, precision);\n                    break;\n                case \"g\":\n                case \"G\":\n                    rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                    break;\n                case \"e\":\n                case \"E\":\n                    rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                    break;\n                case \"p\":\n                case \"P\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(multiply(rep, 100), precision) + \" %\";\n                    break;\n                case \"d\":\n                case \"D\":\n                    rep = precision != null ? padLeft(String(rep), precision, \"0\") : String(rep);\n                    break;\n                case \"x\":\n                case \"X\":\n                    rep = precision != null ? padLeft(toHex(rep), precision, \"0\") : toHex(rep);\n                    if (format === \"X\") {\n                        rep = rep.toUpperCase();\n                    }\n                    break;\n                default:\n                    if (pattern) {\n                        let sign = \"\";\n                        rep = pattern.replace(/([0#,]+)(\\.[0#]+)?/, (_, intPart, decimalPart) => {\n                            if (isLessThan(rep, 0)) {\n                                rep = multiply(rep, -1);\n                                sign = \"-\";\n                            }\n                            decimalPart = decimalPart == null ? \"\" : decimalPart.substring(1);\n                            rep = toFixed(rep, Math.max(decimalPart.length, 0));\n                            let [repInt, repDecimal] = rep.split(\".\");\n                            repDecimal || (repDecimal = \"\");\n                            const leftZeroes = intPart.replace(/,/g, \"\").replace(/^#+/, \"\").length;\n                            repInt = padLeft(repInt, leftZeroes, \"0\");\n                            const rightZeros = decimalPart.replace(/#+$/, \"\").length;\n                            if (rightZeros > repDecimal.length) {\n                                repDecimal = padRight(repDecimal, rightZeros, \"0\");\n                            }\n                            else if (rightZeros < repDecimal.length) {\n                                repDecimal = repDecimal.substring(0, rightZeros) + repDecimal.substring(rightZeros).replace(/0+$/, \"\");\n                            }\n                            // Thousands separator\n                            if (intPart.indexOf(\",\") > 0) {\n                                const i = repInt.length % 3;\n                                const thousandGroups = Math.floor(repInt.length / 3);\n                                let thousands = i > 0 ? repInt.substr(0, i) + (thousandGroups > 0 ? \",\" : \"\") : \"\";\n                                for (let j = 0; j < thousandGroups; j++) {\n                                    thousands += repInt.substr(i + j * 3, 3) + (j < thousandGroups - 1 ? \",\" : \"\");\n                                }\n                                repInt = thousands;\n                            }\n                            return repDecimal.length > 0 ? repInt + \".\" + repDecimal : repInt;\n                        });\n                        rep = sign + rep;\n                    }\n            }\n        }\n        else if (rep instanceof Date) {\n            rep = dateToString(rep, pattern || format);\n        }\n        else {\n            rep = toString(rep);\n        }\n        padLength = parseInt((padLength || \" \").substring(1), 10);\n        if (!isNaN(padLength)) {\n            rep = pad(String(rep), Math.abs(padLength), \" \", padLength < 0);\n        }\n        return rep;\n    });\n}\nexport function endsWith(str, search) {\n    const idx = str.lastIndexOf(search);\n    return idx >= 0 && idx === str.length - search.length;\n}\nexport function initialize(n, f) {\n    if (n < 0) {\n        throw new Error(\"String length must be non-negative\");\n    }\n    const xs = new Array(n);\n    for (let i = 0; i < n; i++) {\n        xs[i] = f(i);\n    }\n    return xs.join(\"\");\n}\nexport function insert(str, startIndex, value) {\n    if (startIndex < 0 || startIndex > str.length) {\n        throw new Error(\"startIndex is negative or greater than the length of this instance.\");\n    }\n    return str.substring(0, startIndex) + value + str.substring(startIndex);\n}\nexport function isNullOrEmpty(str) {\n    return typeof str !== \"string\" || str.length === 0;\n}\nexport function isNullOrWhiteSpace(str) {\n    return typeof str !== \"string\" || /^\\s*$/.test(str);\n}\nexport function concat(...xs) {\n    return xs.map((x) => String(x)).join(\"\");\n}\nexport function join(delimiter, xs) {\n    if (Array.isArray(xs)) {\n        return xs.join(delimiter);\n    }\n    else {\n        return Array.from(xs).join(delimiter);\n    }\n}\nexport function joinWithIndices(delimiter, xs, startIndex, count) {\n    const endIndexPlusOne = startIndex + count;\n    if (endIndexPlusOne > xs.length) {\n        throw new Error(\"Index and count must refer to a location within the buffer.\");\n    }\n    return xs.slice(startIndex, endIndexPlusOne).join(delimiter);\n}\nfunction notSupported(name) {\n    throw new Error(\"The environment doesn't support '\" + name + \"', please use a polyfill.\");\n}\nexport function toBase64String(inArray) {\n    let str = \"\";\n    for (let i = 0; i < inArray.length; i++) {\n        str += String.fromCharCode(inArray[i]);\n    }\n    return typeof btoa === \"function\" ? btoa(str) : notSupported(\"btoa\");\n}\nexport function fromBase64String(b64Encoded) {\n    const binary = typeof atob === \"function\" ? atob(b64Encoded) : notSupported(\"atob\");\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes;\n}\nfunction pad(str, len, ch, isRight) {\n    ch = ch || \" \";\n    len = len - str.length;\n    for (let i = 0; i < len; i++) {\n        str = isRight ? str + ch : ch + str;\n    }\n    return str;\n}\nexport function padLeft(str, len, ch) {\n    return pad(str, len, ch);\n}\nexport function padRight(str, len, ch) {\n    return pad(str, len, ch, true);\n}\nexport function remove(str, startIndex, count) {\n    if (startIndex >= str.length) {\n        throw new Error(\"startIndex must be less than length of string\");\n    }\n    if (typeof count === \"number\" && (startIndex + count) > str.length) {\n        throw new Error(\"Index and count must refer to a location within the string.\");\n    }\n    return str.slice(0, startIndex) + (typeof count === \"number\" ? str.substr(startIndex + count) : \"\");\n}\nexport function replace(str, search, replace) {\n    return str.replace(new RegExp(escape(search), \"g\"), replace);\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function getCharAtIndex(input, index) {\n    if (index < 0 || index >= input.length) {\n        throw new Error(\"Index was outside the bounds of the array.\");\n    }\n    return input[index];\n}\nexport function split(str, splitters, count, options) {\n    count = typeof count === \"number\" ? count : undefined;\n    options = typeof options === \"number\" ? options : 0;\n    if (count && count < 0) {\n        throw new Error(\"Count cannot be less than zero\");\n    }\n    if (count === 0) {\n        return [];\n    }\n    const removeEmpty = (options & 1) === 1;\n    const trim = (options & 2) === 2;\n    splitters = splitters || [];\n    splitters = splitters.filter(x => x).map(escape);\n    splitters = splitters.length > 0 ? splitters : [\"\\\\s\"];\n    const splits = [];\n    const reg = new RegExp(splitters.join(\"|\"), \"g\");\n    let findSplits = true;\n    let i = 0;\n    do {\n        const match = reg.exec(str);\n        if (match === null) {\n            const candidate = trim ? str.substring(i).trim() : str.substring(i);\n            if (!removeEmpty || candidate.length > 0) {\n                splits.push(candidate);\n            }\n            findSplits = false;\n        }\n        else {\n            const candidate = trim ? str.substring(i, match.index).trim() : str.substring(i, match.index);\n            if (!removeEmpty || candidate.length > 0) {\n                if (count != null && splits.length + 1 === count) {\n                    splits.push(trim ? str.substring(i).trim() : str.substring(i));\n                    findSplits = false;\n                }\n                else {\n                    splits.push(candidate);\n                }\n            }\n            i = reg.lastIndex;\n        }\n    } while (findSplits);\n    return splits;\n}\nexport function trim(str, ...chars) {\n    if (chars.length === 0) {\n        return str.trim();\n    }\n    const pattern = \"[\" + escape(chars.join(\"\")) + \"]+\";\n    return str.replace(new RegExp(\"^\" + pattern), \"\").replace(new RegExp(pattern + \"$\"), \"\");\n}\nexport function trimStart(str, ...chars) {\n    return chars.length === 0\n        ? str.trimStart()\n        : str.replace(new RegExp(\"^[\" + escape(chars.join(\"\")) + \"]+\"), \"\");\n}\nexport function trimEnd(str, ...chars) {\n    return chars.length === 0\n        ? str.trimEnd()\n        : str.replace(new RegExp(\"[\" + escape(chars.join(\"\")) + \"]+$\"), \"\");\n}\nexport function filter(pred, x) {\n    return x.split(\"\").filter((c) => pred(c)).join(\"\");\n}\nexport function substring(str, startIndex, length) {\n    if ((startIndex + (length || 0) > str.length)) {\n        throw new Error(\"Invalid startIndex and/or length\");\n    }\n    return length != null ? str.substr(startIndex, length) : str.substr(startIndex);\n}\nexport function fmt(strs, ...args) {\n    return ({ strs, args });\n}\nexport function fmtWith(fmts) {\n    return (strs, ...args) => ({ strs, args, fmts });\n}\nexport function getFormat(s) {\n    return s.fmts\n        ? s.strs.reduce((acc, newPart, index) => acc + `{${String(index - 1) + s.fmts[index - 1]}}` + newPart)\n        : s.strs.reduce((acc, newPart, index) => acc + `{${index - 1}}` + newPart);\n}\n","import { structuralHash, equals, compare } from \"./Util.js\";\n// Using a class here for better compatibility with TS files importing Some\nexport class Some {\n    constructor(value) {\n        this.value = value;\n    }\n    toJSON() {\n        return this.value;\n    }\n    // Don't add \"Some\" for consistency with erased options\n    toString() {\n        return String(this.value);\n    }\n    GetHashCode() {\n        return structuralHash(this.value);\n    }\n    Equals(other) {\n        if (other == null) {\n            return false;\n        }\n        else {\n            return equals(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n    CompareTo(other) {\n        if (other == null) {\n            return 1;\n        }\n        else {\n            return compare(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n}\nexport function value(x) {\n    if (x == null) {\n        throw new Error(\"Option has no value\");\n    }\n    else {\n        return x instanceof Some ? x.value : x;\n    }\n}\nexport function unwrap(opt) {\n    return opt instanceof Some ? opt.value : opt;\n}\nexport function some(x) {\n    return x == null || x instanceof Some ? new Some(x) : x;\n}\nexport function ofNullable(x) {\n    // This will fail with unit probably, an alternative would be:\n    // return x === null ? undefined : (x === undefined ? new Some(x) : x);\n    return x == null ? undefined : x;\n}\nexport function toNullable(x) {\n    return x == null ? null : value(x);\n}\nexport function flatten(x) {\n    return x == null ? undefined : value(x);\n}\nexport function toArray(opt) {\n    return (opt == null) ? [] : [value(opt)];\n}\nexport function defaultArg(opt, defaultValue) {\n    return (opt != null) ? value(opt) : defaultValue;\n}\nexport function defaultArgWith(opt, defThunk) {\n    return (opt != null) ? value(opt) : defThunk();\n}\nexport function orElse(opt, ifNone) {\n    return opt == null ? ifNone : opt;\n}\nexport function orElseWith(opt, ifNoneThunk) {\n    return opt == null ? ifNoneThunk() : opt;\n}\nexport function filter(predicate, opt) {\n    return (opt != null) ? (predicate(value(opt)) ? opt : undefined) : opt;\n}\nexport function map(mapping, opt) {\n    return (opt != null) ? some(mapping(value(opt))) : undefined;\n}\nexport function map2(mapping, opt1, opt2) {\n    return (opt1 != null && opt2 != null) ? mapping(value(opt1), value(opt2)) : undefined;\n}\nexport function map3(mapping, opt1, opt2, opt3) {\n    return (opt1 != null && opt2 != null && opt3 != null) ? mapping(value(opt1), value(opt2), value(opt3)) : undefined;\n}\nexport function bind(binder, opt) {\n    return opt != null ? binder(value(opt)) : undefined;\n}\nexport function tryOp(op, arg) {\n    try {\n        return some(op(arg));\n    }\n    catch {\n        return undefined;\n    }\n}\n","export function Helpers_allocateArrayFromCons(cons, len) {\n    if ((typeof cons) === \"function\") {\n        return new cons(len);\n    }\n    else {\n        return new Array(len);\n    }\n}\n","import { Helpers_allocateArrayFromCons } from \"./Native.js\";\nimport { value as value_2, map as map_1, defaultArg, some } from \"./Option.js\";\nimport { min as min_1, max as max_1 } from \"./Double.js\";\nimport { equals as equals_1, disposeSafe, getEnumerator, copyToArray, defaultOf } from \"./Util.js\";\nimport { SR_indexOutOfBounds } from \"./Global.js\";\nfunction indexNotFound() {\n    throw new Error(\"An index satisfying the predicate was not found in the collection.\");\n}\nfunction differentLengths() {\n    throw new Error(\"Arrays had different lengths\");\n}\nexport function append(array1, array2, cons) {\n    const len1 = array1.length | 0;\n    const len2 = array2.length | 0;\n    const newArray = Helpers_allocateArrayFromCons(cons, len1 + len2);\n    for (let i = 0; i <= (len1 - 1); i++) {\n        newArray[i] = array1[i];\n    }\n    for (let i_1 = 0; i_1 <= (len2 - 1); i_1++) {\n        newArray[i_1 + len1] = array2[i_1];\n    }\n    return newArray;\n}\nexport function filter(predicate, array) {\n    return array.filter(predicate);\n}\nexport function fill(target, targetIndex, count, value) {\n    const start = targetIndex | 0;\n    return target.fill(value, start, (start + count));\n}\nexport function getSubArray(array, start, count) {\n    const start_1 = start | 0;\n    return array.slice(start_1, (start_1 + count));\n}\nexport function last(array) {\n    if (array.length === 0) {\n        throw new Error(\"The input array was empty\\\\nParameter name: array\");\n    }\n    return array[array.length - 1];\n}\nexport function tryLast(array) {\n    if (array.length === 0) {\n        return void 0;\n    }\n    else {\n        return some(array[array.length - 1]);\n    }\n}\nexport function mapIndexed(f, source, cons) {\n    const len = source.length | 0;\n    const target = Helpers_allocateArrayFromCons(cons, len);\n    for (let i = 0; i <= (len - 1); i++) {\n        target[i] = f(i, source[i]);\n    }\n    return target;\n}\nexport function map(f, source, cons) {\n    const len = source.length | 0;\n    const target = Helpers_allocateArrayFromCons(cons, len);\n    for (let i = 0; i <= (len - 1); i++) {\n        target[i] = f(source[i]);\n    }\n    return target;\n}\nexport function mapIndexed2(f, source1, source2, cons) {\n    if (source1.length !== source2.length) {\n        throw new Error(\"Arrays had different lengths\");\n    }\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\n    for (let i = 0; i <= (source1.length - 1); i++) {\n        result[i] = f(i, source1[i], source2[i]);\n    }\n    return result;\n}\nexport function map2(f, source1, source2, cons) {\n    if (source1.length !== source2.length) {\n        throw new Error(\"Arrays had different lengths\");\n    }\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\n    for (let i = 0; i <= (source1.length - 1); i++) {\n        result[i] = f(source1[i], source2[i]);\n    }\n    return result;\n}\nexport function mapIndexed3(f, source1, source2, source3, cons) {\n    if ((source1.length !== source2.length) ? true : (source2.length !== source3.length)) {\n        throw new Error(\"Arrays had different lengths\");\n    }\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\n    for (let i = 0; i <= (source1.length - 1); i++) {\n        result[i] = f(i, source1[i], source2[i], source3[i]);\n    }\n    return result;\n}\nexport function map3(f, source1, source2, source3, cons) {\n    if ((source1.length !== source2.length) ? true : (source2.length !== source3.length)) {\n        throw new Error(\"Arrays had different lengths\");\n    }\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\n    for (let i = 0; i <= (source1.length - 1); i++) {\n        result[i] = f(source1[i], source2[i], source3[i]);\n    }\n    return result;\n}\nexport function mapFold(mapping, state, array, cons) {\n    const matchValue = array.length | 0;\n    if (matchValue === 0) {\n        return [[], state];\n    }\n    else {\n        let acc = state;\n        const res = Helpers_allocateArrayFromCons(cons, matchValue);\n        for (let i = 0; i <= (array.length - 1); i++) {\n            const patternInput = mapping(acc, array[i]);\n            res[i] = patternInput[0];\n            acc = patternInput[1];\n        }\n        return [res, acc];\n    }\n}\nexport function mapFoldBack(mapping, array, state, cons) {\n    const matchValue = array.length | 0;\n    if (matchValue === 0) {\n        return [[], state];\n    }\n    else {\n        let acc = state;\n        const res = Helpers_allocateArrayFromCons(cons, matchValue);\n        for (let i = array.length - 1; i >= 0; i--) {\n            const patternInput = mapping(array[i], acc);\n            res[i] = patternInput[0];\n            acc = patternInput[1];\n        }\n        return [res, acc];\n    }\n}\nexport function indexed(source) {\n    const len = source.length | 0;\n    const target = new Array(len);\n    for (let i = 0; i <= (len - 1); i++) {\n        target[i] = [i, source[i]];\n    }\n    return target;\n}\nexport function truncate(count, array) {\n    const count_1 = max_1(0, count) | 0;\n    return array.slice(0, (0 + count_1));\n}\nexport function concat(arrays, cons) {\n    const arrays_1 = Array.isArray(arrays) ? arrays : (Array.from(arrays));\n    const matchValue = arrays_1.length | 0;\n    switch (matchValue) {\n        case 0:\n            return Helpers_allocateArrayFromCons(cons, 0);\n        case 1:\n            return arrays_1[0];\n        default: {\n            let totalIdx = 0;\n            let totalLength = 0;\n            for (let idx = 0; idx <= (arrays_1.length - 1); idx++) {\n                const arr_1 = arrays_1[idx];\n                totalLength = ((totalLength + arr_1.length) | 0);\n            }\n            const result = Helpers_allocateArrayFromCons(cons, totalLength);\n            for (let idx_1 = 0; idx_1 <= (arrays_1.length - 1); idx_1++) {\n                const arr_2 = arrays_1[idx_1];\n                for (let j = 0; j <= (arr_2.length - 1); j++) {\n                    result[totalIdx] = arr_2[j];\n                    totalIdx = ((totalIdx + 1) | 0);\n                }\n            }\n            return result;\n        }\n    }\n}\nexport function collect(mapping, array, cons) {\n    return concat(map(mapping, array, defaultOf()), cons);\n}\nexport function where(predicate, array) {\n    return array.filter(predicate);\n}\nexport function indexOf(array, item_1, start, count, eq) {\n    const start_1 = defaultArg(start, 0) | 0;\n    const end$0027 = defaultArg(map_1((c) => (start_1 + c), count), array.length) | 0;\n    const loop = (i_mut) => {\n        loop: while (true) {\n            const i = i_mut;\n            if (i >= end$0027) {\n                return -1;\n            }\n            else if (eq.Equals(item_1, array[i])) {\n                return i | 0;\n            }\n            else {\n                i_mut = (i + 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(start_1) | 0;\n}\nexport function contains(value, array, eq) {\n    return indexOf(array, value, void 0, void 0, eq) >= 0;\n}\nexport function empty(cons) {\n    return Helpers_allocateArrayFromCons(cons, 0);\n}\nexport function singleton(value, cons) {\n    const ar = Helpers_allocateArrayFromCons(cons, 1);\n    ar[0] = value;\n    return ar;\n}\nexport function initialize(count, initializer, cons) {\n    if (count < 0) {\n        throw new Error(\"The input must be non-negative\\\\nParameter name: count\");\n    }\n    const result = Helpers_allocateArrayFromCons(cons, count);\n    for (let i = 0; i <= (count - 1); i++) {\n        result[i] = initializer(i);\n    }\n    return result;\n}\nexport function pairwise(array) {\n    if (array.length < 2) {\n        return [];\n    }\n    else {\n        const count = (array.length - 1) | 0;\n        const result = new Array(count);\n        for (let i = 0; i <= (count - 1); i++) {\n            result[i] = [array[i], array[i + 1]];\n        }\n        return result;\n    }\n}\nexport function replicate(count, initial, cons) {\n    if (count < 0) {\n        throw new Error(\"The input must be non-negative\\\\nParameter name: count\");\n    }\n    const result = Helpers_allocateArrayFromCons(cons, count);\n    for (let i = 0; i <= (result.length - 1); i++) {\n        result[i] = initial;\n    }\n    return result;\n}\nexport function copy(array) {\n    return array.slice();\n}\nexport function copyTo(source, sourceIndex, target, targetIndex, count) {\n    copyToArray(source, sourceIndex, target, targetIndex, count);\n}\nexport function reverse(array) {\n    const array_2 = array.slice();\n    return array_2.reverse();\n}\nexport function scan(folder, state, array, cons) {\n    const res = Helpers_allocateArrayFromCons(cons, array.length + 1);\n    res[0] = state;\n    for (let i = 0; i <= (array.length - 1); i++) {\n        res[i + 1] = folder(res[i], array[i]);\n    }\n    return res;\n}\nexport function scanBack(folder, array, state, cons) {\n    const res = Helpers_allocateArrayFromCons(cons, array.length + 1);\n    res[array.length] = state;\n    for (let i = array.length - 1; i >= 0; i--) {\n        res[i] = folder(array[i], res[i + 1]);\n    }\n    return res;\n}\nexport function skip(count, array, cons) {\n    if (count > array.length) {\n        throw new Error(\"count is greater than array length\\\\nParameter name: count\");\n    }\n    if (count === array.length) {\n        return Helpers_allocateArrayFromCons(cons, 0);\n    }\n    else {\n        const count_1 = ((count < 0) ? 0 : count) | 0;\n        return array.slice(count_1);\n    }\n}\nexport function skipWhile(predicate, array, cons) {\n    let count = 0;\n    while ((count < array.length) && predicate(array[count])) {\n        count = ((count + 1) | 0);\n    }\n    if (count === array.length) {\n        return Helpers_allocateArrayFromCons(cons, 0);\n    }\n    else {\n        const count_1 = count | 0;\n        return array.slice(count_1);\n    }\n}\nexport function take(count, array, cons) {\n    if (count < 0) {\n        throw new Error(\"The input must be non-negative\\\\nParameter name: count\");\n    }\n    if (count > array.length) {\n        throw new Error(\"count is greater than array length\\\\nParameter name: count\");\n    }\n    if (count === 0) {\n        return Helpers_allocateArrayFromCons(cons, 0);\n    }\n    else {\n        return array.slice(0, (0 + count));\n    }\n}\nexport function takeWhile(predicate, array, cons) {\n    let count = 0;\n    while ((count < array.length) && predicate(array[count])) {\n        count = ((count + 1) | 0);\n    }\n    if (count === 0) {\n        return Helpers_allocateArrayFromCons(cons, 0);\n    }\n    else {\n        const count_1 = count | 0;\n        return array.slice(0, (0 + count_1));\n    }\n}\nexport function addInPlace(x, array) {\n    array.push(x);\n}\nexport function addRangeInPlace(range, array) {\n    const enumerator = getEnumerator(range);\n    try {\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            addInPlace(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), array);\n        }\n    }\n    finally {\n        disposeSafe(enumerator);\n    }\n}\nexport function insertRangeInPlace(index, range, array) {\n    let index_1;\n    let i = index;\n    const enumerator = getEnumerator(range);\n    try {\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            const x = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n            (index_1 = (i | 0), array.splice(index_1, 0, x));\n            i = ((i + 1) | 0);\n        }\n    }\n    finally {\n        disposeSafe(enumerator);\n    }\n}\nexport function removeInPlace(item_1, array, eq) {\n    const i = indexOf(array, item_1, void 0, void 0, eq) | 0;\n    if (i > -1) {\n        array.splice(i, 1);\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function removeAllInPlace(predicate, array) {\n    const countRemoveAll = (count) => {\n        const i = (array.findIndex(predicate)) | 0;\n        if (i > -1) {\n            array.splice(i, 1);\n            return (countRemoveAll(count) + 1) | 0;\n        }\n        else {\n            return count | 0;\n        }\n    };\n    return countRemoveAll(0) | 0;\n}\nexport function partition(f, source, cons) {\n    const len = source.length | 0;\n    const res1 = Helpers_allocateArrayFromCons(cons, len);\n    const res2 = Helpers_allocateArrayFromCons(cons, len);\n    let iTrue = 0;\n    let iFalse = 0;\n    for (let i = 0; i <= (len - 1); i++) {\n        if (f(source[i])) {\n            res1[iTrue] = source[i];\n            iTrue = ((iTrue + 1) | 0);\n        }\n        else {\n            res2[iFalse] = source[i];\n            iFalse = ((iFalse + 1) | 0);\n        }\n    }\n    return [truncate(iTrue, res1), truncate(iFalse, res2)];\n}\nexport function find(predicate, array) {\n    const matchValue = array.find(predicate);\n    if (matchValue == null) {\n        return indexNotFound();\n    }\n    else {\n        return value_2(matchValue);\n    }\n}\nexport function tryFind(predicate, array) {\n    return array.find(predicate);\n}\nexport function findIndex(predicate, array) {\n    const matchValue = (array.findIndex(predicate)) | 0;\n    if (matchValue > -1) {\n        return matchValue | 0;\n    }\n    else {\n        indexNotFound();\n        return -1;\n    }\n}\nexport function tryFindIndex(predicate, array) {\n    const matchValue = (array.findIndex(predicate)) | 0;\n    if (matchValue > -1) {\n        return matchValue;\n    }\n    else {\n        return void 0;\n    }\n}\nexport function pick(chooser, array) {\n    const loop = (i_mut) => {\n        loop: while (true) {\n            const i = i_mut;\n            if (i >= array.length) {\n                return indexNotFound();\n            }\n            else {\n                const matchValue = chooser(array[i]);\n                if (matchValue != null) {\n                    return value_2(matchValue);\n                }\n                else {\n                    i_mut = (i + 1);\n                    continue loop;\n                }\n            }\n            break;\n        }\n    };\n    return loop(0);\n}\nexport function tryPick(chooser, array) {\n    const loop = (i_mut) => {\n        loop: while (true) {\n            const i = i_mut;\n            if (i >= array.length) {\n                return void 0;\n            }\n            else {\n                const matchValue = chooser(array[i]);\n                if (matchValue == null) {\n                    i_mut = (i + 1);\n                    continue loop;\n                }\n                else {\n                    return matchValue;\n                }\n            }\n            break;\n        }\n    };\n    return loop(0);\n}\nexport function findBack(predicate, array) {\n    const loop = (i_mut) => {\n        loop: while (true) {\n            const i = i_mut;\n            if (i < 0) {\n                return indexNotFound();\n            }\n            else if (predicate(array[i])) {\n                return array[i];\n            }\n            else {\n                i_mut = (i - 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(array.length - 1);\n}\nexport function tryFindBack(predicate, array) {\n    const loop = (i_mut) => {\n        loop: while (true) {\n            const i = i_mut;\n            if (i < 0) {\n                return void 0;\n            }\n            else if (predicate(array[i])) {\n                return some(array[i]);\n            }\n            else {\n                i_mut = (i - 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(array.length - 1);\n}\nexport function findLastIndex(predicate, array) {\n    const loop = (i_mut) => {\n        loop: while (true) {\n            const i = i_mut;\n            if (i < 0) {\n                return -1;\n            }\n            else if (predicate(array[i])) {\n                return i | 0;\n            }\n            else {\n                i_mut = (i - 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(array.length - 1) | 0;\n}\nexport function findIndexBack(predicate, array) {\n    const loop = (i_mut) => {\n        loop: while (true) {\n            const i = i_mut;\n            if (i < 0) {\n                indexNotFound();\n                return -1;\n            }\n            else if (predicate(array[i])) {\n                return i | 0;\n            }\n            else {\n                i_mut = (i - 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(array.length - 1) | 0;\n}\nexport function tryFindIndexBack(predicate, array) {\n    const loop = (i_mut) => {\n        loop: while (true) {\n            const i = i_mut;\n            if (i < 0) {\n                return void 0;\n            }\n            else if (predicate(array[i])) {\n                return i;\n            }\n            else {\n                i_mut = (i - 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(array.length - 1);\n}\nexport function choose(chooser, array, cons) {\n    const res = [];\n    for (let i = 0; i <= (array.length - 1); i++) {\n        const matchValue = chooser(array[i]);\n        if (matchValue != null) {\n            const y = value_2(matchValue);\n            res.push(y);\n        }\n    }\n    if (equals_1(cons, defaultOf())) {\n        return res;\n    }\n    else {\n        return map((x) => x, res, cons);\n    }\n}\nexport function foldIndexed(folder, state, array) {\n    return array.reduce(((delegateArg, delegateArg_1, delegateArg_2) => folder(delegateArg_2, delegateArg, delegateArg_1)), state);\n}\nexport function fold(folder, state, array) {\n    return array.reduce((folder), state);\n}\nexport function iterate(action, array) {\n    for (let i = 0; i <= (array.length - 1); i++) {\n        action(array[i]);\n    }\n}\nexport function iterateIndexed(action, array) {\n    for (let i = 0; i <= (array.length - 1); i++) {\n        action(i, array[i]);\n    }\n}\nexport function iterate2(action, array1, array2) {\n    if (array1.length !== array2.length) {\n        differentLengths();\n    }\n    for (let i = 0; i <= (array1.length - 1); i++) {\n        action(array1[i], array2[i]);\n    }\n}\nexport function iterateIndexed2(action, array1, array2) {\n    if (array1.length !== array2.length) {\n        differentLengths();\n    }\n    for (let i = 0; i <= (array1.length - 1); i++) {\n        action(i, array1[i], array2[i]);\n    }\n}\nexport function isEmpty(array) {\n    return array.length === 0;\n}\nexport function forAll(predicate, array) {\n    return array.every(predicate);\n}\nexport function permute(f, array) {\n    const size = array.length | 0;\n    const res = array.slice();\n    const checkFlags = new Array(size);\n    iterateIndexed((i, x) => {\n        const j = f(i) | 0;\n        if ((j < 0) ? true : (j >= size)) {\n            throw new Error(\"Not a valid permutation\");\n        }\n        res[j] = x;\n        checkFlags[j] = 1;\n    }, array);\n    if (!(checkFlags.every((y) => (1 === y)))) {\n        throw new Error(\"Not a valid permutation\");\n    }\n    return res;\n}\nexport function setSlice(target, lower, upper, source) {\n    const lower_1 = defaultArg(lower, 0) | 0;\n    const upper_1 = defaultArg(upper, -1) | 0;\n    const length = (((upper_1 >= 0) ? upper_1 : (target.length - 1)) - lower_1) | 0;\n    for (let i = 0; i <= length; i++) {\n        target[i + lower_1] = source[i];\n    }\n}\nexport function sortInPlaceBy(projection, xs, comparer) {\n    xs.sort((x, y) => comparer.Compare(projection(x), projection(y)));\n}\nexport function sortInPlace(xs, comparer) {\n    xs.sort((x, y) => comparer.Compare(x, y));\n}\nexport function sort(xs, comparer) {\n    const xs_1 = xs.slice();\n    xs_1.sort((x, y) => comparer.Compare(x, y));\n    return xs_1;\n}\nexport function sortBy(projection, xs, comparer) {\n    const xs_1 = xs.slice();\n    xs_1.sort((x, y) => comparer.Compare(projection(x), projection(y)));\n    return xs_1;\n}\nexport function sortDescending(xs, comparer) {\n    const xs_1 = xs.slice();\n    xs_1.sort((x, y) => (comparer.Compare(x, y) * -1));\n    return xs_1;\n}\nexport function sortByDescending(projection, xs, comparer) {\n    const xs_1 = xs.slice();\n    xs_1.sort((x, y) => (comparer.Compare(projection(x), projection(y)) * -1));\n    return xs_1;\n}\nexport function sortWith(comparer, xs) {\n    const comparer_1 = comparer;\n    const xs_1 = xs.slice();\n    xs_1.sort(comparer_1);\n    return xs_1;\n}\nexport function allPairs(xs, ys) {\n    const len1 = xs.length | 0;\n    const len2 = ys.length | 0;\n    const res = new Array(len1 * len2);\n    for (let i = 0; i <= (xs.length - 1); i++) {\n        for (let j = 0; j <= (ys.length - 1); j++) {\n            res[(i * len2) + j] = [xs[i], ys[j]];\n        }\n    }\n    return res;\n}\nexport function unfold(generator, state) {\n    const res = [];\n    const loop = (state_1_mut) => {\n        loop: while (true) {\n            const state_1 = state_1_mut;\n            const matchValue = generator(state_1);\n            if (matchValue != null) {\n                const x = value_2(matchValue)[0];\n                const s = value_2(matchValue)[1];\n                res.push(x);\n                state_1_mut = s;\n                continue loop;\n            }\n            break;\n        }\n    };\n    loop(state);\n    return res;\n}\nexport function unzip(array) {\n    const len = array.length | 0;\n    const res1 = new Array(len);\n    const res2 = new Array(len);\n    iterateIndexed((i, tupledArg) => {\n        res1[i] = tupledArg[0];\n        res2[i] = tupledArg[1];\n    }, array);\n    return [res1, res2];\n}\nexport function unzip3(array) {\n    const len = array.length | 0;\n    const res1 = new Array(len);\n    const res2 = new Array(len);\n    const res3 = new Array(len);\n    iterateIndexed((i, tupledArg) => {\n        res1[i] = tupledArg[0];\n        res2[i] = tupledArg[1];\n        res3[i] = tupledArg[2];\n    }, array);\n    return [res1, res2, res3];\n}\nexport function zip(array1, array2) {\n    if (array1.length !== array2.length) {\n        differentLengths();\n    }\n    const result = new Array(array1.length);\n    for (let i = 0; i <= (array1.length - 1); i++) {\n        result[i] = [array1[i], array2[i]];\n    }\n    return result;\n}\nexport function zip3(array1, array2, array3) {\n    if ((array1.length !== array2.length) ? true : (array2.length !== array3.length)) {\n        differentLengths();\n    }\n    const result = new Array(array1.length);\n    for (let i = 0; i <= (array1.length - 1); i++) {\n        result[i] = [array1[i], array2[i], array3[i]];\n    }\n    return result;\n}\nexport function chunkBySize(chunkSize, array) {\n    if (chunkSize < 1) {\n        throw new Error(\"The input must be positive.\\\\nParameter name: size\");\n    }\n    if (array.length === 0) {\n        return [[]];\n    }\n    else {\n        const result = [];\n        for (let x = 0; x <= (~~Math.ceil(array.length / chunkSize) - 1); x++) {\n            let slice;\n            const start_1 = (x * chunkSize) | 0;\n            slice = (array.slice(start_1, (start_1 + chunkSize)));\n            result.push(slice);\n        }\n        return result;\n    }\n}\nexport function splitAt(index, array) {\n    if ((index < 0) ? true : (index > array.length)) {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n    }\n    return [array.slice(0, (0 + index)), array.slice(index)];\n}\nexport function compareWith(comparer, source1, source2) {\n    if (source1 == null) {\n        if (source2 == null) {\n            return 0;\n        }\n        else {\n            return -1;\n        }\n    }\n    else if (source2 == null) {\n        return 1;\n    }\n    else {\n        const len1 = source1.length | 0;\n        const len2 = source2.length | 0;\n        const len = ((len1 < len2) ? len1 : len2) | 0;\n        let i = 0;\n        let res = 0;\n        while ((res === 0) && (i < len)) {\n            res = (comparer(source1[i], source2[i]) | 0);\n            i = ((i + 1) | 0);\n        }\n        if (res !== 0) {\n            return res | 0;\n        }\n        else if (len1 > len2) {\n            return 1;\n        }\n        else if (len1 < len2) {\n            return -1;\n        }\n        else {\n            return 0;\n        }\n    }\n}\nexport function compareTo(comparer, source1, source2) {\n    if (source1 == null) {\n        if (source2 == null) {\n            return 0;\n        }\n        else {\n            return -1;\n        }\n    }\n    else if (source2 == null) {\n        return 1;\n    }\n    else {\n        const len1 = source1.length | 0;\n        const len2 = source2.length | 0;\n        if (len1 > len2) {\n            return 1;\n        }\n        else if (len1 < len2) {\n            return -1;\n        }\n        else {\n            let i = 0;\n            let res = 0;\n            while ((res === 0) && (i < len1)) {\n                res = (comparer(source1[i], source2[i]) | 0);\n                i = ((i + 1) | 0);\n            }\n            return res | 0;\n        }\n    }\n}\nexport function equalsWith(equals, array1, array2) {\n    if (array1 == null) {\n        if (array2 == null) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    else if (array2 == null) {\n        return false;\n    }\n    else {\n        let i = 0;\n        let result = true;\n        const length1 = array1.length | 0;\n        const length2 = array2.length | 0;\n        if (length1 > length2) {\n            return false;\n        }\n        else if (length1 < length2) {\n            return false;\n        }\n        else {\n            while ((i < length1) && result) {\n                result = equals(array1[i], array2[i]);\n                i = ((i + 1) | 0);\n            }\n            return result;\n        }\n    }\n}\nexport function exactlyOne(array) {\n    switch (array.length) {\n        case 1:\n            return array[0];\n        case 0:\n            throw new Error(\"The input sequence was empty\\\\nParameter name: array\");\n        default:\n            throw new Error(\"Input array too long\\\\nParameter name: array\");\n    }\n}\nexport function tryExactlyOne(array) {\n    if (array.length === 1) {\n        return some(array[0]);\n    }\n    else {\n        return void 0;\n    }\n}\nexport function head(array) {\n    if (array.length === 0) {\n        throw new Error(\"The input array was empty\\\\nParameter name: array\");\n    }\n    else {\n        return array[0];\n    }\n}\nexport function tryHead(array) {\n    if (array.length === 0) {\n        return void 0;\n    }\n    else {\n        return some(array[0]);\n    }\n}\nexport function tail(array) {\n    if (array.length === 0) {\n        throw new Error(\"Not enough elements\\\\nParameter name: array\");\n    }\n    return array.slice(1);\n}\nexport function item(index, array) {\n    return array[index];\n}\nexport function tryItem(index, array) {\n    if ((index < 0) ? true : (index >= array.length)) {\n        return void 0;\n    }\n    else {\n        return some(array[index]);\n    }\n}\nexport function foldBackIndexed(folder, array, state) {\n    return array.reduceRight(((delegateArg, delegateArg_1, delegateArg_2) => folder(delegateArg_2, delegateArg_1, delegateArg)), state);\n}\nexport function foldBack(folder, array, state) {\n    return array.reduceRight(((delegateArg, delegateArg_1) => folder(delegateArg_1, delegateArg)), state);\n}\nexport function foldIndexed2(folder, state, array1, array2) {\n    let acc = state;\n    if (array1.length !== array2.length) {\n        throw new Error(\"Arrays have different lengths\");\n    }\n    for (let i = 0; i <= (array1.length - 1); i++) {\n        acc = folder(i, acc, array1[i], array2[i]);\n    }\n    return acc;\n}\nexport function fold2(folder, state, array1, array2) {\n    return foldIndexed2((_arg, acc, x, y) => folder(acc, x, y), state, array1, array2);\n}\nexport function foldBackIndexed2(folder, array1, array2, state) {\n    let acc = state;\n    if (array1.length !== array2.length) {\n        differentLengths();\n    }\n    const size = array1.length | 0;\n    for (let i = 1; i <= size; i++) {\n        acc = folder(i - 1, array1[size - i], array2[size - i], acc);\n    }\n    return acc;\n}\nexport function foldBack2(f, array1, array2, state) {\n    return foldBackIndexed2((_arg, x, y, acc) => f(x, y, acc), array1, array2, state);\n}\nexport function reduce(reduction, array) {\n    if (array.length === 0) {\n        throw new Error(\"The input array was empty\");\n    }\n    const reduction_1 = reduction;\n    return array.reduce(reduction_1);\n}\nexport function reduceBack(reduction, array) {\n    if (array.length === 0) {\n        throw new Error(\"The input array was empty\");\n    }\n    const reduction_1 = reduction;\n    return array.reduceRight(reduction_1);\n}\nexport function forAll2(predicate, array1, array2) {\n    return fold2((acc, x, y) => (acc && predicate(x, y)), true, array1, array2);\n}\nexport function existsOffset(predicate_mut, array_mut, index_mut) {\n    existsOffset: while (true) {\n        const predicate = predicate_mut, array = array_mut, index = index_mut;\n        if (index === array.length) {\n            return false;\n        }\n        else if (predicate(array[index])) {\n            return true;\n        }\n        else {\n            predicate_mut = predicate;\n            array_mut = array;\n            index_mut = (index + 1);\n            continue existsOffset;\n        }\n        break;\n    }\n}\nexport function exists(predicate, array) {\n    return existsOffset(predicate, array, 0);\n}\nexport function existsOffset2(predicate_mut, array1_mut, array2_mut, index_mut) {\n    existsOffset2: while (true) {\n        const predicate = predicate_mut, array1 = array1_mut, array2 = array2_mut, index = index_mut;\n        if (index === array1.length) {\n            return false;\n        }\n        else if (predicate(array1[index], array2[index])) {\n            return true;\n        }\n        else {\n            predicate_mut = predicate;\n            array1_mut = array1;\n            array2_mut = array2;\n            index_mut = (index + 1);\n            continue existsOffset2;\n        }\n        break;\n    }\n}\nexport function exists2(predicate, array1, array2) {\n    if (array1.length !== array2.length) {\n        differentLengths();\n    }\n    return existsOffset2(predicate, array1, array2, 0);\n}\nexport function sum(array, adder) {\n    let acc = adder.GetZero();\n    for (let i = 0; i <= (array.length - 1); i++) {\n        acc = adder.Add(acc, array[i]);\n    }\n    return acc;\n}\nexport function sumBy(projection, array, adder) {\n    let acc = adder.GetZero();\n    for (let i = 0; i <= (array.length - 1); i++) {\n        acc = adder.Add(acc, projection(array[i]));\n    }\n    return acc;\n}\nexport function maxBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\n}\nexport function max(xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\n}\nexport function minBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\n}\nexport function min(xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\n}\nexport function average(array, averager) {\n    if (array.length === 0) {\n        throw new Error(\"The input array was empty\\\\nParameter name: array\");\n    }\n    let total = averager.GetZero();\n    for (let i = 0; i <= (array.length - 1); i++) {\n        total = averager.Add(total, array[i]);\n    }\n    return averager.DivideByInt(total, array.length);\n}\nexport function averageBy(projection, array, averager) {\n    if (array.length === 0) {\n        throw new Error(\"The input array was empty\\\\nParameter name: array\");\n    }\n    let total = averager.GetZero();\n    for (let i = 0; i <= (array.length - 1); i++) {\n        total = averager.Add(total, projection(array[i]));\n    }\n    return averager.DivideByInt(total, array.length);\n}\nexport function windowed(windowSize, source) {\n    if (windowSize <= 0) {\n        throw new Error(\"windowSize must be positive\");\n    }\n    let res;\n    const len = max_1(0, (source.length - windowSize) + 1) | 0;\n    res = (new Array(len));\n    for (let i = windowSize; i <= source.length; i++) {\n        res[i - windowSize] = source.slice(i - windowSize, (i - 1) + 1);\n    }\n    return res;\n}\nexport function splitInto(chunks, array) {\n    if (chunks < 1) {\n        throw new Error(\"The input must be positive.\\\\nParameter name: chunks\");\n    }\n    if (array.length === 0) {\n        return [[]];\n    }\n    else {\n        const result = [];\n        const chunks_1 = min_1(chunks, array.length) | 0;\n        const minChunkSize = ~~(array.length / chunks_1) | 0;\n        const chunksWithExtraItem = (array.length % chunks_1) | 0;\n        for (let i = 0; i <= (chunks_1 - 1); i++) {\n            const chunkSize = ((i < chunksWithExtraItem) ? (minChunkSize + 1) : minChunkSize) | 0;\n            let slice;\n            const start_1 = ((i * minChunkSize) + min_1(chunksWithExtraItem, i)) | 0;\n            slice = (array.slice(start_1, (start_1 + chunkSize)));\n            result.push(slice);\n        }\n        return result;\n    }\n}\nexport function transpose(arrays, cons) {\n    const arrays_1 = Array.isArray(arrays) ? arrays : (Array.from(arrays));\n    const len = arrays_1.length | 0;\n    if (len === 0) {\n        return new Array(0);\n    }\n    else {\n        const firstArray = arrays_1[0];\n        const lenInner = firstArray.length | 0;\n        if (!forAll((a) => (a.length === lenInner), arrays_1)) {\n            differentLengths();\n        }\n        const result = new Array(lenInner);\n        for (let i = 0; i <= (lenInner - 1); i++) {\n            result[i] = Helpers_allocateArrayFromCons(cons, len);\n            for (let j = 0; j <= (len - 1); j++) {\n                result[i][j] = arrays_1[j][i];\n            }\n        }\n        return result;\n    }\n}\nexport function insertAt(index, y, xs, cons) {\n    const len = xs.length | 0;\n    if ((index < 0) ? true : (index > len)) {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n    }\n    const target = Helpers_allocateArrayFromCons(cons, len + 1);\n    for (let i = 0; i <= (index - 1); i++) {\n        target[i] = xs[i];\n    }\n    target[index] = y;\n    for (let i_1 = index; i_1 <= (len - 1); i_1++) {\n        target[i_1 + 1] = xs[i_1];\n    }\n    return target;\n}\nexport function insertManyAt(index, ys, xs, cons) {\n    const len = xs.length | 0;\n    if ((index < 0) ? true : (index > len)) {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n    }\n    const ys_1 = Array.from(ys);\n    const len2 = ys_1.length | 0;\n    const target = Helpers_allocateArrayFromCons(cons, len + len2);\n    for (let i = 0; i <= (index - 1); i++) {\n        target[i] = xs[i];\n    }\n    for (let i_1 = 0; i_1 <= (len2 - 1); i_1++) {\n        target[index + i_1] = ys_1[i_1];\n    }\n    for (let i_2 = index; i_2 <= (len - 1); i_2++) {\n        target[i_2 + len2] = xs[i_2];\n    }\n    return target;\n}\nexport function removeAt(index, xs) {\n    if ((index < 0) ? true : (index >= xs.length)) {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n    }\n    let i = -1;\n    return filter((_arg) => {\n        i = ((i + 1) | 0);\n        return i !== index;\n    }, xs);\n}\nexport function removeManyAt(index, count, xs) {\n    let i = -1;\n    let status = -1;\n    const ys = filter((_arg) => {\n        i = ((i + 1) | 0);\n        if (i === index) {\n            status = 0;\n            return false;\n        }\n        else if (i > index) {\n            if (i < (index + count)) {\n                return false;\n            }\n            else {\n                status = 1;\n                return true;\n            }\n        }\n        else {\n            return true;\n        }\n    }, xs);\n    const status_1 = (((status === 0) && ((i + 1) === (index + count))) ? 1 : status) | 0;\n    if (status_1 < 1) {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + ((status_1 < 0) ? \"index\" : \"count\"));\n    }\n    return ys;\n}\nexport function updateAt(index, y, xs, cons) {\n    const len = xs.length | 0;\n    if ((index < 0) ? true : (index >= len)) {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n    }\n    const target = Helpers_allocateArrayFromCons(cons, len);\n    for (let i = 0; i <= (len - 1); i++) {\n        target[i] = ((i === index) ? y : xs[i]);\n    }\n    return target;\n}\n","import { join } from \"./String.js\";\nimport { defaultArg, some, value as value_1 } from \"./Option.js\";\nimport { disposeSafe, isArrayLike, defaultOf, toIterator, getEnumerator, compare, structuralHash, equals } from \"./Util.js\";\nimport { Record } from \"./Types.js\";\nimport { class_type, record_type, option_type } from \"./Reflection.js\";\nimport { SR_inputSequenceTooLong, SR_inputSequenceEmpty, SR_inputMustBeNonNegative, SR_notEnoughElements, SR_differentLengths, SR_keyNotFoundAlt, SR_indexOutOfBounds, SR_inputWasEmpty } from \"./Global.js\";\nimport { transpose as transpose_1, splitInto as splitInto_1, windowed as windowed_1, pairwise as pairwise_1, chunkBySize as chunkBySize_1, map as map_1, permute as permute_1, tryFindIndexBack as tryFindIndexBack_1, tryFindBack as tryFindBack_1, scanBack as scanBack_1, foldBack2 as foldBack2_1, foldBack as foldBack_1, fill } from \"./Array.js\";\nexport class FSharpList extends Record {\n    constructor(head, tail) {\n        super();\n        this.head = head;\n        this.tail = tail;\n    }\n    toString() {\n        const xs = this;\n        return (\"[\" + join(\"; \", xs)) + \"]\";\n    }\n    Equals(other) {\n        const xs = this;\n        if (xs === other) {\n            return true;\n        }\n        else {\n            const loop = (xs_1_mut, ys_1_mut) => {\n                loop: while (true) {\n                    const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\n                    const matchValue = xs_1.tail;\n                    const matchValue_1 = ys_1.tail;\n                    if (matchValue != null) {\n                        if (matchValue_1 != null) {\n                            const xt = value_1(matchValue);\n                            const yt = value_1(matchValue_1);\n                            if (equals(xs_1.head, ys_1.head)) {\n                                xs_1_mut = xt;\n                                ys_1_mut = yt;\n                                continue loop;\n                            }\n                            else {\n                                return false;\n                            }\n                        }\n                        else {\n                            return false;\n                        }\n                    }\n                    else if (matchValue_1 != null) {\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                    break;\n                }\n            };\n            return loop(xs, other);\n        }\n    }\n    GetHashCode() {\n        const xs = this;\n        const loop = (i_mut, h_mut, xs_1_mut) => {\n            loop: while (true) {\n                const i = i_mut, h = h_mut, xs_1 = xs_1_mut;\n                const matchValue = xs_1.tail;\n                if (matchValue != null) {\n                    const t = value_1(matchValue);\n                    if (i > 18) {\n                        return h | 0;\n                    }\n                    else {\n                        i_mut = (i + 1);\n                        h_mut = (((h << 1) + structuralHash(xs_1.head)) + (631 * i));\n                        xs_1_mut = t;\n                        continue loop;\n                    }\n                }\n                else {\n                    return h | 0;\n                }\n                break;\n            }\n        };\n        return loop(0, 0, xs) | 0;\n    }\n    toJSON() {\n        const this$ = this;\n        return Array.from(this$);\n    }\n    CompareTo(other) {\n        const xs = this;\n        const loop = (xs_1_mut, ys_1_mut) => {\n            loop: while (true) {\n                const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\n                const matchValue = xs_1.tail;\n                const matchValue_1 = ys_1.tail;\n                if (matchValue != null) {\n                    if (matchValue_1 != null) {\n                        const xt = value_1(matchValue);\n                        const yt = value_1(matchValue_1);\n                        const c = compare(xs_1.head, ys_1.head) | 0;\n                        if (c === 0) {\n                            xs_1_mut = xt;\n                            ys_1_mut = yt;\n                            continue loop;\n                        }\n                        else {\n                            return c | 0;\n                        }\n                    }\n                    else {\n                        return 1;\n                    }\n                }\n                else if (matchValue_1 != null) {\n                    return -1;\n                }\n                else {\n                    return 0;\n                }\n                break;\n            }\n        };\n        return loop(xs, other) | 0;\n    }\n    GetEnumerator() {\n        const xs = this;\n        return ListEnumerator$1_$ctor_3002E699(xs);\n    }\n    [Symbol.iterator]() {\n        return toIterator(getEnumerator(this));\n    }\n    \"System.Collections.IEnumerable.GetEnumerator\"() {\n        const xs = this;\n        return getEnumerator(xs);\n    }\n}\nexport function FSharpList_$reflection(gen0) {\n    return record_type(\"ListModule.FSharpList\", [gen0], FSharpList, () => [[\"head\", gen0], [\"tail\", option_type(FSharpList_$reflection(gen0))]]);\n}\nexport class ListEnumerator$1 {\n    constructor(xs) {\n        this.xs = xs;\n        this.it = this.xs;\n        this.current = defaultOf();\n    }\n    \"System.Collections.Generic.IEnumerator`1.get_Current\"() {\n        const _ = this;\n        return _.current;\n    }\n    \"System.Collections.IEnumerator.get_Current\"() {\n        const _ = this;\n        return _.current;\n    }\n    \"System.Collections.IEnumerator.MoveNext\"() {\n        const _ = this;\n        const matchValue = _.it.tail;\n        if (matchValue != null) {\n            const t = value_1(matchValue);\n            _.current = _.it.head;\n            _.it = t;\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    \"System.Collections.IEnumerator.Reset\"() {\n        const _ = this;\n        _.it = _.xs;\n        _.current = defaultOf();\n    }\n    Dispose() {\n    }\n}\nexport function ListEnumerator$1_$reflection(gen0) {\n    return class_type(\"ListModule.ListEnumerator`1\", [gen0], ListEnumerator$1);\n}\nexport function ListEnumerator$1_$ctor_3002E699(xs) {\n    return new ListEnumerator$1(xs);\n}\nexport function FSharpList_get_Empty() {\n    return new FSharpList(defaultOf(), void 0);\n}\nexport function FSharpList_Cons_305B8EAC(x, xs) {\n    return new FSharpList(x, xs);\n}\nexport function FSharpList__get_IsEmpty(xs) {\n    return xs.tail == null;\n}\nexport function FSharpList__get_Length(xs) {\n    const loop = (i_mut, xs_1_mut) => {\n        loop: while (true) {\n            const i = i_mut, xs_1 = xs_1_mut;\n            const matchValue = xs_1.tail;\n            if (matchValue != null) {\n                i_mut = (i + 1);\n                xs_1_mut = value_1(matchValue);\n                continue loop;\n            }\n            else {\n                return i | 0;\n            }\n            break;\n        }\n    };\n    return loop(0, xs) | 0;\n}\nexport function FSharpList__get_Head(xs) {\n    const matchValue = xs.tail;\n    if (matchValue != null) {\n        return xs.head;\n    }\n    else {\n        throw new Error((SR_inputWasEmpty + \"\\\\nParameter name: \") + \"list\");\n    }\n}\nexport function FSharpList__get_Tail(xs) {\n    const matchValue = xs.tail;\n    if (matchValue != null) {\n        return value_1(matchValue);\n    }\n    else {\n        throw new Error((SR_inputWasEmpty + \"\\\\nParameter name: \") + \"list\");\n    }\n}\nexport function FSharpList__get_Item_Z524259A4(xs, index) {\n    const loop = (i_mut, xs_1_mut) => {\n        loop: while (true) {\n            const i = i_mut, xs_1 = xs_1_mut;\n            const matchValue = xs_1.tail;\n            if (matchValue != null) {\n                if (i === index) {\n                    return xs_1.head;\n                }\n                else {\n                    i_mut = (i + 1);\n                    xs_1_mut = value_1(matchValue);\n                    continue loop;\n                }\n            }\n            else {\n                throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n            }\n            break;\n        }\n    };\n    return loop(0, xs);\n}\nexport function indexNotFound() {\n    throw new Error(SR_keyNotFoundAlt);\n}\nexport function empty() {\n    return FSharpList_get_Empty();\n}\nexport function cons(x, xs) {\n    return FSharpList_Cons_305B8EAC(x, xs);\n}\nexport function singleton(x) {\n    return FSharpList_Cons_305B8EAC(x, FSharpList_get_Empty());\n}\nexport function isEmpty(xs) {\n    return FSharpList__get_IsEmpty(xs);\n}\nexport function length(xs) {\n    return FSharpList__get_Length(xs);\n}\nexport function head(xs) {\n    return FSharpList__get_Head(xs);\n}\nexport function tryHead(xs) {\n    if (FSharpList__get_IsEmpty(xs)) {\n        return void 0;\n    }\n    else {\n        return some(FSharpList__get_Head(xs));\n    }\n}\nexport function tail(xs) {\n    return FSharpList__get_Tail(xs);\n}\nexport function tryLast(xs_mut) {\n    tryLast: while (true) {\n        const xs = xs_mut;\n        if (FSharpList__get_IsEmpty(xs)) {\n            return void 0;\n        }\n        else {\n            const t = FSharpList__get_Tail(xs);\n            if (FSharpList__get_IsEmpty(t)) {\n                return some(FSharpList__get_Head(xs));\n            }\n            else {\n                xs_mut = t;\n                continue tryLast;\n            }\n        }\n        break;\n    }\n}\nexport function last(xs) {\n    const matchValue = tryLast(xs);\n    if (matchValue == null) {\n        throw new Error(SR_inputWasEmpty);\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\nexport function compareWith(comparer, xs, ys) {\n    const loop = (xs_1_mut, ys_1_mut) => {\n        loop: while (true) {\n            const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\n            const matchValue = FSharpList__get_IsEmpty(xs_1);\n            const matchValue_1 = FSharpList__get_IsEmpty(ys_1);\n            if (matchValue) {\n                if (matchValue_1) {\n                    return 0;\n                }\n                else {\n                    return -1;\n                }\n            }\n            else if (matchValue_1) {\n                return 1;\n            }\n            else {\n                const c = comparer(FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1)) | 0;\n                if (c === 0) {\n                    xs_1_mut = FSharpList__get_Tail(xs_1);\n                    ys_1_mut = FSharpList__get_Tail(ys_1);\n                    continue loop;\n                }\n                else {\n                    return c | 0;\n                }\n            }\n            break;\n        }\n    };\n    return loop(xs, ys) | 0;\n}\nexport function toArray(xs) {\n    const len = FSharpList__get_Length(xs) | 0;\n    const res = fill(new Array(len), 0, len, null);\n    const loop = (i_mut, xs_1_mut) => {\n        loop: while (true) {\n            const i = i_mut, xs_1 = xs_1_mut;\n            if (!FSharpList__get_IsEmpty(xs_1)) {\n                res[i] = FSharpList__get_Head(xs_1);\n                i_mut = (i + 1);\n                xs_1_mut = FSharpList__get_Tail(xs_1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    loop(0, xs);\n    return res;\n}\nexport function fold(folder, state, xs) {\n    let acc = state;\n    let xs_1 = xs;\n    while (!FSharpList__get_IsEmpty(xs_1)) {\n        acc = folder(acc, head(xs_1));\n        xs_1 = FSharpList__get_Tail(xs_1);\n    }\n    return acc;\n}\nexport function reverse(xs) {\n    return fold((acc, x) => FSharpList_Cons_305B8EAC(x, acc), FSharpList_get_Empty(), xs);\n}\nexport function foldBack(folder, xs, state) {\n    return foldBack_1(folder, toArray(xs), state);\n}\nexport function foldIndexed(folder, state, xs) {\n    const loop = (i_mut, acc_mut, xs_1_mut) => {\n        loop: while (true) {\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;\n            if (FSharpList__get_IsEmpty(xs_1)) {\n                return acc;\n            }\n            else {\n                i_mut = (i + 1);\n                acc_mut = folder(i, acc, FSharpList__get_Head(xs_1));\n                xs_1_mut = FSharpList__get_Tail(xs_1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(0, state, xs);\n}\nexport function fold2(folder, state, xs, ys) {\n    let acc = state;\n    let xs_1 = xs;\n    let ys_1 = ys;\n    while (!FSharpList__get_IsEmpty(xs_1) && !FSharpList__get_IsEmpty(ys_1)) {\n        acc = folder(acc, FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1));\n        xs_1 = FSharpList__get_Tail(xs_1);\n        ys_1 = FSharpList__get_Tail(ys_1);\n    }\n    return acc;\n}\nexport function foldBack2(folder, xs, ys, state) {\n    return foldBack2_1(folder, toArray(xs), toArray(ys), state);\n}\nexport function unfold(gen, state) {\n    const loop = (acc_mut, node_mut) => {\n        let t;\n        loop: while (true) {\n            const acc = acc_mut, node = node_mut;\n            const matchValue = gen(acc);\n            if (matchValue != null) {\n                acc_mut = value_1(matchValue)[1];\n                node_mut = ((t = (new FSharpList(value_1(matchValue)[0], void 0)), (node.tail = t, t)));\n                continue loop;\n            }\n            else {\n                return node;\n            }\n            break;\n        }\n    };\n    const root = FSharpList_get_Empty();\n    const node_1 = loop(state, root);\n    const t_2 = FSharpList_get_Empty();\n    node_1.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\nexport function iterate(action, xs) {\n    fold((unitVar, x) => {\n        action(x);\n    }, void 0, xs);\n}\nexport function iterate2(action, xs, ys) {\n    fold2((unitVar, x, y) => {\n        action(x, y);\n    }, void 0, xs, ys);\n}\nexport function iterateIndexed(action, xs) {\n    fold((i, x) => {\n        action(i, x);\n        return (i + 1) | 0;\n    }, 0, xs);\n}\nexport function iterateIndexed2(action, xs, ys) {\n    fold2((i, x, y) => {\n        action(i, x, y);\n        return (i + 1) | 0;\n    }, 0, xs, ys);\n}\nexport function toSeq(xs) {\n    return xs;\n}\nexport function ofArrayWithTail(xs, tail_1) {\n    let res = tail_1;\n    for (let i = xs.length - 1; i >= 0; i--) {\n        res = FSharpList_Cons_305B8EAC(xs[i], res);\n    }\n    return res;\n}\nexport function ofArray(xs) {\n    return ofArrayWithTail(xs, FSharpList_get_Empty());\n}\nexport function ofSeq(xs) {\n    let xs_3, t;\n    if (isArrayLike(xs)) {\n        return ofArray(xs);\n    }\n    else if (xs instanceof FSharpList) {\n        return xs;\n    }\n    else {\n        const root = FSharpList_get_Empty();\n        let node = root;\n        const enumerator = getEnumerator(xs);\n        try {\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                const x = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                node = ((xs_3 = node, (t = (new FSharpList(x, void 0)), (xs_3.tail = t, t))));\n            }\n        }\n        finally {\n            disposeSafe(enumerator);\n        }\n        const xs_5 = node;\n        const t_2 = FSharpList_get_Empty();\n        xs_5.tail = t_2;\n        return FSharpList__get_Tail(root);\n    }\n}\nexport function concat(lists) {\n    const root = FSharpList_get_Empty();\n    let node = root;\n    const action = (xs) => {\n        node = fold((acc, x) => {\n            const t = new FSharpList(x, void 0);\n            acc.tail = t;\n            return t;\n        }, node, xs);\n    };\n    if (isArrayLike(lists)) {\n        const xs_3 = lists;\n        xs_3.forEach(action);\n    }\n    else if (lists instanceof FSharpList) {\n        iterate(action, lists);\n    }\n    else {\n        const enumerator = getEnumerator(lists);\n        try {\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                action(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n            }\n        }\n        finally {\n            disposeSafe(enumerator);\n        }\n    }\n    const xs_6 = node;\n    const t_2 = FSharpList_get_Empty();\n    xs_6.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\nexport function scan(folder, state, xs) {\n    let xs_4, t_2;\n    const root = FSharpList_get_Empty();\n    let node;\n    const t = new FSharpList(state, void 0);\n    root.tail = t;\n    node = t;\n    let acc = state;\n    let xs_3 = xs;\n    while (!FSharpList__get_IsEmpty(xs_3)) {\n        acc = folder(acc, FSharpList__get_Head(xs_3));\n        node = ((xs_4 = node, (t_2 = (new FSharpList(acc, void 0)), (xs_4.tail = t_2, t_2))));\n        xs_3 = FSharpList__get_Tail(xs_3);\n    }\n    const xs_6 = node;\n    const t_4 = FSharpList_get_Empty();\n    xs_6.tail = t_4;\n    return FSharpList__get_Tail(root);\n}\nexport function scanBack(folder, xs, state) {\n    return ofArray(scanBack_1(folder, toArray(xs), state));\n}\nexport function append(xs, ys) {\n    return fold((acc, x) => FSharpList_Cons_305B8EAC(x, acc), ys, reverse(xs));\n}\nexport function collect(mapping, xs) {\n    let xs_1, t;\n    const root = FSharpList_get_Empty();\n    let node = root;\n    let ys = xs;\n    while (!FSharpList__get_IsEmpty(ys)) {\n        let zs = mapping(FSharpList__get_Head(ys));\n        while (!FSharpList__get_IsEmpty(zs)) {\n            node = ((xs_1 = node, (t = (new FSharpList(FSharpList__get_Head(zs), void 0)), (xs_1.tail = t, t))));\n            zs = FSharpList__get_Tail(zs);\n        }\n        ys = FSharpList__get_Tail(ys);\n    }\n    const xs_3 = node;\n    const t_2 = FSharpList_get_Empty();\n    xs_3.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\nexport function mapIndexed(mapping, xs) {\n    const root = FSharpList_get_Empty();\n    const node = foldIndexed((i, acc, x) => {\n        const t = new FSharpList(mapping(i, x), void 0);\n        acc.tail = t;\n        return t;\n    }, root, xs);\n    const t_2 = FSharpList_get_Empty();\n    node.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\nexport function map(mapping, xs) {\n    const root = FSharpList_get_Empty();\n    const node = fold((acc, x) => {\n        const t = new FSharpList(mapping(x), void 0);\n        acc.tail = t;\n        return t;\n    }, root, xs);\n    const t_2 = FSharpList_get_Empty();\n    node.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\nexport function indexed(xs) {\n    return mapIndexed((i, x) => [i, x], xs);\n}\nexport function map2(mapping, xs, ys) {\n    const root = FSharpList_get_Empty();\n    const node = fold2((acc, x, y) => {\n        const t = new FSharpList(mapping(x, y), void 0);\n        acc.tail = t;\n        return t;\n    }, root, xs, ys);\n    const t_2 = FSharpList_get_Empty();\n    node.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\nexport function mapIndexed2(mapping, xs, ys) {\n    const loop = (i_mut, acc_mut, xs_1_mut, ys_1_mut) => {\n        let t;\n        loop: while (true) {\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut, ys_1 = ys_1_mut;\n            if (FSharpList__get_IsEmpty(xs_1) ? true : FSharpList__get_IsEmpty(ys_1)) {\n                return acc;\n            }\n            else {\n                i_mut = (i + 1);\n                acc_mut = ((t = (new FSharpList(mapping(i, FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1)), void 0)), (acc.tail = t, t)));\n                xs_1_mut = FSharpList__get_Tail(xs_1);\n                ys_1_mut = FSharpList__get_Tail(ys_1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    const root = FSharpList_get_Empty();\n    const node_1 = loop(0, root, xs, ys);\n    const t_2 = FSharpList_get_Empty();\n    node_1.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\nexport function map3(mapping, xs, ys, zs) {\n    const loop = (acc_mut, xs_1_mut, ys_1_mut, zs_1_mut) => {\n        let t;\n        loop: while (true) {\n            const acc = acc_mut, xs_1 = xs_1_mut, ys_1 = ys_1_mut, zs_1 = zs_1_mut;\n            if ((FSharpList__get_IsEmpty(xs_1) ? true : FSharpList__get_IsEmpty(ys_1)) ? true : FSharpList__get_IsEmpty(zs_1)) {\n                return acc;\n            }\n            else {\n                acc_mut = ((t = (new FSharpList(mapping(FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1), FSharpList__get_Head(zs_1)), void 0)), (acc.tail = t, t)));\n                xs_1_mut = FSharpList__get_Tail(xs_1);\n                ys_1_mut = FSharpList__get_Tail(ys_1);\n                zs_1_mut = FSharpList__get_Tail(zs_1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    const root = FSharpList_get_Empty();\n    const node_1 = loop(root, xs, ys, zs);\n    const t_2 = FSharpList_get_Empty();\n    node_1.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\nexport function mapFold(mapping, state, xs) {\n    const root = FSharpList_get_Empty();\n    const patternInput_1 = fold((tupledArg, x) => {\n        let t;\n        const patternInput = mapping(tupledArg[1], x);\n        return [(t = (new FSharpList(patternInput[0], void 0)), (tupledArg[0].tail = t, t)), patternInput[1]];\n    }, [root, state], xs);\n    const t_2 = FSharpList_get_Empty();\n    patternInput_1[0].tail = t_2;\n    return [FSharpList__get_Tail(root), patternInput_1[1]];\n}\nexport function mapFoldBack(mapping, xs, state) {\n    return mapFold((acc, x) => mapping(x, acc), state, reverse(xs));\n}\nexport function tryPick(f, xs) {\n    const loop = (xs_1_mut) => {\n        loop: while (true) {\n            const xs_1 = xs_1_mut;\n            if (FSharpList__get_IsEmpty(xs_1)) {\n                return void 0;\n            }\n            else {\n                const matchValue = f(FSharpList__get_Head(xs_1));\n                if (matchValue == null) {\n                    xs_1_mut = FSharpList__get_Tail(xs_1);\n                    continue loop;\n                }\n                else {\n                    return matchValue;\n                }\n            }\n            break;\n        }\n    };\n    return loop(xs);\n}\nexport function pick(f, xs) {\n    const matchValue = tryPick(f, xs);\n    if (matchValue == null) {\n        return indexNotFound();\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\nexport function tryFind(f, xs) {\n    return tryPick((x) => (f(x) ? some(x) : void 0), xs);\n}\nexport function find(f, xs) {\n    const matchValue = tryFind(f, xs);\n    if (matchValue == null) {\n        return indexNotFound();\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\nexport function tryFindBack(f, xs) {\n    return tryFindBack_1(f, toArray(xs));\n}\nexport function findBack(f, xs) {\n    const matchValue = tryFindBack(f, xs);\n    if (matchValue == null) {\n        return indexNotFound();\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\nexport function tryFindIndex(f, xs) {\n    const loop = (i_mut, xs_1_mut) => {\n        loop: while (true) {\n            const i = i_mut, xs_1 = xs_1_mut;\n            if (FSharpList__get_IsEmpty(xs_1)) {\n                return void 0;\n            }\n            else if (f(FSharpList__get_Head(xs_1))) {\n                return i;\n            }\n            else {\n                i_mut = (i + 1);\n                xs_1_mut = FSharpList__get_Tail(xs_1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(0, xs);\n}\nexport function findIndex(f, xs) {\n    const matchValue = tryFindIndex(f, xs);\n    if (matchValue == null) {\n        indexNotFound();\n        return -1;\n    }\n    else {\n        return value_1(matchValue) | 0;\n    }\n}\nexport function tryFindIndexBack(f, xs) {\n    return tryFindIndexBack_1(f, toArray(xs));\n}\nexport function findIndexBack(f, xs) {\n    const matchValue = tryFindIndexBack(f, xs);\n    if (matchValue == null) {\n        indexNotFound();\n        return -1;\n    }\n    else {\n        return value_1(matchValue) | 0;\n    }\n}\nexport function tryItem(n, xs) {\n    const loop = (i_mut, xs_1_mut) => {\n        loop: while (true) {\n            const i = i_mut, xs_1 = xs_1_mut;\n            if (FSharpList__get_IsEmpty(xs_1)) {\n                return void 0;\n            }\n            else if (i === n) {\n                return some(FSharpList__get_Head(xs_1));\n            }\n            else {\n                i_mut = (i + 1);\n                xs_1_mut = FSharpList__get_Tail(xs_1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(0, xs);\n}\nexport function item(n, xs) {\n    return FSharpList__get_Item_Z524259A4(xs, n);\n}\nexport function filter(f, xs) {\n    const root = FSharpList_get_Empty();\n    const node = fold((acc, x) => {\n        if (f(x)) {\n            const t = new FSharpList(x, void 0);\n            acc.tail = t;\n            return t;\n        }\n        else {\n            return acc;\n        }\n    }, root, xs);\n    const t_2 = FSharpList_get_Empty();\n    node.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\nexport function partition(f, xs) {\n    const matchValue = FSharpList_get_Empty();\n    const root2 = FSharpList_get_Empty();\n    const root1 = matchValue;\n    const patternInput_1 = fold((tupledArg, x) => {\n        let t, t_2;\n        const lacc = tupledArg[0];\n        const racc = tupledArg[1];\n        if (f(x)) {\n            return [(t = (new FSharpList(x, void 0)), (lacc.tail = t, t)), racc];\n        }\n        else {\n            return [lacc, (t_2 = (new FSharpList(x, void 0)), (racc.tail = t_2, t_2))];\n        }\n    }, [root1, root2], xs);\n    const t_4 = FSharpList_get_Empty();\n    patternInput_1[0].tail = t_4;\n    const t_5 = FSharpList_get_Empty();\n    patternInput_1[1].tail = t_5;\n    return [FSharpList__get_Tail(root1), FSharpList__get_Tail(root2)];\n}\nexport function choose(f, xs) {\n    const root = FSharpList_get_Empty();\n    const node = fold((acc, x) => {\n        const matchValue = f(x);\n        if (matchValue == null) {\n            return acc;\n        }\n        else {\n            const t = new FSharpList(value_1(matchValue), void 0);\n            acc.tail = t;\n            return t;\n        }\n    }, root, xs);\n    const t_2 = FSharpList_get_Empty();\n    node.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\nexport function contains(value, xs, eq) {\n    return tryFindIndex((v) => eq.Equals(value, v), xs) != null;\n}\nexport function initialize(n, f) {\n    let xs, t;\n    const root = FSharpList_get_Empty();\n    let node = root;\n    for (let i = 0; i <= (n - 1); i++) {\n        node = ((xs = node, (t = (new FSharpList(f(i), void 0)), (xs.tail = t, t))));\n    }\n    const xs_2 = node;\n    const t_2 = FSharpList_get_Empty();\n    xs_2.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\nexport function replicate(n, x) {\n    return initialize(n, (_arg) => x);\n}\nexport function reduce(f, xs) {\n    if (FSharpList__get_IsEmpty(xs)) {\n        throw new Error(SR_inputWasEmpty);\n    }\n    else {\n        return fold(f, head(xs), tail(xs));\n    }\n}\nexport function reduceBack(f, xs) {\n    if (FSharpList__get_IsEmpty(xs)) {\n        throw new Error(SR_inputWasEmpty);\n    }\n    else {\n        return foldBack(f, tail(xs), head(xs));\n    }\n}\nexport function forAll(f, xs) {\n    return fold((acc, x) => (acc && f(x)), true, xs);\n}\nexport function forAll2(f, xs, ys) {\n    return fold2((acc, x, y) => (acc && f(x, y)), true, xs, ys);\n}\nexport function exists(f, xs) {\n    return tryFindIndex(f, xs) != null;\n}\nexport function exists2(f_mut, xs_mut, ys_mut) {\n    exists2: while (true) {\n        const f = f_mut, xs = xs_mut, ys = ys_mut;\n        const matchValue = FSharpList__get_IsEmpty(xs);\n        const matchValue_1 = FSharpList__get_IsEmpty(ys);\n        let matchResult;\n        if (matchValue) {\n            if (matchValue_1) {\n                matchResult = 0;\n            }\n            else {\n                matchResult = 2;\n            }\n        }\n        else if (matchValue_1) {\n            matchResult = 2;\n        }\n        else {\n            matchResult = 1;\n        }\n        switch (matchResult) {\n            case 0:\n                return false;\n            case 1:\n                if (f(FSharpList__get_Head(xs), FSharpList__get_Head(ys))) {\n                    return true;\n                }\n                else {\n                    f_mut = f;\n                    xs_mut = FSharpList__get_Tail(xs);\n                    ys_mut = FSharpList__get_Tail(ys);\n                    continue exists2;\n                }\n            default:\n                throw new Error((SR_differentLengths + \"\\\\nParameter name: \") + \"list2\");\n        }\n        break;\n    }\n}\nexport function unzip(xs) {\n    return foldBack((tupledArg, tupledArg_1) => [FSharpList_Cons_305B8EAC(tupledArg[0], tupledArg_1[0]), FSharpList_Cons_305B8EAC(tupledArg[1], tupledArg_1[1])], xs, [FSharpList_get_Empty(), FSharpList_get_Empty()]);\n}\nexport function unzip3(xs) {\n    return foldBack((tupledArg, tupledArg_1) => [FSharpList_Cons_305B8EAC(tupledArg[0], tupledArg_1[0]), FSharpList_Cons_305B8EAC(tupledArg[1], tupledArg_1[1]), FSharpList_Cons_305B8EAC(tupledArg[2], tupledArg_1[2])], xs, [FSharpList_get_Empty(), FSharpList_get_Empty(), FSharpList_get_Empty()]);\n}\nexport function zip(xs, ys) {\n    return map2((x, y) => [x, y], xs, ys);\n}\nexport function zip3(xs, ys, zs) {\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\n}\nexport function sortWith(comparer, xs) {\n    const arr = toArray(xs);\n    arr.sort(comparer);\n    return ofArray(arr);\n}\nexport function sort(xs, comparer) {\n    return sortWith((x, y) => comparer.Compare(x, y), xs);\n}\nexport function sortBy(projection, xs, comparer) {\n    return sortWith((x, y) => comparer.Compare(projection(x), projection(y)), xs);\n}\nexport function sortDescending(xs, comparer) {\n    return sortWith((x, y) => (comparer.Compare(x, y) * -1), xs);\n}\nexport function sortByDescending(projection, xs, comparer) {\n    return sortWith((x, y) => (comparer.Compare(projection(x), projection(y)) * -1), xs);\n}\nexport function sum(xs, adder) {\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\n}\nexport function sumBy(f, xs, adder) {\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\n}\nexport function maxBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\n}\nexport function max(xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\n}\nexport function minBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\n}\nexport function min(xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\n}\nexport function average(xs, averager) {\n    let count = 0;\n    const total = fold((acc, x) => {\n        count = ((count + 1) | 0);\n        return averager.Add(acc, x);\n    }, averager.GetZero(), xs);\n    return averager.DivideByInt(total, count);\n}\nexport function averageBy(f, xs, averager) {\n    let count = 0;\n    const total = fold((acc, x) => {\n        count = ((count + 1) | 0);\n        return averager.Add(acc, f(x));\n    }, averager.GetZero(), xs);\n    return averager.DivideByInt(total, count);\n}\nexport function permute(f, xs) {\n    return ofArray(permute_1(f, toArray(xs)));\n}\nexport function chunkBySize(chunkSize, xs) {\n    return ofArray(map_1(ofArray, chunkBySize_1(chunkSize, toArray(xs))));\n}\nexport function allPairs(xs, ys) {\n    const root = FSharpList_get_Empty();\n    let node = root;\n    iterate((x) => {\n        iterate((y) => {\n            let xs_1, t;\n            node = ((xs_1 = node, (t = (new FSharpList([x, y], void 0)), (xs_1.tail = t, t))));\n        }, ys);\n    }, xs);\n    const xs_3 = node;\n    const t_2 = FSharpList_get_Empty();\n    xs_3.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\nexport function skip(count_mut, xs_mut) {\n    skip: while (true) {\n        const count = count_mut, xs = xs_mut;\n        if (count <= 0) {\n            return xs;\n        }\n        else if (FSharpList__get_IsEmpty(xs)) {\n            throw new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"list\");\n        }\n        else {\n            count_mut = (count - 1);\n            xs_mut = FSharpList__get_Tail(xs);\n            continue skip;\n        }\n        break;\n    }\n}\nexport function skipWhile(predicate_mut, xs_mut) {\n    skipWhile: while (true) {\n        const predicate = predicate_mut, xs = xs_mut;\n        if (FSharpList__get_IsEmpty(xs)) {\n            return xs;\n        }\n        else if (!predicate(FSharpList__get_Head(xs))) {\n            return xs;\n        }\n        else {\n            predicate_mut = predicate;\n            xs_mut = FSharpList__get_Tail(xs);\n            continue skipWhile;\n        }\n        break;\n    }\n}\nexport function take(count, xs) {\n    if (count < 0) {\n        throw new Error((SR_inputMustBeNonNegative + \"\\\\nParameter name: \") + \"count\");\n    }\n    const loop = (i_mut, acc_mut, xs_1_mut) => {\n        let t;\n        loop: while (true) {\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;\n            if (i <= 0) {\n                return acc;\n            }\n            else if (FSharpList__get_IsEmpty(xs_1)) {\n                throw new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"list\");\n            }\n            else {\n                i_mut = (i - 1);\n                acc_mut = ((t = (new FSharpList(FSharpList__get_Head(xs_1), void 0)), (acc.tail = t, t)));\n                xs_1_mut = FSharpList__get_Tail(xs_1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    const root = FSharpList_get_Empty();\n    const node = loop(count, root, xs);\n    const t_2 = FSharpList_get_Empty();\n    node.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\nexport function takeWhile(predicate, xs) {\n    const loop = (acc_mut, xs_1_mut) => {\n        let t;\n        loop: while (true) {\n            const acc = acc_mut, xs_1 = xs_1_mut;\n            if (FSharpList__get_IsEmpty(xs_1)) {\n                return acc;\n            }\n            else if (!predicate(FSharpList__get_Head(xs_1))) {\n                return acc;\n            }\n            else {\n                acc_mut = ((t = (new FSharpList(FSharpList__get_Head(xs_1), void 0)), (acc.tail = t, t)));\n                xs_1_mut = FSharpList__get_Tail(xs_1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    const root = FSharpList_get_Empty();\n    const node = loop(root, xs);\n    const t_2 = FSharpList_get_Empty();\n    node.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\nexport function truncate(count, xs) {\n    const loop = (i_mut, acc_mut, xs_1_mut) => {\n        let t;\n        loop: while (true) {\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;\n            if (i <= 0) {\n                return acc;\n            }\n            else if (FSharpList__get_IsEmpty(xs_1)) {\n                return acc;\n            }\n            else {\n                i_mut = (i - 1);\n                acc_mut = ((t = (new FSharpList(FSharpList__get_Head(xs_1), void 0)), (acc.tail = t, t)));\n                xs_1_mut = FSharpList__get_Tail(xs_1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    const root = FSharpList_get_Empty();\n    const node = loop(count, root, xs);\n    const t_2 = FSharpList_get_Empty();\n    node.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\nexport function getSlice(startIndex, endIndex, xs) {\n    const len = length(xs) | 0;\n    let startIndex_1;\n    const index = defaultArg(startIndex, 0) | 0;\n    startIndex_1 = ((index < 0) ? 0 : index);\n    let endIndex_1;\n    const index_1 = defaultArg(endIndex, len - 1) | 0;\n    endIndex_1 = ((index_1 >= len) ? (len - 1) : index_1);\n    if (endIndex_1 < startIndex_1) {\n        return FSharpList_get_Empty();\n    }\n    else {\n        return take((endIndex_1 - startIndex_1) + 1, skip(startIndex_1, xs));\n    }\n}\nexport function splitAt(index, xs) {\n    if (index < 0) {\n        throw new Error((SR_inputMustBeNonNegative + \"\\\\nParameter name: \") + \"index\");\n    }\n    if (index > FSharpList__get_Length(xs)) {\n        throw new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"index\");\n    }\n    return [take(index, xs), skip(index, xs)];\n}\nexport function exactlyOne(xs) {\n    if (FSharpList__get_IsEmpty(xs)) {\n        throw new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"list\");\n    }\n    else if (FSharpList__get_IsEmpty(FSharpList__get_Tail(xs))) {\n        return FSharpList__get_Head(xs);\n    }\n    else {\n        throw new Error((SR_inputSequenceTooLong + \"\\\\nParameter name: \") + \"list\");\n    }\n}\nexport function tryExactlyOne(xs) {\n    if (!FSharpList__get_IsEmpty(xs) && FSharpList__get_IsEmpty(FSharpList__get_Tail(xs))) {\n        return some(FSharpList__get_Head(xs));\n    }\n    else {\n        return void 0;\n    }\n}\nexport function where(predicate, xs) {\n    return filter(predicate, xs);\n}\nexport function pairwise(xs) {\n    return ofArray(pairwise_1(toArray(xs)));\n}\nexport function windowed(windowSize, xs) {\n    return ofArray(map_1(ofArray, windowed_1(windowSize, toArray(xs))));\n}\nexport function splitInto(chunks, xs) {\n    return ofArray(map_1(ofArray, splitInto_1(chunks, toArray(xs))));\n}\nexport function transpose(lists) {\n    return ofArray(map_1(ofArray, transpose_1(map_1(toArray, Array.from(lists)))));\n}\nexport function insertAt(index, y, xs) {\n    let i = -1;\n    let isDone = false;\n    const result = fold((acc, x) => {\n        i = ((i + 1) | 0);\n        if (i === index) {\n            isDone = true;\n            return FSharpList_Cons_305B8EAC(x, FSharpList_Cons_305B8EAC(y, acc));\n        }\n        else {\n            return FSharpList_Cons_305B8EAC(x, acc);\n        }\n    }, FSharpList_get_Empty(), xs);\n    return reverse(isDone ? result : (((i + 1) === index) ? FSharpList_Cons_305B8EAC(y, result) : (() => {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n    })()));\n}\nexport function insertManyAt(index, ys, xs) {\n    let i = -1;\n    let isDone = false;\n    const ys_1 = ofSeq(ys);\n    const result = fold((acc, x) => {\n        i = ((i + 1) | 0);\n        if (i === index) {\n            isDone = true;\n            return FSharpList_Cons_305B8EAC(x, append(ys_1, acc));\n        }\n        else {\n            return FSharpList_Cons_305B8EAC(x, acc);\n        }\n    }, FSharpList_get_Empty(), xs);\n    return reverse(isDone ? result : (((i + 1) === index) ? append(ys_1, result) : (() => {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n    })()));\n}\nexport function removeAt(index, xs) {\n    let i = -1;\n    let isDone = false;\n    const ys = filter((_arg) => {\n        i = ((i + 1) | 0);\n        if (i === index) {\n            isDone = true;\n            return false;\n        }\n        else {\n            return true;\n        }\n    }, xs);\n    if (!isDone) {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n    }\n    return ys;\n}\nexport function removeManyAt(index, count, xs) {\n    let i = -1;\n    let status = -1;\n    const ys = filter((_arg) => {\n        i = ((i + 1) | 0);\n        if (i === index) {\n            status = 0;\n            return false;\n        }\n        else if (i > index) {\n            if (i < (index + count)) {\n                return false;\n            }\n            else {\n                status = 1;\n                return true;\n            }\n        }\n        else {\n            return true;\n        }\n    }, xs);\n    const status_1 = (((status === 0) && ((i + 1) === (index + count))) ? 1 : status) | 0;\n    if (status_1 < 1) {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + ((status_1 < 0) ? \"index\" : \"count\"));\n    }\n    return ys;\n}\nexport function updateAt(index, y, xs) {\n    let isDone = false;\n    const ys = mapIndexed((i, x) => {\n        if (i === index) {\n            isDone = true;\n            return y;\n        }\n        else {\n            return x;\n        }\n    }, xs);\n    if (!isDone) {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n    }\n    return ys;\n}\n","(**\nCmd\n---------\nCore abstractions for dispatching messages in Elmish.\n\n*)\n\nnamespace Elmish\n\nopen System\n\n/// Dispatch - feed new message into the processing loop\ntype Dispatch<'msg> = 'msg -> unit\n\n/// Subscription - return immediately, but may schedule dispatch of a message at any time\ntype Sub<'msg> = Dispatch<'msg> -> unit\n\n/// Cmd - container for subscriptions that may produce messages\ntype Cmd<'msg> = Sub<'msg> list\n\n/// Cmd module for creating and manipulating commands\n[<RequireQualifiedAccess>]\nmodule Cmd =\n    /// Execute the commands using the supplied dispatcher\n    let internal exec onError (dispatch: Dispatch<'msg>) (cmd: Cmd<'msg>) =\n        cmd |> List.iter (fun call -> try call dispatch with ex -> onError ex)\n\n    /// None - no commands, also known as `[]`\n    let none : Cmd<'msg> =\n        []\n\n    /// When emitting the message, map to another type\n    let map (f: 'a -> 'msg) (cmd: Cmd<'a>) : Cmd<'msg> =\n        cmd |> List.map (fun g -> (fun dispatch -> f >> dispatch) >> g)\n\n    /// Aggregate multiple commands\n    let batch (cmds: #seq<Cmd<'msg>>) : Cmd<'msg> =\n        cmds |> List.concat\n\n    /// Command to call the subscriber\n    let ofSub (sub: Sub<'msg>) : Cmd<'msg> =\n        [sub]\n\n    module OfFunc =\n        /// Command to evaluate a simple function and map the result\n        /// into success or error (of exception)\n        let either (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                try\n                    task arg\n                    |> (ofSuccess >> dispatch)\n                with x ->\n                    x |> (ofError >> dispatch)\n            [bind]\n\n        /// Command to evaluate a simple function and map the success to a message\n        /// discarding any possible error\n        let perform (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                try\n                    task arg\n                    |> (ofSuccess >> dispatch)\n                with x ->\n                    ()\n            [bind]\n\n        /// Command to evaluate a simple function and map the error (in case of exception)\n        let attempt (task: 'a -> unit) (arg: 'a) (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                try\n                    task arg\n                with x ->\n                    x |> (ofError >> dispatch)\n            [bind]\n\n        /// Command to issue a specific message\n        let result (msg:'msg) : Cmd<'msg> =\n            [fun dispatch -> dispatch msg]\n\n    module OfAsyncWith =\n        /// Command that will evaluate an async block and map the result\n        /// into success or error (of exception)\n        let either (start: Async<unit> -> unit) \n                   (task: 'a -> Async<_>)\n                   (arg: 'a)\n                   (ofSuccess: _ -> 'msg)\n                   (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task arg |> Async.Catch\n                    dispatch (match r with\n                             | Choice1Of2 x -> ofSuccess x\n                             | Choice2Of2 x -> ofError x)\n                }\n            [bind >> start]\n\n        /// Command that will evaluate an async block and map the success\n        let perform (start: Async<unit> -> unit) \n                    (task: 'a -> Async<_>)\n                    (arg: 'a)\n                    (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task arg |> Async.Catch\n                    match r with\n                    | Choice1Of2 x -> dispatch (ofSuccess x)\n                    | _ -> ()\n                }\n            [bind >> start]\n\n        /// Command that will evaluate an async block and map the error (of exception)\n        let attempt (start: Async<unit> -> unit) \n                    (task: 'a -> Async<_>)\n                    (arg: 'a)\n                    (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task arg |> Async.Catch\n                    match r with\n                    | Choice2Of2 x -> dispatch (ofError x)\n                    | _ -> ()\n                }\n            [bind >> start]\n\n        /// Command that will evaluate an async block to the message\n        let result (start: Async<unit> -> unit) \n                   (task: Async<'msg>) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task\n                    dispatch r\n                }\n            [bind >> start]\n\n    module OfAsync =\n#if FABLE_COMPILER\n        let start x = Timer.delay 0 (fun _ -> Async.StartImmediate x)\n#else\n        let inline start x = Async.Start x\n#endif    \n        /// Command that will evaluate an async block and map the result\n        /// into success or error (of exception)\n        let inline either (task: 'a -> Async<_>)\n                          (arg: 'a)\n                          (ofSuccess: _ -> 'msg)\n                          (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.either start task arg ofSuccess ofError\n\n        /// Command that will evaluate an async block and map the success\n        let inline perform (task: 'a -> Async<_>)\n                           (arg: 'a)\n                           (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.perform start task arg ofSuccess\n\n        /// Command that will evaluate an async block and map the error (of exception)\n        let inline attempt (task: 'a -> Async<_>)\n                           (arg: 'a)\n                           (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.attempt start task arg ofError\n\n        /// Command that will evaluate an async block to the message\n        let inline result (task: Async<'msg>) : Cmd<'msg> =\n            OfAsyncWith.result start task\n\n    module OfAsyncImmediate =\n        /// Command that will evaluate an async block and map the result\n        /// into success or error (of exception)\n        let inline either (task: 'a -> Async<_>)\n                          (arg: 'a)\n                          (ofSuccess: _ -> 'msg)\n                          (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.either Async.StartImmediate task arg ofSuccess ofError\n\n        /// Command that will evaluate an async block and map the success\n        let inline perform (task: 'a -> Async<_>)\n                           (arg: 'a)\n                           (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.perform Async.StartImmediate task arg ofSuccess\n\n        /// Command that will evaluate an async block and map the error (of exception)\n        let inline attempt (task: 'a -> Async<_>)\n                           (arg: 'a)\n                           (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.attempt Async.StartImmediate task arg ofError\n\n        /// Command that will evaluate an async block to the message\n        let inline result (task: Async<'msg>) : Cmd<'msg> =\n            OfAsyncWith.result Async.StartImmediate task\n\n#if FABLE_COMPILER\n    module OfPromise =\n        /// Command to call `promise` block and map the results\n        let either (task: 'a -> Fable.Core.JS.Promise<_>)\n                   (arg:'a)\n                   (ofSuccess: _ -> 'msg)\n                   (ofError: #exn -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                (task arg)\n                    .``then``(ofSuccess >> dispatch)\n                    .catch(unbox >> ofError >> dispatch)\n                    |> ignore\n            [bind]\n\n        /// Command to call `promise` block and map the success\n        let perform (task: 'a -> Fable.Core.JS.Promise<_>)\n                   (arg:'a)\n                   (ofSuccess: _ -> 'msg) =\n            let bind dispatch =\n                (task arg)\n                    .``then``(ofSuccess >> dispatch)\n                    |> ignore\n            [bind]\n\n        /// Command to call `promise` block and map the error\n        let attempt (task: 'a -> Fable.Core.JS.Promise<_>)\n                    (arg:'a)\n                    (ofError: #exn -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                (task arg)\n                    .catch(unbox >> ofError >> dispatch)\n                    |> ignore\n            [bind]\n\n        /// Command to dispatch the `promise` result\n        let result (task: Fable.Core.JS.Promise<'msg>) =\n            let bind dispatch =\n                task.``then`` dispatch\n                |> ignore\n            [bind]\n\n    [<Obsolete(\"Use `OfPromise.either` instead\")>]\n    let inline ofPromise (task: 'a -> Fable.Core.JS.Promise<_>)\n                         (arg:'a)\n                         (ofSuccess: _ -> 'msg)\n                         (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfPromise.either task arg ofSuccess ofError                     \n#else\n    open System.Threading.Tasks\n    module OfTask =\n        /// Command to call a task and map the results\n        let inline either (task: 'a -> Task<_>)\n                          (arg:'a)\n                          (ofSuccess: _ -> 'msg)\n                          (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsync.either (task >> Async.AwaitTask) arg ofSuccess ofError\n\n        /// Command to call a task and map the success\n        let inline perform (task: 'a -> Task<_>)\n                           (arg:'a)\n                           (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            OfAsync.perform (task >> Async.AwaitTask) arg ofSuccess\n\n        /// Command to call a task and map the error\n        let inline attempt (task: 'a -> Task<_>)\n                           (arg:'a)\n                           (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsync.attempt (task >> Async.AwaitTask) arg ofError\n\n        /// Command and map the task success\n        let inline result (task: Task<'msg>) : Cmd<'msg> =\n            OfAsync.result (task |> Async.AwaitTask)\n\n    [<Obsolete(\"Use OfTask.either instead\")>]\n    let inline ofTask (task: 'a -> Task<_>)\n                      (arg:'a)\n                      (ofSuccess: _ -> 'msg)\n                      (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfTask.either task arg ofSuccess ofError\n#endif\n\n    // Synonymous with `OfFunc.result`, may be removed in the future\n    let inline ofMsg (msg:'msg) : Cmd<'msg> =\n        OfFunc.result msg\n\n    [<Obsolete(\"Use `Cmd.OfAsync.either` instead\")>]\n    let inline ofAsync (task: 'a -> Async<_>)\n                       (arg: 'a)\n                       (ofSuccess: _ -> 'msg)\n                       (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfAsync.either task arg ofSuccess ofError\n\n    [<Obsolete(\"Use `Cmd.OfFunc.either` instead\")>]\n    let inline ofFunc (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfFunc.either task arg ofSuccess ofError\n\n    [<Obsolete(\"Use `Cmd.OfFunc.perform` instead\")>]\n    let inline performFunc (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n        OfFunc.perform task arg ofSuccess\n\n    [<Obsolete(\"Use `Cmd.OfFunc.attempt` instead\")>]\n    let attemptFunc (task: 'a -> unit) (arg: 'a) (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfFunc.attempt task arg ofError\n\n","import { FSharpRef } from \"./Types.js\";\nexport function tryParse(str, defValue) {\n    // TODO: test if value is valid and in range\n    if (str != null && /\\S/.test(str)) {\n        const v = +str.replace(\"_\", \"\");\n        if (!Number.isNaN(v)) {\n            defValue.contents = v;\n            return true;\n        }\n    }\n    return false;\n}\nexport function parse(str) {\n    const defValue = new FSharpRef(0);\n    if (tryParse(str, defValue)) {\n        return defValue.contents;\n    }\n    else {\n        throw new Error(\"Input string was not in a correct format.\");\n    }\n}\n// JS Number.isFinite function evals false for NaN\nexport function isPositiveInfinity(x) {\n    return x === Number.POSITIVE_INFINITY;\n}\nexport function isNegativeInfinity(x) {\n    return x === Number.NEGATIVE_INFINITY;\n}\nexport function isInfinity(x) {\n    return x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY;\n}\nexport function max(x, y) {\n    return x > y ? x : y;\n}\nexport function min(x, y) {\n    return x < y ? x : y;\n}\nexport function maxMagnitude(x, y) {\n    return Math.abs(x) > Math.abs(y) ? x : y;\n}\nexport function minMagnitude(x, y) {\n    return Math.abs(x) < Math.abs(y) ? x : y;\n}\nexport function clamp(x, min, max) {\n    return x < min ? min : x > max ? max : x;\n}\n","import { clear, defaultOf, equals, isDisposable, isArrayLike, toIterator, disposeSafe, getEnumerator } from \"./Util.js\";\nimport { toString } from \"./Types.js\";\nimport { class_type } from \"./Reflection.js\";\nimport { some, value as value_1 } from \"./Option.js\";\nimport { Operators_Lock, Operators_NullArg } from \"./FSharp.Core.js\";\nimport { chunkBySize as chunkBySize_1, permute as permute_1, transpose as transpose_1, map as map_1, windowed as windowed_1, splitInto as splitInto_1, pairwise as pairwise_1, scanBack as scanBack_1, reverse as reverse_1, mapFoldBack as mapFoldBack_1, mapFold as mapFold_1, tryItem as tryItem_1, tryHead as tryHead_1, foldBack2 as foldBack2_1, foldBack as foldBack_1, tryFindIndexBack as tryFindIndexBack_1, tryFindBack as tryFindBack_1, singleton as singleton_1 } from \"./Array.js\";\nimport { length as length_1, tryItem as tryItem_2, isEmpty as isEmpty_1, tryHead as tryHead_2, ofSeq as ofSeq_1, ofArray as ofArray_1, toArray as toArray_1, FSharpList } from \"./List.js\";\nimport { SR_indexOutOfBounds } from \"./Global.js\";\nexport const SR_enumerationAlreadyFinished = \"Enumeration already finished.\";\nexport const SR_enumerationNotStarted = \"Enumeration has not started. Call MoveNext.\";\nexport const SR_inputSequenceEmpty = \"The input sequence was empty.\";\nexport const SR_inputSequenceTooLong = \"The input sequence contains more than one element.\";\nexport const SR_keyNotFoundAlt = \"An index satisfying the predicate was not found in the collection.\";\nexport const SR_notEnoughElements = \"The input sequence has an insufficient number of elements.\";\nexport const SR_resetNotSupported = \"Reset is not supported on this enumerator.\";\nexport function Enumerator_noReset() {\n    throw new Error(SR_resetNotSupported);\n}\nexport function Enumerator_notStarted() {\n    throw new Error(SR_enumerationNotStarted);\n}\nexport function Enumerator_alreadyFinished() {\n    throw new Error(SR_enumerationAlreadyFinished);\n}\nexport class Enumerator_Seq {\n    constructor(f) {\n        this.f = f;\n    }\n    toString() {\n        const xs = this;\n        let i = 0;\n        let str = \"seq [\";\n        const e = getEnumerator(xs);\n        try {\n            while ((i < 4) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                if (i > 0) {\n                    str = (str + \"; \");\n                }\n                str = (str + toString(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()));\n                i = ((i + 1) | 0);\n            }\n            if (i === 4) {\n                str = (str + \"; ...\");\n            }\n            return str + \"]\";\n        }\n        finally {\n            disposeSafe(e);\n        }\n    }\n    GetEnumerator() {\n        const x = this;\n        return x.f();\n    }\n    [Symbol.iterator]() {\n        return toIterator(getEnumerator(this));\n    }\n    \"System.Collections.IEnumerable.GetEnumerator\"() {\n        const x = this;\n        return x.f();\n    }\n}\nexport function Enumerator_Seq_$reflection(gen0) {\n    return class_type(\"SeqModule.Enumerator.Seq\", [gen0], Enumerator_Seq);\n}\nexport function Enumerator_Seq_$ctor_673A07F2(f) {\n    return new Enumerator_Seq(f);\n}\nexport class Enumerator_FromFunctions$1 {\n    constructor(current, next, dispose) {\n        this.current = current;\n        this.next = next;\n        this.dispose = dispose;\n    }\n    \"System.Collections.Generic.IEnumerator`1.get_Current\"() {\n        const _ = this;\n        return _.current();\n    }\n    \"System.Collections.IEnumerator.get_Current\"() {\n        const _ = this;\n        return _.current();\n    }\n    \"System.Collections.IEnumerator.MoveNext\"() {\n        const _ = this;\n        return _.next();\n    }\n    \"System.Collections.IEnumerator.Reset\"() {\n        Enumerator_noReset();\n    }\n    Dispose() {\n        const _ = this;\n        _.dispose();\n    }\n}\nexport function Enumerator_FromFunctions$1_$reflection(gen0) {\n    return class_type(\"SeqModule.Enumerator.FromFunctions`1\", [gen0], Enumerator_FromFunctions$1);\n}\nexport function Enumerator_FromFunctions$1_$ctor_58C54629(current, next, dispose) {\n    return new Enumerator_FromFunctions$1(current, next, dispose);\n}\nexport function Enumerator_cast(e) {\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => e[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), () => e[\"System.Collections.IEnumerator.MoveNext\"](), () => {\n        const e_1 = e;\n        disposeSafe(e_1);\n    });\n}\nexport function Enumerator_concat(sources) {\n    let outerOpt = void 0;\n    let innerOpt = void 0;\n    let started = false;\n    let finished = false;\n    let curr = void 0;\n    const finish = () => {\n        finished = true;\n        if (innerOpt != null) {\n            const inner = value_1(innerOpt);\n            try {\n                disposeSafe(inner);\n            }\n            finally {\n                innerOpt = void 0;\n            }\n        }\n        if (outerOpt != null) {\n            const outer = value_1(outerOpt);\n            try {\n                disposeSafe(outer);\n            }\n            finally {\n                outerOpt = void 0;\n            }\n        }\n    };\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => {\n        if (!started) {\n            Enumerator_notStarted();\n        }\n        else if (finished) {\n            Enumerator_alreadyFinished();\n        }\n        if (curr != null) {\n            return value_1(curr);\n        }\n        else {\n            return Enumerator_alreadyFinished();\n        }\n    }, () => {\n        let copyOfStruct;\n        if (!started) {\n            started = true;\n        }\n        if (finished) {\n            return false;\n        }\n        else {\n            let res = void 0;\n            while (res == null) {\n                const outerOpt_1 = outerOpt;\n                const innerOpt_1 = innerOpt;\n                if (outerOpt_1 != null) {\n                    if (innerOpt_1 != null) {\n                        const inner_1 = value_1(innerOpt_1);\n                        if (inner_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                            curr = some(inner_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n                            res = true;\n                        }\n                        else {\n                            try {\n                                disposeSafe(inner_1);\n                            }\n                            finally {\n                                innerOpt = void 0;\n                            }\n                        }\n                    }\n                    else {\n                        const outer_1 = value_1(outerOpt_1);\n                        if (outer_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                            const ie = outer_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                            innerOpt = ((copyOfStruct = ie, getEnumerator(copyOfStruct)));\n                        }\n                        else {\n                            finish();\n                            res = false;\n                        }\n                    }\n                }\n                else {\n                    outerOpt = getEnumerator(sources);\n                }\n            }\n            return value_1(res);\n        }\n    }, () => {\n        if (!finished) {\n            finish();\n        }\n    });\n}\nexport function Enumerator_enumerateThenFinally(f, e) {\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => e[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), () => e[\"System.Collections.IEnumerator.MoveNext\"](), () => {\n        try {\n            disposeSafe(e);\n        }\n        finally {\n            f();\n        }\n    });\n}\nexport function Enumerator_generateWhileSome(openf, compute, closef) {\n    let started = false;\n    let curr = void 0;\n    let state = some(openf());\n    const dispose = () => {\n        if (state != null) {\n            const x_1 = value_1(state);\n            try {\n                closef(x_1);\n            }\n            finally {\n                state = void 0;\n            }\n        }\n    };\n    const finish = () => {\n        try {\n            dispose();\n        }\n        finally {\n            curr = void 0;\n        }\n    };\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => {\n        if (!started) {\n            Enumerator_notStarted();\n        }\n        if (curr != null) {\n            return value_1(curr);\n        }\n        else {\n            return Enumerator_alreadyFinished();\n        }\n    }, () => {\n        if (!started) {\n            started = true;\n        }\n        if (state != null) {\n            const s = value_1(state);\n            let matchValue_1;\n            try {\n                matchValue_1 = compute(s);\n            }\n            catch (matchValue) {\n                finish();\n                throw matchValue;\n            }\n            if (matchValue_1 != null) {\n                curr = matchValue_1;\n                return true;\n            }\n            else {\n                finish();\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    }, dispose);\n}\nexport function Enumerator_unfold(f, state) {\n    let curr = void 0;\n    let acc = state;\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => {\n        if (curr != null) {\n            const x = value_1(curr)[0];\n            const st = value_1(curr)[1];\n            return x;\n        }\n        else {\n            return Enumerator_notStarted();\n        }\n    }, () => {\n        curr = f(acc);\n        if (curr != null) {\n            const x_1 = value_1(curr)[0];\n            const st_1 = value_1(curr)[1];\n            acc = st_1;\n            return true;\n        }\n        else {\n            return false;\n        }\n    }, () => {\n    });\n}\nexport function indexNotFound() {\n    throw new Error(SR_keyNotFoundAlt);\n}\nexport function checkNonNull(argName, arg) {\n    if (arg == null) {\n        Operators_NullArg(argName);\n    }\n}\nexport function mkSeq(f) {\n    return Enumerator_Seq_$ctor_673A07F2(f);\n}\nexport function ofSeq(xs) {\n    checkNonNull(\"source\", xs);\n    return getEnumerator(xs);\n}\nexport function delay(generator) {\n    return mkSeq(() => getEnumerator(generator()));\n}\nexport function concat(sources) {\n    return mkSeq(() => Enumerator_concat(sources));\n}\nexport function unfold(generator, state) {\n    return mkSeq(() => Enumerator_unfold(generator, state));\n}\nexport function empty() {\n    return delay(() => (new Array(0)));\n}\nexport function singleton(x) {\n    return delay(() => singleton_1(x));\n}\nexport function ofArray(arr) {\n    return arr;\n}\nexport function toArray(xs) {\n    if (xs instanceof FSharpList) {\n        const a = xs;\n        return toArray_1(a);\n    }\n    else {\n        return Array.from(xs);\n    }\n}\nexport function ofList(xs) {\n    return xs;\n}\nexport function toList(xs) {\n    if (isArrayLike(xs)) {\n        return ofArray_1(xs);\n    }\n    else if (xs instanceof FSharpList) {\n        return xs;\n    }\n    else {\n        return ofSeq_1(xs);\n    }\n}\nexport function generate(create, compute, dispose) {\n    return mkSeq(() => Enumerator_generateWhileSome(create, compute, dispose));\n}\nexport function generateIndexed(create, compute, dispose) {\n    return mkSeq(() => {\n        let i = -1;\n        return Enumerator_generateWhileSome(create, (x) => {\n            i = ((i + 1) | 0);\n            return compute(i, x);\n        }, dispose);\n    });\n}\nexport function append(xs, ys) {\n    return concat([xs, ys]);\n}\nexport function cast(xs) {\n    return mkSeq(() => {\n        checkNonNull(\"source\", xs);\n        return Enumerator_cast(getEnumerator(xs));\n    });\n}\nexport function choose(chooser, xs) {\n    return generate(() => ofSeq(xs), (e) => {\n        let curr = void 0;\n        while ((curr == null) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            curr = chooser(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n        }\n        return curr;\n    }, (e_1) => {\n        disposeSafe(e_1);\n    });\n}\nexport function compareWith(comparer, xs, ys) {\n    const e1 = ofSeq(xs);\n    try {\n        const e2 = ofSeq(ys);\n        try {\n            let c = 0;\n            let b1 = e1[\"System.Collections.IEnumerator.MoveNext\"]();\n            let b2 = e2[\"System.Collections.IEnumerator.MoveNext\"]();\n            while (((c === 0) && b1) && b2) {\n                c = (comparer(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) | 0);\n                if (c === 0) {\n                    b1 = e1[\"System.Collections.IEnumerator.MoveNext\"]();\n                    b2 = e2[\"System.Collections.IEnumerator.MoveNext\"]();\n                }\n            }\n            return ((c !== 0) ? c : (b1 ? 1 : (b2 ? -1 : 0))) | 0;\n        }\n        finally {\n            disposeSafe(e2);\n        }\n    }\n    finally {\n        disposeSafe(e1);\n    }\n}\nexport function contains(value, xs, comparer) {\n    const e = ofSeq(xs);\n    try {\n        let found = false;\n        while (!found && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            found = comparer.Equals(value, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n        }\n        return found;\n    }\n    finally {\n        disposeSafe(e);\n    }\n}\nexport function enumerateFromFunctions(create, moveNext, current) {\n    return generate(create, (x) => (moveNext(x) ? some(current(x)) : void 0), (x_1) => {\n        const matchValue = x_1;\n        if (isDisposable(matchValue)) {\n            const id = matchValue;\n            disposeSafe(id);\n        }\n    });\n}\nexport function enumerateThenFinally(source, compensation) {\n    const compensation_1 = compensation;\n    return mkSeq(() => {\n        try {\n            return Enumerator_enumerateThenFinally(compensation_1, ofSeq(source));\n        }\n        catch (matchValue) {\n            compensation_1();\n            throw matchValue;\n        }\n    });\n}\nexport function enumerateUsing(resource, source) {\n    const compensation = () => {\n        if (equals(resource, defaultOf())) {\n        }\n        else {\n            let copyOfStruct = resource;\n            disposeSafe(copyOfStruct);\n        }\n    };\n    return mkSeq(() => {\n        try {\n            return Enumerator_enumerateThenFinally(compensation, ofSeq(source(resource)));\n        }\n        catch (matchValue_1) {\n            compensation();\n            throw matchValue_1;\n        }\n    });\n}\nexport function enumerateWhile(guard, xs) {\n    return concat(unfold((i) => (guard() ? [xs, i + 1] : void 0), 0));\n}\nexport function filter(f, xs) {\n    return choose((x) => {\n        if (f(x)) {\n            return some(x);\n        }\n        else {\n            return void 0;\n        }\n    }, xs);\n}\nexport function exists(predicate, xs) {\n    const e = ofSeq(xs);\n    try {\n        let found = false;\n        while (!found && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            found = predicate(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n        }\n        return found;\n    }\n    finally {\n        disposeSafe(e);\n    }\n}\nexport function exists2(predicate, xs, ys) {\n    const e1 = ofSeq(xs);\n    try {\n        const e2 = ofSeq(ys);\n        try {\n            let found = false;\n            while ((!found && e1[\"System.Collections.IEnumerator.MoveNext\"]()) && e2[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                found = predicate(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n            }\n            return found;\n        }\n        finally {\n            disposeSafe(e2);\n        }\n    }\n    finally {\n        disposeSafe(e1);\n    }\n}\nexport function exactlyOne(xs) {\n    const e = ofSeq(xs);\n    try {\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            const v = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n            if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                throw new Error((SR_inputSequenceTooLong + \"\\\\nParameter name: \") + \"source\");\n            }\n            else {\n                return v;\n            }\n        }\n        else {\n            throw new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\");\n        }\n    }\n    finally {\n        disposeSafe(e);\n    }\n}\nexport function tryExactlyOne(xs) {\n    const e = ofSeq(xs);\n    try {\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            const v = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? void 0 : some(v);\n        }\n        else {\n            return void 0;\n        }\n    }\n    finally {\n        disposeSafe(e);\n    }\n}\nexport function tryFind(predicate, xs) {\n    const e = ofSeq(xs);\n    try {\n        let res = void 0;\n        while ((res == null) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            const c = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n            if (predicate(c)) {\n                res = some(c);\n            }\n        }\n        return res;\n    }\n    finally {\n        disposeSafe(e);\n    }\n}\nexport function find(predicate, xs) {\n    const matchValue = tryFind(predicate, xs);\n    if (matchValue == null) {\n        return indexNotFound();\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\nexport function tryFindBack(predicate, xs) {\n    return tryFindBack_1(predicate, toArray(xs));\n}\nexport function findBack(predicate, xs) {\n    const matchValue = tryFindBack(predicate, xs);\n    if (matchValue == null) {\n        return indexNotFound();\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\nexport function tryFindIndex(predicate, xs) {\n    const e = ofSeq(xs);\n    try {\n        const loop = (i_mut) => {\n            loop: while (true) {\n                const i = i_mut;\n                if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                    if (predicate(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) {\n                        return i;\n                    }\n                    else {\n                        i_mut = (i + 1);\n                        continue loop;\n                    }\n                }\n                else {\n                    return void 0;\n                }\n                break;\n            }\n        };\n        return loop(0);\n    }\n    finally {\n        disposeSafe(e);\n    }\n}\nexport function findIndex(predicate, xs) {\n    const matchValue = tryFindIndex(predicate, xs);\n    if (matchValue == null) {\n        indexNotFound();\n        return -1;\n    }\n    else {\n        return value_1(matchValue) | 0;\n    }\n}\nexport function tryFindIndexBack(predicate, xs) {\n    return tryFindIndexBack_1(predicate, toArray(xs));\n}\nexport function findIndexBack(predicate, xs) {\n    const matchValue = tryFindIndexBack(predicate, xs);\n    if (matchValue == null) {\n        indexNotFound();\n        return -1;\n    }\n    else {\n        return value_1(matchValue) | 0;\n    }\n}\nexport function fold(folder, state, xs) {\n    const e = ofSeq(xs);\n    try {\n        let acc = state;\n        while (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            acc = folder(acc, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n        }\n        return acc;\n    }\n    finally {\n        disposeSafe(e);\n    }\n}\nexport function foldBack(folder, xs, state) {\n    return foldBack_1(folder, toArray(xs), state);\n}\nexport function fold2(folder, state, xs, ys) {\n    const e1 = ofSeq(xs);\n    try {\n        const e2 = ofSeq(ys);\n        try {\n            let acc = state;\n            while (e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                acc = folder(acc, e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n            }\n            return acc;\n        }\n        finally {\n            disposeSafe(e2);\n        }\n    }\n    finally {\n        disposeSafe(e1);\n    }\n}\nexport function foldBack2(folder, xs, ys, state) {\n    return foldBack2_1(folder, toArray(xs), toArray(ys), state);\n}\nexport function forAll(predicate, xs) {\n    return !exists((x) => !predicate(x), xs);\n}\nexport function forAll2(predicate, xs, ys) {\n    return !exists2((x, y) => !predicate(x, y), xs, ys);\n}\nexport function tryHead(xs) {\n    if (isArrayLike(xs)) {\n        return tryHead_1(xs);\n    }\n    else if (xs instanceof FSharpList) {\n        return tryHead_2(xs);\n    }\n    else {\n        const e = ofSeq(xs);\n        try {\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : void 0;\n        }\n        finally {\n            disposeSafe(e);\n        }\n    }\n}\nexport function head(xs) {\n    const matchValue = tryHead(xs);\n    if (matchValue == null) {\n        throw new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\");\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\nexport function initialize(count, f) {\n    return unfold((i) => ((i < count) ? [f(i), i + 1] : void 0), 0);\n}\nexport function initializeInfinite(f) {\n    return initialize(2147483647, f);\n}\nexport function isEmpty(xs) {\n    if (isArrayLike(xs)) {\n        const a = xs;\n        return a.length === 0;\n    }\n    else if (xs instanceof FSharpList) {\n        return isEmpty_1(xs);\n    }\n    else {\n        const e = ofSeq(xs);\n        try {\n            return !e[\"System.Collections.IEnumerator.MoveNext\"]();\n        }\n        finally {\n            disposeSafe(e);\n        }\n    }\n}\nexport function tryItem(index, xs) {\n    if (isArrayLike(xs)) {\n        return tryItem_1(index, xs);\n    }\n    else if (xs instanceof FSharpList) {\n        return tryItem_2(index, xs);\n    }\n    else {\n        const e = ofSeq(xs);\n        try {\n            const loop = (index_1_mut) => {\n                loop: while (true) {\n                    const index_1 = index_1_mut;\n                    if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                        return void 0;\n                    }\n                    else if (index_1 === 0) {\n                        return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n                    }\n                    else {\n                        index_1_mut = (index_1 - 1);\n                        continue loop;\n                    }\n                    break;\n                }\n            };\n            return loop(index);\n        }\n        finally {\n            disposeSafe(e);\n        }\n    }\n}\nexport function item(index, xs) {\n    const matchValue = tryItem(index, xs);\n    if (matchValue == null) {\n        throw new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"index\");\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\nexport function iterate(action, xs) {\n    fold((unitVar, x) => {\n        action(x);\n    }, void 0, xs);\n}\nexport function iterate2(action, xs, ys) {\n    fold2((unitVar, x, y) => {\n        action(x, y);\n    }, void 0, xs, ys);\n}\nexport function iterateIndexed(action, xs) {\n    fold((i, x) => {\n        action(i, x);\n        return (i + 1) | 0;\n    }, 0, xs);\n}\nexport function iterateIndexed2(action, xs, ys) {\n    fold2((i, x, y) => {\n        action(i, x, y);\n        return (i + 1) | 0;\n    }, 0, xs, ys);\n}\nexport function tryLast(xs) {\n    const e = ofSeq(xs);\n    try {\n        const loop = (acc_mut) => {\n            loop: while (true) {\n                const acc = acc_mut;\n                if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                    return acc;\n                }\n                else {\n                    acc_mut = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                    continue loop;\n                }\n                break;\n            }\n        };\n        return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(loop(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : void 0;\n    }\n    finally {\n        disposeSafe(e);\n    }\n}\nexport function last(xs) {\n    const matchValue = tryLast(xs);\n    if (matchValue == null) {\n        throw new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"source\");\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\nexport function length(xs) {\n    if (isArrayLike(xs)) {\n        const a = xs;\n        return a.length | 0;\n    }\n    else if (xs instanceof FSharpList) {\n        return length_1(xs) | 0;\n    }\n    else {\n        const e = ofSeq(xs);\n        try {\n            let count = 0;\n            while (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                count = ((count + 1) | 0);\n            }\n            return count | 0;\n        }\n        finally {\n            disposeSafe(e);\n        }\n    }\n}\nexport function map(mapping, xs) {\n    return generate(() => ofSeq(xs), (e) => (e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(mapping(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : void 0), (e_1) => {\n        disposeSafe(e_1);\n    });\n}\nexport function mapIndexed(mapping, xs) {\n    return generateIndexed(() => ofSeq(xs), (i, e) => (e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(mapping(i, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : void 0), (e_1) => {\n        disposeSafe(e_1);\n    });\n}\nexport function indexed(xs) {\n    return mapIndexed((i, x) => [i, x], xs);\n}\nexport function map2(mapping, xs, ys) {\n    return generate(() => [ofSeq(xs), ofSeq(ys)], (tupledArg) => {\n        const e1 = tupledArg[0];\n        const e2 = tupledArg[1];\n        return (e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(mapping(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : void 0;\n    }, (tupledArg_1) => {\n        try {\n            disposeSafe(tupledArg_1[0]);\n        }\n        finally {\n            disposeSafe(tupledArg_1[1]);\n        }\n    });\n}\nexport function mapIndexed2(mapping, xs, ys) {\n    return generateIndexed(() => [ofSeq(xs), ofSeq(ys)], (i, tupledArg) => {\n        const e1 = tupledArg[0];\n        const e2 = tupledArg[1];\n        return (e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(mapping(i, e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : void 0;\n    }, (tupledArg_1) => {\n        try {\n            disposeSafe(tupledArg_1[0]);\n        }\n        finally {\n            disposeSafe(tupledArg_1[1]);\n        }\n    });\n}\nexport function map3(mapping, xs, ys, zs) {\n    return generate(() => [ofSeq(xs), ofSeq(ys), ofSeq(zs)], (tupledArg) => {\n        const e1 = tupledArg[0];\n        const e2 = tupledArg[1];\n        const e3 = tupledArg[2];\n        return ((e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) && e3[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(mapping(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e3[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : void 0;\n    }, (tupledArg_1) => {\n        try {\n            disposeSafe(tupledArg_1[0]);\n        }\n        finally {\n            try {\n                disposeSafe(tupledArg_1[1]);\n            }\n            finally {\n                disposeSafe(tupledArg_1[2]);\n            }\n        }\n    });\n}\nexport function readOnly(xs) {\n    checkNonNull(\"source\", xs);\n    return map((x) => x, xs);\n}\nexport class CachedSeq$1 {\n    constructor(cleanup, res) {\n        this.cleanup = cleanup;\n        this.res = res;\n    }\n    Dispose() {\n        const _ = this;\n        _.cleanup();\n    }\n    GetEnumerator() {\n        const _ = this;\n        return getEnumerator(_.res);\n    }\n    [Symbol.iterator]() {\n        return toIterator(getEnumerator(this));\n    }\n    \"System.Collections.IEnumerable.GetEnumerator\"() {\n        const _ = this;\n        return getEnumerator(_.res);\n    }\n}\nexport function CachedSeq$1_$reflection(gen0) {\n    return class_type(\"SeqModule.CachedSeq`1\", [gen0], CachedSeq$1);\n}\nexport function CachedSeq$1_$ctor_Z7A8347D4(cleanup, res) {\n    return new CachedSeq$1(cleanup, res);\n}\nexport function CachedSeq$1__Clear(_) {\n    _.cleanup();\n}\nexport function cache(source) {\n    checkNonNull(\"source\", source);\n    const prefix = [];\n    let enumeratorR = void 0;\n    return CachedSeq$1_$ctor_Z7A8347D4(() => {\n        Operators_Lock(prefix, () => {\n            clear(prefix);\n            let matchResult, e;\n            if (enumeratorR != null) {\n                if (value_1(enumeratorR) != null) {\n                    matchResult = 0;\n                    e = value_1(value_1(enumeratorR));\n                }\n                else {\n                    matchResult = 1;\n                }\n            }\n            else {\n                matchResult = 1;\n            }\n            switch (matchResult) {\n                case 0: {\n                    disposeSafe(e);\n                    break;\n                }\n            }\n            enumeratorR = void 0;\n        });\n    }, unfold((i_1) => Operators_Lock(prefix, () => {\n        if (i_1 < prefix.length) {\n            return [prefix[i_1], i_1 + 1];\n        }\n        else {\n            if (i_1 >= prefix.length) {\n                let optEnumerator_2;\n                if (enumeratorR != null) {\n                    optEnumerator_2 = value_1(enumeratorR);\n                }\n                else {\n                    const optEnumerator = getEnumerator(source);\n                    enumeratorR = some(optEnumerator);\n                    optEnumerator_2 = optEnumerator;\n                }\n                if (optEnumerator_2 == null) {\n                }\n                else {\n                    const enumerator = value_1(optEnumerator_2);\n                    if (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                        void (prefix.push(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()));\n                    }\n                    else {\n                        disposeSafe(enumerator);\n                        enumeratorR = some(void 0);\n                    }\n                }\n            }\n            if (i_1 < prefix.length) {\n                return [prefix[i_1], i_1 + 1];\n            }\n            else {\n                return void 0;\n            }\n        }\n    }), 0));\n}\nexport function allPairs(xs, ys) {\n    const ysCache = cache(ys);\n    return delay(() => concat(map((x) => map((y) => [x, y], ysCache), xs)));\n}\nexport function mapFold(mapping, state, xs) {\n    const patternInput = mapFold_1(mapping, state, toArray(xs));\n    return [readOnly(patternInput[0]), patternInput[1]];\n}\nexport function mapFoldBack(mapping, xs, state) {\n    const patternInput = mapFoldBack_1(mapping, toArray(xs), state);\n    return [readOnly(patternInput[0]), patternInput[1]];\n}\nexport function tryPick(chooser, xs) {\n    const e = ofSeq(xs);\n    try {\n        let res = void 0;\n        while ((res == null) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            res = chooser(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n        }\n        return res;\n    }\n    finally {\n        disposeSafe(e);\n    }\n}\nexport function pick(chooser, xs) {\n    const matchValue = tryPick(chooser, xs);\n    if (matchValue == null) {\n        return indexNotFound();\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\nexport function reduce(folder, xs) {\n    const e = ofSeq(xs);\n    try {\n        const loop = (acc_mut) => {\n            loop: while (true) {\n                const acc = acc_mut;\n                if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                    acc_mut = folder(acc, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n                    continue loop;\n                }\n                else {\n                    return acc;\n                }\n                break;\n            }\n        };\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            return loop(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n        }\n        else {\n            throw new Error(SR_inputSequenceEmpty);\n        }\n    }\n    finally {\n        disposeSafe(e);\n    }\n}\nexport function reduceBack(folder, xs) {\n    const arr = toArray(xs);\n    if (arr.length > 0) {\n        return arr.reduceRight(folder);\n    }\n    else {\n        throw new Error(SR_inputSequenceEmpty);\n    }\n}\nexport function replicate(n, x) {\n    return initialize(n, (_arg) => x);\n}\nexport function reverse(xs) {\n    return delay(() => ofArray(reverse_1(toArray(xs))));\n}\nexport function scan(folder, state, xs) {\n    return delay(() => {\n        let acc = state;\n        return concat([singleton(state), map((x) => {\n                acc = folder(acc, x);\n                return acc;\n            }, xs)]);\n    });\n}\nexport function scanBack(folder, xs, state) {\n    return delay(() => ofArray(scanBack_1(folder, toArray(xs), state)));\n}\nexport function skip(count, source) {\n    return mkSeq(() => {\n        const e = ofSeq(source);\n        try {\n            for (let _ = 1; _ <= count; _++) {\n                if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                    throw new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"source\");\n                }\n            }\n            return Enumerator_enumerateThenFinally(() => {\n            }, e);\n        }\n        catch (matchValue) {\n            disposeSafe(e);\n            throw matchValue;\n        }\n    });\n}\nexport function skipWhile(predicate, xs) {\n    return delay(() => {\n        let skipped = true;\n        return filter((x) => {\n            if (skipped) {\n                skipped = predicate(x);\n            }\n            return !skipped;\n        }, xs);\n    });\n}\nexport function tail(xs) {\n    return skip(1, xs);\n}\nexport function take(count, xs) {\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\n        if (i < count) {\n            if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n            }\n            else {\n                throw new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"source\");\n            }\n        }\n        else {\n            return void 0;\n        }\n    }, (e_1) => {\n        disposeSafe(e_1);\n    });\n}\nexport function takeWhile(predicate, xs) {\n    return generate(() => ofSeq(xs), (e) => ((e[\"System.Collections.IEnumerator.MoveNext\"]() && predicate(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : void 0), (e_1) => {\n        disposeSafe(e_1);\n    });\n}\nexport function truncate(count, xs) {\n    return generateIndexed(() => ofSeq(xs), (i, e) => (((i < count) && e[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : void 0), (e_1) => {\n        disposeSafe(e_1);\n    });\n}\nexport function zip(xs, ys) {\n    return map2((x, y) => [x, y], xs, ys);\n}\nexport function zip3(xs, ys, zs) {\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\n}\nexport function collect(mapping, xs) {\n    return delay(() => concat(map(mapping, xs)));\n}\nexport function where(predicate, xs) {\n    return filter(predicate, xs);\n}\nexport function pairwise(xs) {\n    return delay(() => ofArray(pairwise_1(toArray(xs))));\n}\nexport function splitInto(chunks, xs) {\n    return delay(() => ofArray(splitInto_1(chunks, toArray(xs))));\n}\nexport function windowed(windowSize, xs) {\n    return delay(() => ofArray(windowed_1(windowSize, toArray(xs))));\n}\nexport function transpose(xss) {\n    return delay(() => ofArray(map_1(ofArray, transpose_1(map_1(toArray, toArray(xss))))));\n}\nexport function sortWith(comparer, xs) {\n    return delay(() => {\n        const arr = toArray(xs);\n        arr.sort(comparer);\n        return ofArray(arr);\n    });\n}\nexport function sort(xs, comparer) {\n    return sortWith((x, y) => comparer.Compare(x, y), xs);\n}\nexport function sortBy(projection, xs, comparer) {\n    return sortWith((x, y) => comparer.Compare(projection(x), projection(y)), xs);\n}\nexport function sortDescending(xs, comparer) {\n    return sortWith((x, y) => (comparer.Compare(x, y) * -1), xs);\n}\nexport function sortByDescending(projection, xs, comparer) {\n    return sortWith((x, y) => (comparer.Compare(projection(x), projection(y)) * -1), xs);\n}\nexport function sum(xs, adder) {\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\n}\nexport function sumBy(f, xs, adder) {\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\n}\nexport function maxBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\n}\nexport function max(xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\n}\nexport function minBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\n}\nexport function min(xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\n}\nexport function average(xs, averager) {\n    let count = 0;\n    const total = fold((acc, x) => {\n        count = ((count + 1) | 0);\n        return averager.Add(acc, x);\n    }, averager.GetZero(), xs);\n    if (count === 0) {\n        throw new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\");\n    }\n    else {\n        return averager.DivideByInt(total, count);\n    }\n}\nexport function averageBy(f, xs, averager) {\n    let count = 0;\n    const total = fold((acc, x) => {\n        count = ((count + 1) | 0);\n        return averager.Add(acc, f(x));\n    }, averager.GetZero(), xs);\n    if (count === 0) {\n        throw new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\");\n    }\n    else {\n        return averager.DivideByInt(total, count);\n    }\n}\nexport function permute(f, xs) {\n    return delay(() => ofArray(permute_1(f, toArray(xs))));\n}\nexport function chunkBySize(chunkSize, xs) {\n    return delay(() => ofArray(chunkBySize_1(chunkSize, toArray(xs))));\n}\nexport function insertAt(index, y, xs) {\n    let isDone = false;\n    if (index < 0) {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n    }\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\n        if ((isDone ? true : (i < index)) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n        }\n        else if (i === index) {\n            isDone = true;\n            return some(y);\n        }\n        else {\n            if (!isDone) {\n                throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n            }\n            return void 0;\n        }\n    }, (e_1) => {\n        disposeSafe(e_1);\n    });\n}\nexport function insertManyAt(index, ys, xs) {\n    let status = -1;\n    if (index < 0) {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n    }\n    return generateIndexed(() => [ofSeq(xs), ofSeq(ys)], (i, tupledArg) => {\n        const e1 = tupledArg[0];\n        const e2 = tupledArg[1];\n        if (i === index) {\n            status = 0;\n        }\n        let inserted;\n        if (status === 0) {\n            if (e2[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                inserted = some(e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n            }\n            else {\n                status = 1;\n                inserted = void 0;\n            }\n        }\n        else {\n            inserted = void 0;\n        }\n        if (inserted == null) {\n            if (e1[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                return some(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n            }\n            else {\n                if (status < 1) {\n                    throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n                }\n                return void 0;\n            }\n        }\n        else {\n            return some(value_1(inserted));\n        }\n    }, (tupledArg_1) => {\n        disposeSafe(tupledArg_1[0]);\n        disposeSafe(tupledArg_1[1]);\n    });\n}\nexport function removeAt(index, xs) {\n    let isDone = false;\n    if (index < 0) {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n    }\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\n        if ((isDone ? true : (i < index)) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n        }\n        else if ((i === index) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            isDone = true;\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : void 0;\n        }\n        else {\n            if (!isDone) {\n                throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n            }\n            return void 0;\n        }\n    }, (e_1) => {\n        disposeSafe(e_1);\n    });\n}\nexport function removeManyAt(index, count, xs) {\n    if (index < 0) {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n    }\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\n        if (i < index) {\n            if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n            }\n            else {\n                throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n            }\n        }\n        else {\n            if (i === index) {\n                for (let _ = 1; _ <= count; _++) {\n                    if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"count\");\n                    }\n                }\n            }\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : void 0;\n        }\n    }, (e_1) => {\n        disposeSafe(e_1);\n    });\n}\nexport function updateAt(index, y, xs) {\n    let isDone = false;\n    if (index < 0) {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n    }\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\n        if ((isDone ? true : (i < index)) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n        }\n        else if ((i === index) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            isDone = true;\n            return some(y);\n        }\n        else {\n            if (!isDone) {\n                throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n            }\n            return void 0;\n        }\n    }, (e_1) => {\n        disposeSafe(e_1);\n    });\n}\n","import { disposeSafe, defaultOf, structuralHash, equals } from \"./Util.js\";\nimport { HashIdentity_Structural, ComparisonIdentity_Structural } from \"./FSharp.Collections.js\";\nimport { StringBuilder__Append_Z721C83C5 } from \"./System.Text.js\";\nexport const LanguagePrimitives_GenericEqualityComparer = {\n    \"System.Collections.IEqualityComparer.Equals541DA560\"(x, y) {\n        return equals(x, y);\n    },\n    \"System.Collections.IEqualityComparer.GetHashCode4E60E31B\"(x_1) {\n        return structuralHash(x_1);\n    },\n};\nexport const LanguagePrimitives_GenericEqualityERComparer = {\n    \"System.Collections.IEqualityComparer.Equals541DA560\"(x, y) {\n        return equals(x, y);\n    },\n    \"System.Collections.IEqualityComparer.GetHashCode4E60E31B\"(x_1) {\n        return structuralHash(x_1);\n    },\n};\nexport function LanguagePrimitives_FastGenericComparer() {\n    return ComparisonIdentity_Structural();\n}\nexport function LanguagePrimitives_FastGenericComparerFromTable() {\n    return ComparisonIdentity_Structural();\n}\nexport function LanguagePrimitives_FastGenericEqualityComparer() {\n    return HashIdentity_Structural();\n}\nexport function LanguagePrimitives_FastGenericEqualityComparerFromTable() {\n    return HashIdentity_Structural();\n}\nexport function Operators_Failure(message) {\n    return new Error(message);\n}\nexport function Operators_FailurePattern(exn) {\n    return exn.message;\n}\nexport function Operators_NullArg(x) {\n    throw new Error(x);\n}\nexport function Operators_Using(resource, action) {\n    try {\n        return action(resource);\n    }\n    finally {\n        if (equals(resource, defaultOf())) {\n        }\n        else {\n            let copyOfStruct = resource;\n            disposeSafe(copyOfStruct);\n        }\n    }\n}\nexport function Operators_Lock(_lockObj, action) {\n    return action();\n}\nexport function ExtraTopLevelOperators_LazyPattern(input) {\n    return input.Value;\n}\nexport function PrintfModule_PrintFormatToStringBuilderThen(continuation, builder, format) {\n    return format.cont((s) => {\n        StringBuilder__Append_Z721C83C5(builder, s);\n        return continuation();\n    });\n}\nexport function PrintfModule_PrintFormatToStringBuilder(builder, format) {\n    return PrintfModule_PrintFormatToStringBuilderThen(() => {\n    }, builder, format);\n}\n","import { compare } from \"./Util.js\";\nimport { unfold, delay } from \"./Seq.js\";\nimport { toUInt64, toInt64, op_Addition, fromZero } from \"./BigInt.js\";\nimport { op_Addition as op_Addition_1, fromParts } from \"./Decimal.js\";\nexport function makeRangeStepFunction(step, stop, zero, add) {\n    const stepComparedWithZero = compare(step, zero) | 0;\n    if (stepComparedWithZero === 0) {\n        throw new Error(\"The step of a range cannot be zero\");\n    }\n    const stepGreaterThanZero = stepComparedWithZero > 0;\n    return (x) => {\n        const comparedWithLast = compare(x, stop) | 0;\n        return ((stepGreaterThanZero && (comparedWithLast <= 0)) ? true : (!stepGreaterThanZero && (comparedWithLast >= 0))) ? [x, add(x, step)] : void 0;\n    };\n}\nexport function integralRangeStep(start, step, stop, zero, add) {\n    const stepFn = makeRangeStepFunction(step, stop, zero, add);\n    return delay(() => unfold(stepFn, start));\n}\nexport function rangeBigInt(start, step, stop) {\n    return integralRangeStep(start, step, stop, fromZero(), op_Addition);\n}\nexport function rangeDecimal(start, step, stop) {\n    return integralRangeStep(start, step, stop, fromParts(0, 0, 0, false, 0), op_Addition_1);\n}\nexport function rangeDouble(start, step, stop) {\n    return integralRangeStep(start, step, stop, 0, (x, y) => (x + y));\n}\nexport function rangeInt64(start, step, stop) {\n    return integralRangeStep(start, step, stop, 0n, (x, y) => toInt64(op_Addition(x, y)));\n}\nexport function rangeUInt64(start, step, stop) {\n    return integralRangeStep(start, step, stop, 0n, (x, y) => toUInt64(op_Addition(x, y)));\n}\nexport function rangeChar(start, stop) {\n    const intStop = stop.charCodeAt(0) | 0;\n    return delay(() => unfold((c) => {\n        if (c <= intStop) {\n            return [String.fromCharCode(c), c + 1];\n        }\n        else {\n            return void 0;\n        }\n    }, start.charCodeAt(0)));\n}\n","namespace Elmish\nopen System\n\n[<Struct>]\ntype internal RingState<'item> =\n    | Writable of wx:'item array * ix:int\n    | ReadWritable of rw:'item array * wix:int * rix:int\n\ntype internal RingBuffer<'item>(size) =\n    let doubleSize ix (items: 'item array) =\n        seq { yield! items |> Seq.skip ix\n              yield! items |> Seq.take ix\n              for _ in 0..items.Length do\n                yield Unchecked.defaultof<'item> }\n        |> Array.ofSeq\n\n    let mutable state : 'item RingState =\n        Writable (Array.zeroCreate (max size 10), 0)\n\n    member __.Pop() =\n        match state with\n        | ReadWritable (items, wix, rix) ->\n            let rix' = (rix + 1) % items.Length\n            match rix' = wix with\n            | true -> \n                state <- Writable(items, wix)\n            | _ ->\n                state <- ReadWritable(items, wix, rix')\n            Some items.[rix]\n        | _ ->\n            None\n\n    member __.Push (item:'item) =\n        match state with\n        | Writable (items, ix) ->\n            items.[ix] <- item\n            let wix = (ix + 1) % items.Length\n            state <- ReadWritable(items, wix, ix)\n        | ReadWritable (items, wix, rix) ->\n            items.[wix] <- item\n            let wix' = (wix + 1) % items.Length\n            match wix' = rix with\n            | true -> \n                state <- ReadWritable(items |> doubleSize rix, items.Length, 0)\n            | _ -> \n                state <- ReadWritable(items, wix', rix)","(**\nProgram\n---------\nCore abstractions for creating and running the dispatch loop.\n\n*)\n\nnamespace Elmish\n\n\n/// Program type captures various aspects of program behavior\ntype Program<'arg, 'model, 'msg, 'view> = private {\n    init : 'arg -> 'model * Cmd<'msg>\n    update : 'msg -> 'model -> 'model * Cmd<'msg>\n    subscribe : 'model -> Cmd<'msg>\n    view : 'model -> Dispatch<'msg> -> 'view\n    setState : 'model -> Dispatch<'msg> -> unit\n    onError : (string*exn) -> unit\n    syncDispatch: Dispatch<'msg> -> Dispatch<'msg>\n}\n\n/// Program module - functions to manipulate program instances\n[<RequireQualifiedAccess>]\n[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]\nmodule Program =\n    /// Typical program, new commands are produced by `init` and `update` along with the new state.\n    let mkProgram \n        (init : 'arg -> 'model * Cmd<'msg>) \n        (update : 'msg -> 'model -> 'model * Cmd<'msg>)\n        (view : 'model -> Dispatch<'msg> -> 'view) =\n        { init = init\n          update = update\n          view = view\n          setState = fun model -> view model >> ignore\n          subscribe = fun _ -> Cmd.none\n          onError = Log.onError\n          syncDispatch = id }\n\n    /// Simple program that produces only new state with `init` and `update`.\n    let mkSimple \n        (init : 'arg -> 'model) \n        (update : 'msg -> 'model -> 'model)\n        (view : 'model -> Dispatch<'msg> -> 'view) =\n        { init = init >> fun state -> state,Cmd.none\n          update = fun msg -> update msg >> fun state -> state,Cmd.none\n          view = view\n          setState = fun model -> view model >> ignore\n          subscribe = fun _ -> Cmd.none\n          onError = Log.onError\n          syncDispatch = id }\n\n    /// Subscribe to external source of events.\n    /// The subscription is called once - with the initial model, but can dispatch new messages at any time.\n    let withSubscription (subscribe : 'model -> Cmd<'msg>) (program: Program<'arg, 'model, 'msg, 'view>) =\n        let sub model =\n            Cmd.batch [ program.subscribe model\n                        subscribe model ]\n        { program with subscribe = sub }\n\n    /// Trace all the updates to the console\n    let withConsoleTrace (program: Program<'arg, 'model, 'msg, 'view>) =\n        let traceInit (arg:'arg) =\n            let initModel,cmd = program.init arg\n            Log.toConsole (\"Initial state:\", initModel)\n            initModel,cmd\n\n        let traceUpdate msg model =\n            Log.toConsole (\"New message:\", msg)\n            let newModel,cmd = program.update msg model\n            Log.toConsole (\"Updated state:\", newModel)\n            newModel,cmd\n\n        { program with\n            init = traceInit \n            update = traceUpdate }\n\n    /// Trace all the messages as they update the model\n    let withTrace trace (program: Program<'arg, 'model, 'msg, 'view>) =\n        let update msg model =\n            let state,cmd = program.update msg model\n            trace msg state\n            state,cmd\n        { program\n            with update = update }\n\n    /// Handle dispatch loop exceptions\n    let withErrorHandler onError (program: Program<'arg, 'model, 'msg, 'view>) =\n        { program\n            with onError = onError }\n\n    /// For library authors only: map existing error handler and return new `Program` \n    let mapErrorHandler map (program: Program<'arg, 'model, 'msg, 'view>) =\n        { program\n            with onError = map program.onError }\n\n    /// For library authors only: get the current error handler \n    let onError (program: Program<'arg, 'model, 'msg, 'view>) =\n        program.onError\n\n    /// For library authors only: function to render the view with the latest state \n    let withSetState (setState:'model -> Dispatch<'msg> -> unit)\n                     (program: Program<'arg, 'model, 'msg, 'view>) =        \n        { program\n            with setState = setState }\n\n    /// For library authors only: return the function to render the state \n    let setState (program: Program<'arg, 'model, 'msg, 'view>) =        \n        program.setState\n\n    /// For library authors only: return the view function \n    let view (program: Program<'arg, 'model, 'msg, 'view>) =        \n        program.view\n\n    /// For library authors only: function to synchronize the dispatch function\n    let withSyncDispatch (syncDispatch:Dispatch<'msg> -> Dispatch<'msg>)\n                         (program: Program<'arg, 'model, 'msg, 'view>) =        \n        { program\n            with syncDispatch = syncDispatch }\n\n    /// For library authors only: map the program type\n    let map mapInit mapUpdate mapView mapSetState mapSubscribe\n            (program: Program<'arg, 'model, 'msg, 'view>) =\n        { init = mapInit program.init\n          update = mapUpdate program.update\n          view = mapView program.view\n          setState = mapSetState program.setState\n          subscribe = mapSubscribe program.subscribe\n          onError = program.onError\n          syncDispatch = id }\n\n    /// Start the program loop.\n    /// arg: argument to pass to the init() function.\n    /// program: program created with 'mkSimple' or 'mkProgram'.\n    let runWith (arg: 'arg) (program: Program<'arg, 'model, 'msg, 'view>) =\n        let (model,cmd) = program.init arg\n        let rb = RingBuffer 10\n        let mutable reentered = false\n        let mutable state = model        \n        let rec dispatch msg = \n            if reentered then\n                rb.Push msg\n            else\n                reentered <- true\n                let mutable nextMsg = Some msg\n                while Option.isSome nextMsg do\n                    let msg = nextMsg.Value\n                    try\n                        let (model',cmd') = program.update msg state\n                        program.setState model' syncDispatch\n                        cmd' |> Cmd.exec (fun ex -> program.onError (sprintf \"Error in command while handling: %A\" msg, ex)) syncDispatch\n                        state <- model'\n                    with ex ->\n                        program.onError (sprintf \"Unable to process the message: %A\" msg, ex)\n                    nextMsg <- rb.Pop()\n                reentered <- false\n        and syncDispatch = program.syncDispatch dispatch            \n\n        program.setState model syncDispatch\n        let sub = \n            try \n                program.subscribe model \n            with ex ->\n                program.onError (\"Unable to subscribe:\", ex)\n                Cmd.none\n        Cmd.batch [sub; cmd]\n        |> Cmd.exec (fun ex -> program.onError (\"Error intitializing:\", ex)) syncDispatch\n\n    /// Start the dispatch loop with `unit` for the init() function.\n    let run (program: Program<unit, 'model, 'msg, 'view>) = runWith () program\n","namespace Elmish.React\n\nopen Fable.React\nopen Elmish\n\ntype LazyProps<'model> = {\n    model:'model\n    render:unit->ReactElement\n    equal:'model->'model->bool\n}\n\nmodule Components =\n    type LazyView<'model>(props) =\n        inherit Component<LazyProps<'model>,obj>(props)\n\n        override this.shouldComponentUpdate(nextProps, _nextState) =\n            not <| this.props.equal this.props.model nextProps.model\n\n        override this.render () =\n            this.props.render ()\n\n[<AutoOpen>]\nmodule Common =\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function to compare the previous and the new states\n    /// view: function to render the model\n    /// state: new state to render\n    let lazyViewWith (equal:'model->'model->bool)\n                     (view:'model->ReactElement)\n                     (state:'model) =\n        ofType<Components.LazyView<_>,_,_>\n            { render = fun () -> view state\n              equal = equal\n              model = state }\n            []\n\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function to compare the previous and the new states\n    /// view: function to render the model using the dispatch\n    /// state: new state to render\n    /// dispatch: dispatch function\n    let lazyView2With (equal:'model->'model->bool)\n                      (view:'model->'msg Dispatch->ReactElement)\n                      (state:'model)\n                      (dispatch:'msg Dispatch) =\n        ofType<Components.LazyView<_>,_,_>\n            { render = fun () -> view state dispatch\n              equal = equal\n              model = state }\n            []\n\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function to compare the previous and the new model (a tuple of two states)\n    /// view: function to render the model using the dispatch\n    /// state1: new state to render\n    /// state2: new state to render\n    /// dispatch: dispatch function\n    let lazyView3With (equal:_->_->bool) (view:_->_->_->ReactElement) state1 state2 (dispatch:'msg Dispatch) =\n        ofType<Components.LazyView<_>,_,_>\n            { render = fun () -> view state1 state2 dispatch\n              equal = equal\n              model = (state1,state2) }\n            []\n\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of model to render the view\n    let lazyView (view:'model->ReactElement) =\n        lazyViewWith (=) view\n\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of two arguments to render the model using the dispatch\n    let lazyView2 (view:'model->'msg Dispatch->ReactElement) =\n        lazyView2With (=) view\n\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of three arguments to render the model using the dispatch\n    let lazyView3 (view:_->_->_->ReactElement) =\n        lazyView3With (=) view\n\n\n","import { Record, Union } from \"./Types.js\";\nimport { combineHashCodes, equalArraysWith, stringHash } from \"./Util.js\";\nimport Decimal from \"./Decimal.js\";\nexport class CaseInfo {\n    constructor(declaringType, tag, name, fields) {\n        this.declaringType = declaringType;\n        this.tag = tag;\n        this.name = name;\n        this.fields = fields;\n    }\n}\nexport class MethodInfo {\n    constructor(name, parameters, returnType) {\n        this.name = name;\n        this.parameters = parameters;\n        this.returnType = returnType;\n    }\n}\nexport class TypeInfo {\n    constructor(fullname, generics, construct, parent, fields, cases, enumCases) {\n        this.fullname = fullname;\n        this.generics = generics;\n        this.construct = construct;\n        this.parent = parent;\n        this.fields = fields;\n        this.cases = cases;\n        this.enumCases = enumCases;\n    }\n    toString() {\n        return fullName(this);\n    }\n    GetHashCode() {\n        return getHashCode(this);\n    }\n    Equals(other) {\n        return equals(this, other);\n    }\n}\nexport class GenericParameter extends TypeInfo {\n    constructor(name) {\n        super(name);\n    }\n}\nexport function getGenerics(t) {\n    return t.generics != null ? t.generics : [];\n}\nexport function getHashCode(t) {\n    const fullnameHash = stringHash(t.fullname);\n    const genHashes = getGenerics(t).map(getHashCode);\n    return combineHashCodes([fullnameHash, ...genHashes]);\n}\nexport function equals(t1, t2) {\n    if (t1.fullname === \"\") { // Anonymous records\n        return t2.fullname === \"\"\n            && equalArraysWith(getRecordElements(t1), getRecordElements(t2), ([k1, v1], [k2, v2]) => k1 === k2 && equals(v1, v2));\n    }\n    else {\n        return t1.fullname === t2.fullname\n            && equalArraysWith(getGenerics(t1), getGenerics(t2), equals);\n    }\n}\nexport function class_type(fullname, generics, construct, parent) {\n    return new TypeInfo(fullname, generics, construct, parent);\n}\nexport function record_type(fullname, generics, construct, fields) {\n    return new TypeInfo(fullname, generics, construct, undefined, fields);\n}\nexport function anonRecord_type(...fields) {\n    return new TypeInfo(\"\", undefined, undefined, undefined, () => fields);\n}\nexport function union_type(fullname, generics, construct, cases) {\n    const t = new TypeInfo(fullname, generics, construct, undefined, undefined, () => {\n        const caseNames = construct.prototype.cases();\n        return cases().map((fields, i) => new CaseInfo(t, i, caseNames[i], fields));\n    });\n    return t;\n}\nexport function tuple_type(...generics) {\n    return new TypeInfo(\"System.Tuple`\" + generics.length, generics);\n}\nexport function delegate_type(...generics) {\n    return new TypeInfo(\"System.Func`\" + generics.length, generics);\n}\nexport function lambda_type(argType, returnType) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpFunc`2\", [argType, returnType]);\n}\nexport function option_type(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpOption`1\", [generic]);\n}\nexport function list_type(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Collections.FSharpList`1\", [generic]);\n}\nexport function array_type(generic) {\n    return new TypeInfo(\"[]\", [generic]);\n}\nexport function enum_type(fullname, underlyingType, enumCases) {\n    return new TypeInfo(fullname, [underlyingType], undefined, undefined, undefined, undefined, enumCases);\n}\nexport function measure_type(fullname) {\n    return new TypeInfo(fullname);\n}\nexport function generic_type(name) {\n    return new GenericParameter(name);\n}\nexport const obj_type = new TypeInfo(\"System.Object\");\nexport const unit_type = new TypeInfo(\"Microsoft.FSharp.Core.Unit\");\nexport const char_type = new TypeInfo(\"System.Char\");\nexport const string_type = new TypeInfo(\"System.String\");\nexport const bool_type = new TypeInfo(\"System.Boolean\");\nexport const int8_type = new TypeInfo(\"System.SByte\");\nexport const uint8_type = new TypeInfo(\"System.Byte\");\nexport const int16_type = new TypeInfo(\"System.Int16\");\nexport const uint16_type = new TypeInfo(\"System.UInt16\");\nexport const int32_type = new TypeInfo(\"System.Int32\");\nexport const uint32_type = new TypeInfo(\"System.UInt32\");\nexport const int64_type = new TypeInfo(\"System.Int64\");\nexport const uint64_type = new TypeInfo(\"System.UInt64\");\nexport const int128_type = new TypeInfo(\"System.Int128\");\nexport const uint128_type = new TypeInfo(\"System.UInt128\");\nexport const nativeint_type = new TypeInfo(\"System.IntPtr\");\nexport const unativeint_type = new TypeInfo(\"System.UIntPtr\");\nexport const float16_type = new TypeInfo(\"System.Half\");\nexport const float32_type = new TypeInfo(\"System.Single\");\nexport const float64_type = new TypeInfo(\"System.Double\");\nexport const decimal_type = new TypeInfo(\"System.Decimal\");\nexport const bigint_type = new TypeInfo(\"System.Numerics.BigInteger\");\nexport function name(info) {\n    if (Array.isArray(info)) {\n        return info[0];\n    }\n    else if (info instanceof TypeInfo) {\n        const elemType = getElementType(info);\n        if (elemType != null) {\n            return name(elemType) + \"[]\";\n        }\n        else {\n            const i = info.fullname.lastIndexOf(\".\");\n            return i === -1 ? info.fullname : info.fullname.substr(i + 1);\n        }\n    }\n    else {\n        return info.name;\n    }\n}\nexport function fullName(t) {\n    const elemType = getElementType(t);\n    if (elemType != null) {\n        return fullName(elemType) + \"[]\";\n    }\n    else if (t.generics == null || t.generics.length === 0) {\n        return t.fullname;\n    }\n    else {\n        return t.fullname + \"[\" + t.generics.map((x) => fullName(x)).join(\",\") + \"]\";\n    }\n}\nexport function namespace(t) {\n    const elemType = getElementType(t);\n    if (elemType != null) {\n        return namespace(elemType);\n    }\n    else {\n        const i = t.fullname.lastIndexOf(\".\");\n        return i === -1 ? \"\" : t.fullname.substr(0, i);\n    }\n}\nexport function isArray(t) {\n    return getElementType(t) != null;\n}\nexport function getElementType(t) {\n    return t.fullname === \"[]\" && t.generics?.length === 1 ? t.generics[0] : undefined;\n}\nexport function isGenericType(t) {\n    return t.generics != null && t.generics.length > 0;\n}\nexport function isGenericParameter(t) {\n    return t instanceof GenericParameter;\n}\nexport function isEnum(t) {\n    return t.enumCases != null && t.enumCases.length > 0;\n}\nexport function isSubclassOf(t1, t2) {\n    return (t2.fullname === obj_type.fullname) || (t1.parent != null && (t1.parent.Equals(t2) || isSubclassOf(t1.parent, t2)));\n}\nfunction isErasedToNumber(t) {\n    return isEnum(t) || [\n        int8_type.fullname,\n        uint8_type.fullname,\n        int16_type.fullname,\n        uint16_type.fullname,\n        int32_type.fullname,\n        uint32_type.fullname,\n        float16_type.fullname,\n        float32_type.fullname,\n        float64_type.fullname,\n    ].includes(t.fullname);\n}\nfunction isErasedToBigInt(t) {\n    return isEnum(t) || [\n        int64_type.fullname,\n        uint64_type.fullname,\n        int128_type.fullname,\n        uint128_type.fullname,\n        nativeint_type.fullname,\n        unativeint_type.fullname,\n        bigint_type.fullname,\n    ].includes(t.fullname);\n}\nexport function isInstanceOfType(t, o) {\n    if (t.fullname === obj_type.fullname)\n        return true;\n    switch (typeof o) {\n        case \"boolean\":\n            return t.fullname === bool_type.fullname;\n        case \"string\":\n            return t.fullname === string_type.fullname;\n        case \"function\":\n            return isFunction(t);\n        case \"number\":\n            return isErasedToNumber(t);\n        case \"bigint\":\n            return isErasedToBigInt(t);\n        default:\n            return t.construct != null && o instanceof t.construct;\n    }\n}\n/**\n * This doesn't replace types for fields (records) or cases (unions)\n * but it should be enough for type comparison purposes\n */\nexport function getGenericTypeDefinition(t) {\n    return t.generics == null ? t : new TypeInfo(t.fullname, t.generics.map(() => obj_type));\n}\nexport function getEnumUnderlyingType(t) {\n    return t.generics?.[0];\n}\nexport function getEnumValues(t) {\n    if (isEnum(t) && t.enumCases != null) {\n        return t.enumCases.map((kv) => kv[1]);\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nexport function getEnumNames(t) {\n    if (isEnum(t) && t.enumCases != null) {\n        return t.enumCases.map((kv) => kv[0]);\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nfunction getEnumCase(t, v) {\n    if (t.enumCases != null) {\n        if (typeof v === \"string\") {\n            for (const kv of t.enumCases) {\n                if (kv[0] === v) {\n                    return kv;\n                }\n            }\n            throw new Error(`'${v}' was not found in ${t.fullname}`);\n        }\n        else {\n            for (const kv of t.enumCases) {\n                if (kv[1] === v) {\n                    return kv;\n                }\n            }\n            // .NET returns the number even if it doesn't match any of the cases\n            return [\"\", v];\n        }\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nexport function parseEnum(t, str) {\n    // TODO: better int parsing here, parseInt ceils floats: \"4.8\" -> 4\n    const value = parseInt(str, 10);\n    return getEnumCase(t, isNaN(value) ? str : value)[1];\n}\nexport function tryParseEnum(t, str, defValue) {\n    try {\n        defValue.contents = parseEnum(t, str);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nexport function getEnumName(t, v) {\n    return getEnumCase(t, v)[0];\n}\nexport function isEnumDefined(t, v) {\n    try {\n        const kv = getEnumCase(t, v);\n        return kv[0] != null && kv[0] !== \"\";\n    }\n    catch {\n        // supress error\n    }\n    return false;\n}\n// FSharpType\nexport function getUnionCases(t) {\n    if (t.cases != null) {\n        return t.cases();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# union type`);\n    }\n}\nexport function getRecordElements(t) {\n    if (t.fields != null) {\n        return t.fields();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# record type`);\n    }\n}\nexport function getTupleElements(t) {\n    if (isTuple(t) && t.generics != null) {\n        return t.generics;\n    }\n    else {\n        throw new Error(`${t.fullname} is not a tuple type`);\n    }\n}\nexport function getFunctionElements(t) {\n    if (isFunction(t) && t.generics != null) {\n        const gen = t.generics;\n        return [gen[0], gen[1]];\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# function type`);\n    }\n}\nexport function isUnion(t) {\n    return t instanceof TypeInfo ? t.cases != null : t instanceof Union;\n}\nexport function isRecord(t) {\n    return t instanceof TypeInfo ? t.fields != null : t instanceof Record;\n}\nexport function isTuple(t) {\n    return t.fullname.startsWith(\"System.Tuple\");\n}\n// In .NET this is false for delegates\nexport function isFunction(t) {\n    return t.fullname === \"Microsoft.FSharp.Core.FSharpFunc`2\";\n}\n// FSharpValue\nexport function getUnionFields(v, t) {\n    const cases = getUnionCases(t);\n    const case_ = cases[v.tag];\n    if (case_ == null) {\n        throw new Error(`Cannot find case ${v.name} in union type`);\n    }\n    return [case_, v.fields];\n}\nexport function getUnionCaseFields(uci) {\n    return uci.fields == null ? [] : uci.fields;\n}\n// This is used as replacement of `FSharpValue.GetRecordFields`\n// For `FSharpTypes.GetRecordFields` see `getRecordElements`\n// Object.keys returns keys in the order they were added to the object\nexport function getRecordFields(v) {\n    return Object.keys(v).map((k) => v[k]);\n}\nexport function getRecordField(v, field) {\n    return v[field[0]];\n}\nexport function getTupleFields(v) {\n    return v;\n}\nexport function getTupleField(v, i) {\n    return v[i];\n}\nexport function makeUnion(uci, values) {\n    const expectedLength = (uci.fields || []).length;\n    if (values.length !== expectedLength) {\n        throw new Error(`Expected an array of length ${expectedLength} but got ${values.length}`);\n    }\n    const construct = uci.declaringType.construct;\n    if (construct == null) {\n        return {};\n    }\n    const isSingleCase = uci.declaringType.cases ? uci.declaringType.cases().length == 1 : false;\n    if (isSingleCase) {\n        return new construct(...values);\n    }\n    else {\n        return new construct(uci.tag, values);\n    }\n}\nexport function makeRecord(t, values) {\n    const fields = getRecordElements(t);\n    if (fields.length !== values.length) {\n        throw new Error(`Expected an array of length ${fields.length} but got ${values.length}`);\n    }\n    return t.construct != null\n        ? new t.construct(...values)\n        : fields.reduce((obj, [key, _t], i) => {\n            obj[key] = values[i];\n            return obj;\n        }, {});\n}\nexport function makeTuple(values, _t) {\n    return values;\n}\nexport function makeGenericType(t, generics) {\n    return new TypeInfo(t.fullname, generics, t.construct, t.parent, t.fields, t.cases);\n}\nexport function createInstance(t, consArgs) {\n    // TODO: Check if consArgs length is same as t.construct?\n    // (Arg types can still be different)\n    if (typeof t.construct === \"function\") {\n        return new t.construct(...(consArgs ?? []));\n    }\n    else if (isErasedToNumber(t)) {\n        return 0;\n    }\n    else if (isErasedToBigInt(t)) {\n        return 0n;\n    }\n    else {\n        switch (t.fullname) {\n            case obj_type.fullname:\n                return {};\n            case bool_type.fullname:\n                return false;\n            case decimal_type.fullname:\n                return new Decimal(0);\n            case char_type.fullname:\n                // Even though char is a value type, it's erased to string, and Unchecked.defaultof<char> is null\n                return null;\n            default:\n                throw new Error(`Cannot access constructor of ${t.fullname}`);\n        }\n    }\n}\nexport function getValue(propertyInfo, v) {\n    return v[propertyInfo[0]];\n}\n// Fable.Core.Reflection\nfunction assertUnion(x) {\n    if (!(x instanceof Union)) {\n        throw new Error(`Value is not an F# union type`);\n    }\n}\nexport function getCaseTag(x) {\n    assertUnion(x);\n    return x.tag;\n}\nexport function getCaseName(x) {\n    assertUnion(x);\n    return x.cases()[x.tag];\n}\nexport function getCaseFields(x) {\n    assertUnion(x);\n    return x.fields;\n}\n","module BrowserStorage\r\n\r\nopen Fable.Import\r\nopen CodeHelpers.FableHelpers\r\nopen Fable.Core\r\n\r\nmodule internal Impl =\r\n    let localStorage = Browser.Dom.self.localStorage\r\n\r\nopen Impl\r\ntype Internal =\r\n    // let private localStorage = Browser.Dom.self.localStorage\r\n    // let private json = Fable.Core.JS.JSON\r\n    static member inline TryGet<'t when 't : equality > (key) : 't option =\r\n        localStorage.getItem key\r\n        |> Option.ofObj\r\n        |> Option.bind (fun x ->\r\n                // printfn \"Found %s -> %s\" key s\r\n                let result:'t option =\r\n                    // Thoth.Json.Decode.Auto.fromString s\r\n                    Resolver.Deserialize(x)\r\n                    // json.parse(s)\r\n                    // |> unbox\r\n                result\r\n            )\r\n\r\n    static member inline TrySave (key:string, valueOpt: 't option) : Result<unit,string> =\r\n        printfn \"trying to save\"\r\n        try\r\n            // let pojo = Fable.Core.JsInterop.toPlainJsObj value\r\n            let serial =\r\n                match valueOpt with\r\n                | Some (value: 't) ->\r\n                    let stringy = Resolver.Serialize(value)\r\n                    stringy\r\n                | None -> null\r\n            // let serial = json.Resolver.serialize pojo\r\n            printfn \"Saving to key %s\" key\r\n\r\n            localStorage.setItem(key,serial)\r\n            // printfn \"Saved -> %s\" serial\r\n            Ok ()\r\n        with ex ->\r\n            toGlobal \"self\" Browser.Dom.self\r\n            Error(ex.Message)\r\n\r\n// assumes we never want to clear a key entirely\r\ntype StorageAccess<'t when 't : equality >(name) =\r\n    static member CreateStorage (name) = StorageAccess(name)\r\n    member inline _.Get() =  Internal.TryGet<'t>(name)\r\n    member inline _.Save(x:'t option) = Internal.TrySave (name,x)\r\n\r\n// perf? -> in the interest of not writing a singleton or enforcing one, we'll fetch from localstorage on each operation\r\ntype LookupStorage<'tvalue when 'tvalue : equality >(key) =\r\n    let storage : StorageAccess<(string*'tvalue)[]> = StorageAccess.CreateStorage key\r\n    do\r\n        toGlobal (sprintf \"storage_%s\" key) storage\r\n\r\n    member inline __.Get():Map<string,'tvalue>=\r\n        storage.Get()\r\n        |> Option.defaultValue Array.empty\r\n        |> Map.ofArray\r\n\r\n    member inline __.ToGlobal() =\r\n        storage.Get()\r\n        |> toGlobal (sprintf \"%sMap\" key)\r\n\r\n    member inline x.TryFind key: 'tvalue option =\r\n        x.Get()\r\n        |> Map.tryFind key\r\n\r\n    member inline x.Save(key,value) =\r\n        x.Get()\r\n        |> Map.add key value\r\n        |> Map.toArray\r\n        |> Some\r\n        |> storage.Save\r\n\r\n    member inline x.Remove key =\r\n        x.Get()\r\n        |> Map.remove key\r\n        |> Map.toArray\r\n        |> Some\r\n        |> storage.Save\r\n\r\ntype IStorageAccess =\r\n    abstract member Create<'t when 't : equality> : key:string -> StorageAccess<'t>\r\n","import { Union } from \"./Types.js\";\nimport { union_type } from \"./Reflection.js\";\nimport { some } from \"./Option.js\";\nexport function FSharpResult$2_Ok(ResultValue) {\n    return new FSharpResult$2(0, [ResultValue]);\n}\nexport function FSharpResult$2_Error(ErrorValue) {\n    return new FSharpResult$2(1, [ErrorValue]);\n}\nexport class FSharpResult$2 extends Union {\n    constructor(tag, fields) {\n        super();\n        this.tag = tag;\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Ok\", \"Error\"];\n    }\n}\nexport function FSharpResult$2_$reflection(gen0, gen1) {\n    return union_type(\"FSharp.Core.FSharpResult`2\", [gen0, gen1], FSharpResult$2, () => [[[\"ResultValue\", gen0]], [[\"ErrorValue\", gen1]]]);\n}\nexport function Result_Map(mapping, result) {\n    if (result.tag === /* Ok */ 0) {\n        return FSharpResult$2_Ok(mapping(result.fields[0]));\n    }\n    else {\n        return FSharpResult$2_Error(result.fields[0]);\n    }\n}\nexport function Result_MapError(mapping, result) {\n    if (result.tag === /* Ok */ 0) {\n        return FSharpResult$2_Ok(result.fields[0]);\n    }\n    else {\n        return FSharpResult$2_Error(mapping(result.fields[0]));\n    }\n}\nexport function Result_Bind(binder, result) {\n    if (result.tag === /* Ok */ 0) {\n        return binder(result.fields[0]);\n    }\n    else {\n        return FSharpResult$2_Error(result.fields[0]);\n    }\n}\nexport function FSharpChoice$2_Choice1Of2(Item) {\n    return new FSharpChoice$2(0, [Item]);\n}\nexport function FSharpChoice$2_Choice2Of2(Item) {\n    return new FSharpChoice$2(1, [Item]);\n}\nexport class FSharpChoice$2 extends Union {\n    constructor(tag, fields) {\n        super();\n        this.tag = tag;\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of2\", \"Choice2Of2\"];\n    }\n}\nexport function FSharpChoice$2_$reflection(gen0, gen1) {\n    return union_type(\"FSharp.Core.FSharpChoice`2\", [gen0, gen1], FSharpChoice$2, () => [[[\"Item\", gen0]], [[\"Item\", gen1]]]);\n}\nexport function FSharpChoice$3_Choice1Of3(Item) {\n    return new FSharpChoice$3(0, [Item]);\n}\nexport function FSharpChoice$3_Choice2Of3(Item) {\n    return new FSharpChoice$3(1, [Item]);\n}\nexport function FSharpChoice$3_Choice3Of3(Item) {\n    return new FSharpChoice$3(2, [Item]);\n}\nexport class FSharpChoice$3 extends Union {\n    constructor(tag, fields) {\n        super();\n        this.tag = tag;\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of3\", \"Choice2Of3\", \"Choice3Of3\"];\n    }\n}\nexport function FSharpChoice$3_$reflection(gen0, gen1, gen2) {\n    return union_type(\"FSharp.Core.FSharpChoice`3\", [gen0, gen1, gen2], FSharpChoice$3, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]]]);\n}\nexport function FSharpChoice$4_Choice1Of4(Item) {\n    return new FSharpChoice$4(0, [Item]);\n}\nexport function FSharpChoice$4_Choice2Of4(Item) {\n    return new FSharpChoice$4(1, [Item]);\n}\nexport function FSharpChoice$4_Choice3Of4(Item) {\n    return new FSharpChoice$4(2, [Item]);\n}\nexport function FSharpChoice$4_Choice4Of4(Item) {\n    return new FSharpChoice$4(3, [Item]);\n}\nexport class FSharpChoice$4 extends Union {\n    constructor(tag, fields) {\n        super();\n        this.tag = tag;\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of4\", \"Choice2Of4\", \"Choice3Of4\", \"Choice4Of4\"];\n    }\n}\nexport function FSharpChoice$4_$reflection(gen0, gen1, gen2, gen3) {\n    return union_type(\"FSharp.Core.FSharpChoice`4\", [gen0, gen1, gen2, gen3], FSharpChoice$4, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]]]);\n}\nexport function FSharpChoice$5_Choice1Of5(Item) {\n    return new FSharpChoice$5(0, [Item]);\n}\nexport function FSharpChoice$5_Choice2Of5(Item) {\n    return new FSharpChoice$5(1, [Item]);\n}\nexport function FSharpChoice$5_Choice3Of5(Item) {\n    return new FSharpChoice$5(2, [Item]);\n}\nexport function FSharpChoice$5_Choice4Of5(Item) {\n    return new FSharpChoice$5(3, [Item]);\n}\nexport function FSharpChoice$5_Choice5Of5(Item) {\n    return new FSharpChoice$5(4, [Item]);\n}\nexport class FSharpChoice$5 extends Union {\n    constructor(tag, fields) {\n        super();\n        this.tag = tag;\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of5\", \"Choice2Of5\", \"Choice3Of5\", \"Choice4Of5\", \"Choice5Of5\"];\n    }\n}\nexport function FSharpChoice$5_$reflection(gen0, gen1, gen2, gen3, gen4) {\n    return union_type(\"FSharp.Core.FSharpChoice`5\", [gen0, gen1, gen2, gen3, gen4], FSharpChoice$5, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]]]);\n}\nexport function FSharpChoice$6_Choice1Of6(Item) {\n    return new FSharpChoice$6(0, [Item]);\n}\nexport function FSharpChoice$6_Choice2Of6(Item) {\n    return new FSharpChoice$6(1, [Item]);\n}\nexport function FSharpChoice$6_Choice3Of6(Item) {\n    return new FSharpChoice$6(2, [Item]);\n}\nexport function FSharpChoice$6_Choice4Of6(Item) {\n    return new FSharpChoice$6(3, [Item]);\n}\nexport function FSharpChoice$6_Choice5Of6(Item) {\n    return new FSharpChoice$6(4, [Item]);\n}\nexport function FSharpChoice$6_Choice6Of6(Item) {\n    return new FSharpChoice$6(5, [Item]);\n}\nexport class FSharpChoice$6 extends Union {\n    constructor(tag, fields) {\n        super();\n        this.tag = tag;\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of6\", \"Choice2Of6\", \"Choice3Of6\", \"Choice4Of6\", \"Choice5Of6\", \"Choice6Of6\"];\n    }\n}\nexport function FSharpChoice$6_$reflection(gen0, gen1, gen2, gen3, gen4, gen5) {\n    return union_type(\"FSharp.Core.FSharpChoice`6\", [gen0, gen1, gen2, gen3, gen4, gen5], FSharpChoice$6, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]], [[\"Item\", gen5]]]);\n}\nexport function FSharpChoice$7_Choice1Of7(Item) {\n    return new FSharpChoice$7(0, [Item]);\n}\nexport function FSharpChoice$7_Choice2Of7(Item) {\n    return new FSharpChoice$7(1, [Item]);\n}\nexport function FSharpChoice$7_Choice3Of7(Item) {\n    return new FSharpChoice$7(2, [Item]);\n}\nexport function FSharpChoice$7_Choice4Of7(Item) {\n    return new FSharpChoice$7(3, [Item]);\n}\nexport function FSharpChoice$7_Choice5Of7(Item) {\n    return new FSharpChoice$7(4, [Item]);\n}\nexport function FSharpChoice$7_Choice6Of7(Item) {\n    return new FSharpChoice$7(5, [Item]);\n}\nexport function FSharpChoice$7_Choice7Of7(Item) {\n    return new FSharpChoice$7(6, [Item]);\n}\nexport class FSharpChoice$7 extends Union {\n    constructor(tag, fields) {\n        super();\n        this.tag = tag;\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of7\", \"Choice2Of7\", \"Choice3Of7\", \"Choice4Of7\", \"Choice5Of7\", \"Choice6Of7\", \"Choice7Of7\"];\n    }\n}\nexport function FSharpChoice$7_$reflection(gen0, gen1, gen2, gen3, gen4, gen5, gen6) {\n    return union_type(\"FSharp.Core.FSharpChoice`7\", [gen0, gen1, gen2, gen3, gen4, gen5, gen6], FSharpChoice$7, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]], [[\"Item\", gen5]], [[\"Item\", gen6]]]);\n}\nexport function Choice_makeChoice1Of2(x) {\n    return FSharpChoice$2_Choice1Of2(x);\n}\nexport function Choice_makeChoice2Of2(x) {\n    return FSharpChoice$2_Choice2Of2(x);\n}\nexport function Choice_tryValueIfChoice1Of2(x) {\n    if (x.tag === /* Choice1Of2 */ 0) {\n        return some(x.fields[0]);\n    }\n    else {\n        return void 0;\n    }\n}\nexport function Choice_tryValueIfChoice2Of2(x) {\n    if (x.tag === /* Choice2Of2 */ 1) {\n        return some(x.fields[0]);\n    }\n    else {\n        return void 0;\n    }\n}\n","namespace Thoth.Json\nopen System.Text.RegularExpressions\n\ntype JsonValue = obj\n\ntype ErrorReason =\n    | BadPrimitive of string * JsonValue\n    | BadPrimitiveExtra of string * JsonValue * string\n    | BadType of string * JsonValue\n    | BadField of string * JsonValue\n    | BadPath of string * JsonValue * string\n    | TooSmallArray of string * JsonValue\n    | FailMessage of string\n    | BadOneOf of string list\n\ntype CaseStrategy =\n    | PascalCase\n    | CamelCase\n    | SnakeCase\n\ntype DecoderError = string * ErrorReason\n\ntype Decoder<'T> = string -> JsonValue -> Result<'T, DecoderError>\n\ntype Encoder<'T> = 'T -> JsonValue\n\ntype BoxedDecoder = Decoder<obj>\n\ntype BoxedEncoder = Encoder<obj>\n\ntype ExtraCoders =\n    { Hash: string\n      Coders: Map<string, BoxedEncoder * BoxedDecoder> }\n\nmodule internal Util =\n    open System.Collections.Generic\n\n    type Cache<'Value>() =\n        let cache = Dictionary<string, 'Value>()\n        member __.GetOrAdd(key, factory) =\n            match cache.TryGetValue(key) with\n            | true, x -> x\n            | false, _ ->\n                let x = factory()\n                cache.Add(key, x)\n                x\n\n    // Tree shaking will remove this if not used\n    // so no need to make them lazy in Fable\n    let CachedEncoders = Cache<BoxedEncoder>()\n    let CachedDecoders = Cache<BoxedDecoder>()\n\n    module Casing =\n        let lowerFirst (str : string) = str.[..0].ToLowerInvariant() + str.[1..]\n        let convert caseStrategy fieldName =\n            match caseStrategy with\n            | CamelCase -> lowerFirst fieldName\n            | SnakeCase -> Regex.Replace(lowerFirst fieldName, \"[A-Z]\",\"_$0\").ToLowerInvariant()\n            | PascalCase -> fieldName","import { trim } from \"./String.js\";\n// RFC 4122 compliant. From https://stackoverflow.com/a/13653180/3922220\n// const guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/;\n// Relax GUID parsing, see #1637\nconst guidRegex = /^[\\(\\{]{0,2}[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}[\\)\\}]{0,2}$/;\nconst guidRegexNoHyphen = /^([0-9a-f]{8})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{12})$/;\nconst guidRegexHex = /^\\{0x[0-9a-f]{8},(0x[0-9a-f]{4},){2}\\{(0x[0-9a-f]{2},){7}0x[0-9a-f]{2}\\}\\}$/;\nconst guidHexCaptures = /^([0-9a-f]{8})-(([0-9a-f]{4})-)(([0-9a-f]{4})-)([0-9a-f]{2})([0-9a-f]{2})-([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/;\nexport function toString(str, format, _provider) {\n    if (format && format?.length > 0) {\n        switch (format) {\n            case \"N\":\n                return str.replace(/-/g, '');\n            case \"D\":\n                return str;\n            case \"B\":\n                return \"{\" + str + \"}\";\n            case \"P\":\n                return \"(\" + str + \")\";\n            case \"X\":\n                return str.replace(guidHexCaptures, \"{0x$1,0x$3,0x$5,{0x$6,0x$7,0x$8,0x$9,0x$10,0x$11,0x$12,0x$13}}\");\n            default:\n                throw new Error(\"Unrecognized Guid print format\");\n        }\n    }\n    else {\n        return str;\n    }\n}\n/** Validates UUID as specified in RFC4122 (versions 1-5). */\nexport function parse(str) {\n    function hyphenateGuid(str) {\n        return str.replace(guidRegexNoHyphen, \"$1-$2-$3-$4-$5\");\n    }\n    const wsTrimAndLowered = str.trim().toLowerCase();\n    if (guidRegex.test(wsTrimAndLowered)) {\n        return trim(wsTrimAndLowered, \"{\", \"}\", \"(\", \")\");\n    }\n    else if (guidRegexNoHyphen.test(wsTrimAndLowered)) {\n        return hyphenateGuid(wsTrimAndLowered);\n    }\n    else if (guidRegexHex.test(wsTrimAndLowered)) {\n        return hyphenateGuid(wsTrimAndLowered.replace(/[\\{\\},]|0x/g, ''));\n    }\n    else {\n        throw new Error(\"Guid should contain 32 digits with 4 dashes: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\");\n    }\n}\nexport function tryParse(str, defValue) {\n    try {\n        defValue.contents = parse(str);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\n// From https://gist.github.com/LeverOne/1308368\nexport function newGuid() {\n    let b = \"\";\n    for (let a = 0; a++ < 36;) {\n        b += a * 51 & 52\n            ? (a ^ 15 ? 8 ^ Math.random() * (a ^ 20 ? 16 : 4) : 4).toString(16)\n            : \"-\";\n    }\n    return b;\n}\n// Maps for number <-> hex string conversion\nlet _convertMapsInitialized = false;\nlet _byteToHex;\nlet _hexToByte;\nfunction initConvertMaps() {\n    _byteToHex = new Array(256);\n    _hexToByte = {};\n    for (let i = 0; i < 256; i++) {\n        _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n        _hexToByte[_byteToHex[i]] = i;\n    }\n    _convertMapsInitialized = true;\n}\n/** Parse a UUID into it's component bytes */\n// Adapted from https://github.com/zefferus/uuid-parse\nexport function guidToArray(s) {\n    if (!_convertMapsInitialized) {\n        initConvertMaps();\n    }\n    let i = 0;\n    const buf = new Uint8Array(16);\n    s.toLowerCase().replace(/[0-9a-f]{2}/g, ((oct) => {\n        switch (i) {\n            // .NET saves first three byte groups with different endianness\n            // See https://stackoverflow.com/a/16722909/3922220\n            case 0:\n            case 1:\n            case 2:\n            case 3:\n                buf[3 - i++] = _hexToByte[oct];\n                break;\n            case 4:\n            case 5:\n                buf[9 - i++] = _hexToByte[oct];\n                break;\n            case 6:\n            case 7:\n                buf[13 - i++] = _hexToByte[oct];\n                break;\n            case 8:\n            case 9:\n            case 10:\n            case 11:\n            case 12:\n            case 13:\n            case 14:\n            case 15:\n                buf[i++] = _hexToByte[oct];\n                break;\n        }\n    }));\n    // Zero out remaining bytes if string was short\n    while (i < 16) {\n        buf[i++] = 0;\n    }\n    return buf;\n}\n/** Convert UUID byte array into a string */\nexport function arrayToGuid(buf) {\n    if (buf.length !== 16) {\n        throw new Error(\"Byte array for GUID must be exactly 16 bytes long\");\n    }\n    if (!_convertMapsInitialized) {\n        initConvertMaps();\n    }\n    const guid = _byteToHex[buf[3]] + _byteToHex[buf[2]] +\n        _byteToHex[buf[1]] + _byteToHex[buf[0]] + \"-\" +\n        _byteToHex[buf[5]] + _byteToHex[buf[4]] + \"-\" +\n        _byteToHex[buf[7]] + _byteToHex[buf[6]] + \"-\" +\n        _byteToHex[buf[8]] + _byteToHex[buf[9]] + \"-\" +\n        _byteToHex[buf[10]] + _byteToHex[buf[11]] +\n        _byteToHex[buf[12]] + _byteToHex[buf[13]] +\n        _byteToHex[buf[14]] + _byteToHex[buf[15]];\n    return guid;\n}\n","export var NumberStyles;\n(function (NumberStyles) {\n    // None = 0x00000000,\n    // AllowLeadingWhite = 0x00000001,\n    // AllowTrailingWhite = 0x00000002,\n    // AllowLeadingSign = 0x00000004,\n    // AllowTrailingSign = 0x00000008,\n    // AllowParentheses = 0x00000010,\n    // AllowDecimalPoint = 0x00000020,\n    // AllowThousands = 0x00000040,\n    // AllowExponent = 0x00000080,\n    // AllowCurrencySymbol = 0x00000100,\n    NumberStyles[NumberStyles[\"AllowHexSpecifier\"] = 512] = \"AllowHexSpecifier\";\n    // Integer = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign,\n    // HexNumber = AllowLeadingWhite | AllowTrailingWhite | AllowHexSpecifier,\n    // Number = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //          AllowTrailingSign | AllowDecimalPoint | AllowThousands,\n    // Float = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //         AllowDecimalPoint | AllowExponent,\n    // Currency = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //            AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol,\n    // Any = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //       AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol | AllowExponent,\n})(NumberStyles || (NumberStyles = {}));\nfunction validResponse(regexMatch, radix) {\n    const [/*all*/ , sign, prefix, digits] = regexMatch;\n    return {\n        sign: sign || \"\",\n        prefix: prefix || \"\",\n        digits,\n        radix,\n    };\n}\nfunction getRange(unsigned, bitsize) {\n    switch (bitsize) {\n        case 8: return unsigned ? [0, 255] : [-128, 127];\n        case 16: return unsigned ? [0, 65535] : [-32768, 32767];\n        case 32: return unsigned ? [0, 4294967295] : [-2147483648, 2147483647];\n        default: throw new Error(\"Invalid bit size.\");\n    }\n}\nfunction getInvalidDigits(radix) {\n    switch (radix) {\n        case 2: return /[^0-1]/;\n        case 8: return /[^0-7]/;\n        case 10: return /[^0-9]/;\n        case 16: return /[^0-9a-fA-F]/;\n        default:\n            throw new Error(\"Invalid Base.\");\n    }\n}\nexport function getPrefix(radix) {\n    switch (radix) {\n        case 2: return \"0b\";\n        case 8: return \"0o\";\n        case 10: return \"\";\n        case 16: return \"0x\";\n        default: return \"\";\n    }\n}\nexport function getRadix(prefix, style) {\n    if (style & NumberStyles.AllowHexSpecifier) {\n        return 16;\n    }\n    else {\n        switch (prefix) {\n            case \"0b\":\n            case \"0B\": return 2;\n            case \"0o\":\n            case \"0O\": return 8;\n            case \"0x\":\n            case \"0X\": return 16;\n            default: return 10;\n        }\n    }\n}\nexport function isValid(str, style, radix) {\n    const integerRegex = /^\\s*([\\+\\-])?(0[xXoObB])?([0-9a-fA-F]+)\\s*$/;\n    const res = integerRegex.exec(str.replace(/_/g, \"\"));\n    if (res != null) {\n        const [/*all*/ , /*sign*/ , prefix, digits] = res;\n        radix = radix || getRadix(prefix, style);\n        const invalidDigits = getInvalidDigits(radix);\n        if (!invalidDigits.test(digits)) {\n            return validResponse(res, radix);\n        }\n    }\n    return null;\n}\nexport function parse(str, style, unsigned, bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        let v = Number.parseInt(res.sign + res.digits, res.radix);\n        if (!Number.isNaN(v)) {\n            const [umin, umax] = getRange(true, bitsize);\n            if (!unsigned && res.radix !== 10 && v >= umin && v <= umax) {\n                v = v << (32 - bitsize) >> (32 - bitsize);\n            }\n            const [min, max] = getRange(unsigned, bitsize);\n            if (v >= min && v <= max) {\n                return v;\n            }\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize, defValue) {\n    try {\n        defValue.contents = parse(str, style, unsigned, bitsize);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nexport function op_UnaryNegation_Int8(x) {\n    return x === -128 ? x : -x;\n}\nexport function op_UnaryNegation_Int16(x) {\n    return x === -32768 ? x : -x;\n}\nexport function op_UnaryNegation_Int32(x) {\n    return x === -2147483648 ? x : -x;\n}\nexport function divRem(x, y, out) {\n    const div = ~~(x / y);\n    const rem = x % y;\n    if (out === void 0) {\n        return [div, rem];\n    }\n    else {\n        out.contents = rem;\n        return div;\n    }\n}\n","/**\n * DateTimeOffset functions.\n *\n * Note: DateOffset instances are always DateObjects in local\n * timezone (because JS dates are all kinds of messed up).\n * A local date returns UTC epoch when `.getTime()` is called.\n *\n * However, this means that in order to construct an UTC date\n * from a DateOffset with offset of +5 hours, you first need\n * to subtract those 5 hours, than add the \"local\" offset.\n * As said, all kinds of messed up.\n *\n * Basically; invariant: date.getTime() always return UTC time.\n */\nimport { fromFloat64, toFloat64 } from \"./BigInt.js\";\nimport DateTime, { create as createDate, dateOffsetToString, daysInMonth, parseRaw, ticksToUnixEpochMilliseconds, unixEpochMillisecondsToTicks } from \"./Date.js\";\nimport { compareDates, padWithZeros } from \"./Util.js\";\nexport default function DateTimeOffset(value, offset) {\n    checkOffsetInRange(offset);\n    const d = new Date(value);\n    d.offset = offset != null ? offset : new Date().getTimezoneOffset() * -60000;\n    return d;\n}\nexport function offset(value) {\n    return value.offset || 0;\n}\nfunction checkOffsetInRange(offset) {\n    if (offset != null && offset !== 0) {\n        if (offset % 60000 !== 0) {\n            throw new Error(\"Offset must be specified in whole minutes.\");\n        }\n        if (Math.abs(offset / 3600000) > 14) {\n            throw new Error(\"Offset must be within plus or minus 14 hours.\");\n        }\n    }\n}\nexport function fromDate(date, offset) {\n    let offset2 = 0;\n    switch (date.kind) {\n        case 1 /* DateKind.UTC */:\n            if (offset != null && offset !== 0) {\n                throw new Error(\"The UTC Offset for Utc DateTime instances must be 0.\");\n            }\n            offset2 = 0;\n            break;\n        case 2 /* DateKind.Local */:\n            offset2 = date.getTimezoneOffset() * -60000;\n            if (offset != null && offset !== offset2) {\n                throw new Error(\"The UTC Offset of the local dateTime parameter does not match the offset argument.\");\n            }\n            break;\n        case 0 /* DateKind.Unspecified */:\n        default:\n            if (offset == null) {\n                offset2 = date.getTimezoneOffset() * -60000;\n            }\n            else {\n                offset2 = offset;\n            }\n            break;\n    }\n    return DateTimeOffset(date.getTime(), offset2);\n}\nexport function fromTicks(ticks, offset) {\n    const ms = ticksToUnixEpochMilliseconds(ticks) - offset;\n    return DateTimeOffset(ms, offset);\n}\nexport function fromUnixTimeMilliseconds(ms) {\n    return DateTimeOffset(toFloat64(ms), 0);\n}\nexport function fromUnixTimeSeconds(seconds) {\n    return DateTimeOffset(toFloat64(seconds * 1000n), 0);\n}\nexport function getUtcTicks(date) {\n    return unixEpochMillisecondsToTicks(date.getTime(), 0);\n}\nexport function minValue() {\n    // This is \"0001-01-01T00:00:00.000Z\", actual JS min value is -8640000000000000\n    return DateTimeOffset(-62135596800000, 0);\n}\nexport function maxValue() {\n    // This is \"9999-12-31T23:59:59.999Z\", actual JS max value is 8640000000000000\n    return DateTimeOffset(253402300799999, 0);\n}\nexport function parse(str) {\n    const [date, offsetMatch] = parseRaw(str);\n    const offset = offsetMatch == null\n        ? date.getTimezoneOffset() * -60000\n        : (offsetMatch === \"Z\" ? 0 : offsetMatch * 60000);\n    return DateTimeOffset(date.getTime(), offset);\n}\nexport function tryParse(v, defValue) {\n    try {\n        defValue.contents = parse(v);\n        return true;\n    }\n    catch (_err) {\n        return false;\n    }\n}\nexport function create(year, month, day, h, m, s, ms, offset) {\n    if (offset == null) {\n        offset = ms;\n        ms = 0;\n    }\n    checkOffsetInRange(offset);\n    let date;\n    if (offset === 0) {\n        date = new Date(Date.UTC(year, month - 1, day, h, m, s, ms));\n        if (year <= 99) {\n            date.setUTCFullYear(year, month - 1, day);\n        }\n    }\n    else {\n        const str = padWithZeros(year, 4) + \"-\" +\n            padWithZeros(month, 2) + \"-\" +\n            padWithZeros(day, 2) + \"T\" +\n            padWithZeros(h, 2) + \":\" +\n            padWithZeros(m, 2) + \":\" +\n            padWithZeros(s, 2) + \".\" +\n            padWithZeros(ms, 3) +\n            dateOffsetToString(offset);\n        date = new Date(str);\n    }\n    const dateValue = date.getTime();\n    if (isNaN(dateValue)) {\n        throw new Error(\"The parameters describe an unrepresentable Date\");\n    }\n    return DateTimeOffset(dateValue, offset);\n}\nexport function now() {\n    const date = new Date();\n    const offset = date.getTimezoneOffset() * -60000;\n    return DateTimeOffset(date.getTime(), offset);\n}\nexport function utcNow() {\n    const date = now();\n    return DateTimeOffset(date.getTime(), 0);\n}\nexport function toUniversalTime(date) {\n    return DateTime(date.getTime(), 1 /* DateKind.UTC */);\n}\nexport function toLocalTime(date) {\n    return DateTime(date.getTime(), 2 /* DateKind.Local */);\n}\nexport function timeOfDay(d) {\n    const d2 = new Date(d.getTime() + (d.offset ?? 0));\n    return d2.getUTCHours() * 3600000\n        + d2.getUTCMinutes() * 60000\n        + d2.getUTCSeconds() * 1000\n        + d2.getUTCMilliseconds();\n}\nexport function date(d) {\n    const d2 = new Date(d.getTime() + (d.offset ?? 0));\n    return createDate(d2.getUTCFullYear(), d2.getUTCMonth() + 1, d2.getUTCDate(), 0, 0, 0, 0);\n}\nexport function day(d) {\n    return new Date(d.getTime() + (d.offset ?? 0)).getUTCDate();\n}\nexport function hour(d) {\n    return new Date(d.getTime() + (d.offset ?? 0)).getUTCHours();\n}\nexport function millisecond(d) {\n    return new Date(d.getTime() + (d.offset ?? 0)).getUTCMilliseconds();\n}\nexport function minute(d) {\n    return new Date(d.getTime() + (d.offset ?? 0)).getUTCMinutes();\n}\nexport function month(d) {\n    return new Date(d.getTime() + (d.offset ?? 0)).getUTCMonth() + 1;\n}\nexport function second(d) {\n    return new Date(d.getTime() + (d.offset ?? 0)).getUTCSeconds();\n}\nexport function year(d) {\n    return new Date(d.getTime() + (d.offset ?? 0)).getUTCFullYear();\n}\nexport function dayOfWeek(d) {\n    return new Date(d.getTime() + (d.offset ?? 0)).getUTCDay();\n}\nexport function dayOfYear(d) {\n    const d2 = new Date(d.getTime() + (d.offset ?? 0));\n    const _year = d2.getUTCFullYear();\n    const _month = d2.getUTCMonth() + 1;\n    let _day = d2.getUTCDate();\n    for (let i = 1; i < _month; i++) {\n        _day += daysInMonth(_year, i);\n    }\n    return _day;\n}\nexport function add(d, ts) {\n    return DateTimeOffset(d.getTime() + ts, (d.offset ?? 0));\n}\nexport function addDays(d, v) {\n    return add(d, v * 86400000);\n}\nexport function addHours(d, v) {\n    return add(d, v * 3600000);\n}\nexport function addMinutes(d, v) {\n    return add(d, v * 60000);\n}\nexport function addSeconds(d, v) {\n    return add(d, v * 1000);\n}\nexport function addMilliseconds(d, v) {\n    return add(d, v);\n}\nexport function addTicks(d, v) {\n    return add(d, toFloat64(v / 10000n));\n}\nexport function addYears(d, v) {\n    const newMonth = d.getUTCMonth() + 1;\n    const newYear = d.getUTCFullYear() + v;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, d.getUTCDate());\n    return create(newYear, newMonth, newDay, d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds(), (d.offset ?? 0));\n}\nexport function addMonths(d, v) {\n    const d2 = new Date(d.getTime() + (d.offset ?? 0));\n    let newMonth = d2.getUTCMonth() + 1 + v;\n    let newMonth_ = 0;\n    let yearOffset = 0;\n    if (newMonth > 12) {\n        newMonth_ = newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12);\n        newMonth = newMonth_;\n    }\n    else if (newMonth < 1) {\n        newMonth_ = 12 + newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12) + (newMonth_ === 12 ? -1 : 0);\n        newMonth = newMonth_;\n    }\n    const newYear = d2.getUTCFullYear() + yearOffset;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, d2.getUTCDate());\n    return create(newYear, newMonth, newDay, d2.getUTCHours(), d2.getUTCMinutes(), d2.getUTCSeconds(), d2.getUTCMilliseconds(), (d.offset ?? 0));\n}\nexport function subtract(d, that) {\n    return typeof that === \"number\"\n        ? DateTimeOffset(d.getTime() - that, (d.offset ?? 0))\n        : d.getTime() - that.getTime();\n}\nexport function equals(d1, d2) {\n    return d1.getTime() === d2.getTime();\n}\nexport function equalsExact(d1, d2) {\n    return d1.getTime() === d2.getTime() && d1.offset === d2.offset;\n}\nexport function compare(d1, d2) {\n    return compareDates(d1, d2);\n}\nexport const compareTo = compare;\nexport function op_Addition(x, y) {\n    return add(x, y);\n}\nexport function op_Subtraction(x, y) {\n    return subtract(x, y);\n}\nexport function toOffset(d, offset) {\n    return DateTimeOffset(d.getTime(), offset);\n}\nexport function toUnixTimeMilliseconds(d) {\n    return fromFloat64(d.getTime());\n}\nexport function toUnixTimeSeconds(d) {\n    return fromFloat64(d.getTime() / 1000.0);\n}\n","import { comparePrimitives, padLeftAndRightWithZeros, padWithZeros } from \"./Util.js\";\nimport { toInt64 } from \"./BigInt.js\";\n/**\n * Calls:\n * - `Math.ceil` if the `value` is **negative**\n * - `Math.floor` if the `value` is **positive**\n * @param value Value to round\n */\nfunction signedRound(value) {\n    return value < 0 ? Math.ceil(value) : Math.floor(value);\n}\nexport function create(d = 0, h = 0, m = 0, s = 0, ms = 0) {\n    switch (arguments.length) {\n        case 1:\n            // ticks\n            return fromTicks(arguments[0]);\n        case 3:\n            // h,m,s\n            d = 0, h = arguments[0], m = arguments[1], s = arguments[2], ms = 0;\n            break;\n        default:\n            // d,h,m,s,ms\n            break;\n    }\n    return d * 86400000 + h * 3600000 + m * 60000 + s * 1000 + ms;\n}\nexport function fromTicks(ticks) {\n    return Number(BigInt(ticks) / 10000n);\n}\nexport function fromDays(d) {\n    return create(d, 0, 0, 0);\n}\nexport function fromHours(h) {\n    return create(h, 0, 0);\n}\nexport function fromMinutes(m) {\n    return create(0, m, 0);\n}\nexport function fromSeconds(s) {\n    return create(0, 0, s);\n}\nexport function days(ts) {\n    return signedRound(ts / 86400000);\n}\nexport function hours(ts) {\n    return signedRound(ts % 86400000 / 3600000);\n}\nexport function minutes(ts) {\n    return signedRound(ts % 3600000 / 60000);\n}\nexport function seconds(ts) {\n    return signedRound(ts % 60000 / 1000);\n}\nexport function milliseconds(ts) {\n    return signedRound(ts % 1000);\n}\nexport function ticks(ts) {\n    return toInt64(BigInt(ts) * 10000n);\n}\nexport function totalDays(ts) {\n    return ts / 86400000;\n}\nexport function totalHours(ts) {\n    return ts / 3600000;\n}\nexport function totalMinutes(ts) {\n    return ts / 60000;\n}\nexport function totalSeconds(ts) {\n    return ts / 1000;\n}\nexport function negate(ts) {\n    return ts * -1;\n}\nexport function add(ts1, ts2) {\n    return ts1 + ts2;\n}\nexport function subtract(ts1, ts2) {\n    return ts1 - ts2;\n}\nexport function multiply(ts, factor) {\n    return ts * factor;\n}\nexport function divide(ts, b) {\n    return ts / b;\n}\nexport const op_Addition = add;\nexport const op_Subtraction = subtract;\nexport const op_Multiply = multiply;\nexport const op_Division = divide;\nexport const compare = comparePrimitives;\nexport const compareTo = comparePrimitives;\nexport function duration(x) {\n    return Math.abs(x);\n}\nexport function toString(ts, format = \"c\", _provider) {\n    if ([\"c\", \"g\", \"G\"].indexOf(format) === -1) {\n        throw new Error(\"Custom formats are not supported\");\n    }\n    const d = Math.abs(days(ts));\n    const h = Math.abs(hours(ts));\n    const m = Math.abs(minutes(ts));\n    const s = Math.abs(seconds(ts));\n    const ms = Math.abs(milliseconds(ts));\n    const sign = ts < 0 ? \"-\" : \"\";\n    return `${sign}${d === 0 && (format === \"c\" || format === \"g\") ? \"\" : format === \"c\" ? d + \".\" : d + \":\"}${format === \"g\" ? h : padWithZeros(h, 2)}:${padWithZeros(m, 2)}:${padWithZeros(s, 2)}${ms === 0 && (format === \"c\" || format === \"g\") ? \"\" : format === \"g\" ? \".\" + padWithZeros(ms, 3) : \".\" + padLeftAndRightWithZeros(ms, 3, 7)}`;\n}\nexport function parse(str) {\n    const firstDot = str.search(\"\\\\.\");\n    const firstColon = str.search(\"\\\\:\");\n    if (firstDot === -1 && firstColon === -1) { // There is only a day ex: 4\n        const d = parseInt(str, 0);\n        if (isNaN(d)) {\n            throw new Error(`String '${str}' was not recognized as a valid TimeSpan.`);\n        }\n        else {\n            return create(d, 0, 0, 0, 0);\n        }\n    }\n    if (firstColon > 0) { // process time part\n        // WIP: (-?)(((\\d+)\\.)?([0-9]|0[0-9]|1[0-9]|2[0-3]):(\\d+)(:\\d+(\\.\\d{1,7})?)?|\\d+(?:(?!\\.)))\n        const r = /^(-?)((\\d+)\\.)?(?:0*)([0-9]|0[0-9]|1[0-9]|2[0-3]):(?:0*)([0-5][0-9]|[0-9])(:(?:0*)([0-5][0-9]|[0-9]))?\\.?(\\d+)?$/.exec(str);\n        if (r != null && r[4] != null && r[5] != null) {\n            let d = 0;\n            let ms = 0;\n            let s = 0;\n            const sign = r[1] != null && r[1] === \"-\" ? -1 : 1;\n            const h = +r[4];\n            const m = +r[5];\n            if (r[3] != null) {\n                d = +r[3];\n            }\n            if (r[7] != null) {\n                s = +r[7];\n            }\n            if (r[8] != null) {\n                // Depending on the number of decimals passed, we need to adapt the numbers\n                switch (r[8].length) {\n                    case 1:\n                        ms = +r[8] * 100;\n                        break;\n                    case 2:\n                        ms = +r[8] * 10;\n                        break;\n                    case 3:\n                        ms = +r[8];\n                        break;\n                    case 4:\n                        ms = +r[8] / 10;\n                        break;\n                    case 5:\n                        ms = +r[8] / 100;\n                        break;\n                    case 6:\n                        ms = +r[8] / 1000;\n                        break;\n                    case 7:\n                        ms = +r[8] / 10000;\n                        break;\n                    default:\n                        throw new Error(`String '${str}' was not recognized as a valid TimeSpan.`);\n                }\n            }\n            return sign * create(d, h, m, s, ms);\n        }\n    }\n    throw new Error(`String '${str}' was not recognized as a valid TimeSpan.`);\n}\nexport function tryParse(v, defValue) {\n    try {\n        defValue.contents = parse(v);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\n","import { record_type, bool_type, list_type, option_type, class_type } from \"./Reflection.js\";\nimport { some, value as value_1 } from \"./Option.js\";\nimport { structuralHash, compare, toIterator, equals, disposeSafe, getEnumerator, isArrayLike } from \"./Util.js\";\nimport { singleton, ofArrayWithTail, head, tail, isEmpty as isEmpty_1, fold as fold_1, empty as empty_1, FSharpList, cons } from \"./List.js\";\nimport { map as map_2, fill } from \"./Array.js\";\nimport { Record } from \"./Types.js\";\nimport { tryPick as tryPick_1, pick as pick_1, iterate as iterate_1, compareWith, map as map_1, unfold } from \"./Seq.js\";\nimport { format, join } from \"./String.js\";\nexport class MapTreeLeaf$2 {\n    constructor(k, v) {\n        this.k = k;\n        this.v = v;\n    }\n}\nexport function MapTreeLeaf$2_$reflection(gen0, gen1) {\n    return class_type(\"Map.MapTreeLeaf`2\", [gen0, gen1], MapTreeLeaf$2);\n}\nexport function MapTreeLeaf$2_$ctor_5BDDA1(k, v) {\n    return new MapTreeLeaf$2(k, v);\n}\nexport function MapTreeLeaf$2__get_Key(_) {\n    return _.k;\n}\nexport function MapTreeLeaf$2__get_Value(_) {\n    return _.v;\n}\nexport class MapTreeNode$2 extends MapTreeLeaf$2 {\n    constructor(k, v, left, right, h) {\n        super(k, v);\n        this.left = left;\n        this.right = right;\n        this.h = (h | 0);\n    }\n}\nexport function MapTreeNode$2_$reflection(gen0, gen1) {\n    return class_type(\"Map.MapTreeNode`2\", [gen0, gen1], MapTreeNode$2, MapTreeLeaf$2_$reflection(gen0, gen1));\n}\nexport function MapTreeNode$2_$ctor_Z39DE9543(k, v, left, right, h) {\n    return new MapTreeNode$2(k, v, left, right, h);\n}\nexport function MapTreeNode$2__get_Left(_) {\n    return _.left;\n}\nexport function MapTreeNode$2__get_Right(_) {\n    return _.right;\n}\nexport function MapTreeNode$2__get_Height(_) {\n    return _.h;\n}\nexport function MapTreeModule_empty() {\n    return void 0;\n}\nexport function MapTreeModule_sizeAux(acc_mut, m_mut) {\n    MapTreeModule_sizeAux: while (true) {\n        const acc = acc_mut, m = m_mut;\n        if (m != null) {\n            const m2 = value_1(m);\n            if (m2 instanceof MapTreeNode$2) {\n                const mn = m2;\n                acc_mut = MapTreeModule_sizeAux(acc + 1, MapTreeNode$2__get_Left(mn));\n                m_mut = MapTreeNode$2__get_Right(mn);\n                continue MapTreeModule_sizeAux;\n            }\n            else {\n                return (acc + 1) | 0;\n            }\n        }\n        else {\n            return acc | 0;\n        }\n        break;\n    }\n}\nexport function MapTreeModule_size(x) {\n    return MapTreeModule_sizeAux(0, x);\n}\nexport function MapTreeModule_mk(l, k, v, r) {\n    let mn, mn_1;\n    let hl;\n    const m = l;\n    if (m != null) {\n        const m2 = value_1(m);\n        hl = ((m2 instanceof MapTreeNode$2) ? ((mn = m2, MapTreeNode$2__get_Height(mn))) : 1);\n    }\n    else {\n        hl = 0;\n    }\n    let hr;\n    const m_1 = r;\n    if (m_1 != null) {\n        const m2_1 = value_1(m_1);\n        hr = ((m2_1 instanceof MapTreeNode$2) ? ((mn_1 = m2_1, MapTreeNode$2__get_Height(mn_1))) : 1);\n    }\n    else {\n        hr = 0;\n    }\n    const m_2 = ((hl < hr) ? hr : hl) | 0;\n    if (m_2 === 0) {\n        return MapTreeLeaf$2_$ctor_5BDDA1(k, v);\n    }\n    else {\n        return MapTreeNode$2_$ctor_Z39DE9543(k, v, l, r, m_2 + 1);\n    }\n}\nexport function MapTreeModule_rebalance(t1, k, v, t2) {\n    let mn, mn_1, m_2, m2_2, mn_2, m_3, m2_3, mn_3;\n    let t1h;\n    const m = t1;\n    if (m != null) {\n        const m2 = value_1(m);\n        t1h = ((m2 instanceof MapTreeNode$2) ? ((mn = m2, MapTreeNode$2__get_Height(mn))) : 1);\n    }\n    else {\n        t1h = 0;\n    }\n    let t2h;\n    const m_1 = t2;\n    if (m_1 != null) {\n        const m2_1 = value_1(m_1);\n        t2h = ((m2_1 instanceof MapTreeNode$2) ? ((mn_1 = m2_1, MapTreeNode$2__get_Height(mn_1))) : 1);\n    }\n    else {\n        t2h = 0;\n    }\n    if (t2h > (t1h + 2)) {\n        const matchValue = value_1(t2);\n        if (matchValue instanceof MapTreeNode$2) {\n            const t2$0027 = matchValue;\n            if (((m_2 = MapTreeNode$2__get_Left(t2$0027), (m_2 != null) ? ((m2_2 = value_1(m_2), (m2_2 instanceof MapTreeNode$2) ? ((mn_2 = m2_2, MapTreeNode$2__get_Height(mn_2))) : 1)) : 0)) > (t1h + 1)) {\n                const matchValue_1 = value_1(MapTreeNode$2__get_Left(t2$0027));\n                if (matchValue_1 instanceof MapTreeNode$2) {\n                    const t2l = matchValue_1;\n                    return MapTreeModule_mk(MapTreeModule_mk(t1, k, v, MapTreeNode$2__get_Left(t2l)), MapTreeLeaf$2__get_Key(t2l), MapTreeLeaf$2__get_Value(t2l), MapTreeModule_mk(MapTreeNode$2__get_Right(t2l), MapTreeLeaf$2__get_Key(t2$0027), MapTreeLeaf$2__get_Value(t2$0027), MapTreeNode$2__get_Right(t2$0027)));\n                }\n                else {\n                    throw new Error(\"internal error: Map.rebalance\");\n                }\n            }\n            else {\n                return MapTreeModule_mk(MapTreeModule_mk(t1, k, v, MapTreeNode$2__get_Left(t2$0027)), MapTreeLeaf$2__get_Key(t2$0027), MapTreeLeaf$2__get_Value(t2$0027), MapTreeNode$2__get_Right(t2$0027));\n            }\n        }\n        else {\n            throw new Error(\"internal error: Map.rebalance\");\n        }\n    }\n    else if (t1h > (t2h + 2)) {\n        const matchValue_2 = value_1(t1);\n        if (matchValue_2 instanceof MapTreeNode$2) {\n            const t1$0027 = matchValue_2;\n            if (((m_3 = MapTreeNode$2__get_Right(t1$0027), (m_3 != null) ? ((m2_3 = value_1(m_3), (m2_3 instanceof MapTreeNode$2) ? ((mn_3 = m2_3, MapTreeNode$2__get_Height(mn_3))) : 1)) : 0)) > (t2h + 1)) {\n                const matchValue_3 = value_1(MapTreeNode$2__get_Right(t1$0027));\n                if (matchValue_3 instanceof MapTreeNode$2) {\n                    const t1r = matchValue_3;\n                    return MapTreeModule_mk(MapTreeModule_mk(MapTreeNode$2__get_Left(t1$0027), MapTreeLeaf$2__get_Key(t1$0027), MapTreeLeaf$2__get_Value(t1$0027), MapTreeNode$2__get_Left(t1r)), MapTreeLeaf$2__get_Key(t1r), MapTreeLeaf$2__get_Value(t1r), MapTreeModule_mk(MapTreeNode$2__get_Right(t1r), k, v, t2));\n                }\n                else {\n                    throw new Error(\"internal error: Map.rebalance\");\n                }\n            }\n            else {\n                return MapTreeModule_mk(MapTreeNode$2__get_Left(t1$0027), MapTreeLeaf$2__get_Key(t1$0027), MapTreeLeaf$2__get_Value(t1$0027), MapTreeModule_mk(MapTreeNode$2__get_Right(t1$0027), k, v, t2));\n            }\n        }\n        else {\n            throw new Error(\"internal error: Map.rebalance\");\n        }\n    }\n    else {\n        return MapTreeModule_mk(t1, k, v, t2);\n    }\n}\nexport function MapTreeModule_add(comparer, k, v, m) {\n    if (m != null) {\n        const m2 = value_1(m);\n        const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\n        if (m2 instanceof MapTreeNode$2) {\n            const mn = m2;\n            if (c < 0) {\n                return MapTreeModule_rebalance(MapTreeModule_add(comparer, k, v, MapTreeNode$2__get_Left(mn)), MapTreeLeaf$2__get_Key(mn), MapTreeLeaf$2__get_Value(mn), MapTreeNode$2__get_Right(mn));\n            }\n            else if (c === 0) {\n                return MapTreeNode$2_$ctor_Z39DE9543(k, v, MapTreeNode$2__get_Left(mn), MapTreeNode$2__get_Right(mn), MapTreeNode$2__get_Height(mn));\n            }\n            else {\n                return MapTreeModule_rebalance(MapTreeNode$2__get_Left(mn), MapTreeLeaf$2__get_Key(mn), MapTreeLeaf$2__get_Value(mn), MapTreeModule_add(comparer, k, v, MapTreeNode$2__get_Right(mn)));\n            }\n        }\n        else if (c < 0) {\n            return MapTreeNode$2_$ctor_Z39DE9543(k, v, MapTreeModule_empty(), m, 2);\n        }\n        else if (c === 0) {\n            return MapTreeLeaf$2_$ctor_5BDDA1(k, v);\n        }\n        else {\n            return MapTreeNode$2_$ctor_Z39DE9543(k, v, m, MapTreeModule_empty(), 2);\n        }\n    }\n    else {\n        return MapTreeLeaf$2_$ctor_5BDDA1(k, v);\n    }\n}\nexport function MapTreeModule_tryFind(comparer_mut, k_mut, m_mut) {\n    MapTreeModule_tryFind: while (true) {\n        const comparer = comparer_mut, k = k_mut, m = m_mut;\n        if (m != null) {\n            const m2 = value_1(m);\n            const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\n            if (c === 0) {\n                return some(MapTreeLeaf$2__get_Value(m2));\n            }\n            else if (m2 instanceof MapTreeNode$2) {\n                const mn = m2;\n                comparer_mut = comparer;\n                k_mut = k;\n                m_mut = ((c < 0) ? MapTreeNode$2__get_Left(mn) : MapTreeNode$2__get_Right(mn));\n                continue MapTreeModule_tryFind;\n            }\n            else {\n                return void 0;\n            }\n        }\n        else {\n            return void 0;\n        }\n        break;\n    }\n}\nexport function MapTreeModule_find(comparer, k, m) {\n    const matchValue = MapTreeModule_tryFind(comparer, k, m);\n    if (matchValue == null) {\n        throw new Error();\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\nexport function MapTreeModule_partition1(comparer, f, k, v, acc1, acc2) {\n    if (f(k, v)) {\n        return [MapTreeModule_add(comparer, k, v, acc1), acc2];\n    }\n    else {\n        return [acc1, MapTreeModule_add(comparer, k, v, acc2)];\n    }\n}\nexport function MapTreeModule_partitionAux(comparer_mut, f_mut, m_mut, acc__mut, acc__1_mut) {\n    MapTreeModule_partitionAux: while (true) {\n        const comparer = comparer_mut, f = f_mut, m = m_mut, acc_ = acc__mut, acc__1 = acc__1_mut;\n        const acc = [acc_, acc__1];\n        if (m != null) {\n            const m2 = value_1(m);\n            if (m2 instanceof MapTreeNode$2) {\n                const mn = m2;\n                const acc_1 = MapTreeModule_partitionAux(comparer, f, MapTreeNode$2__get_Right(mn), acc[0], acc[1]);\n                const acc_4 = MapTreeModule_partition1(comparer, f, MapTreeLeaf$2__get_Key(mn), MapTreeLeaf$2__get_Value(mn), acc_1[0], acc_1[1]);\n                comparer_mut = comparer;\n                f_mut = f;\n                m_mut = MapTreeNode$2__get_Left(mn);\n                acc__mut = acc_4[0];\n                acc__1_mut = acc_4[1];\n                continue MapTreeModule_partitionAux;\n            }\n            else {\n                return MapTreeModule_partition1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc[0], acc[1]);\n            }\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\nexport function MapTreeModule_partition(comparer, f, m) {\n    return MapTreeModule_partitionAux(comparer, f, m, MapTreeModule_empty(), MapTreeModule_empty());\n}\nexport function MapTreeModule_filter1(comparer, f, k, v, acc) {\n    if (f(k, v)) {\n        return MapTreeModule_add(comparer, k, v, acc);\n    }\n    else {\n        return acc;\n    }\n}\nexport function MapTreeModule_filterAux(comparer_mut, f_mut, m_mut, acc_mut) {\n    MapTreeModule_filterAux: while (true) {\n        const comparer = comparer_mut, f = f_mut, m = m_mut, acc = acc_mut;\n        if (m != null) {\n            const m2 = value_1(m);\n            if (m2 instanceof MapTreeNode$2) {\n                const mn = m2;\n                const acc_1 = MapTreeModule_filterAux(comparer, f, MapTreeNode$2__get_Left(mn), acc);\n                const acc_2 = MapTreeModule_filter1(comparer, f, MapTreeLeaf$2__get_Key(mn), MapTreeLeaf$2__get_Value(mn), acc_1);\n                comparer_mut = comparer;\n                f_mut = f;\n                m_mut = MapTreeNode$2__get_Right(mn);\n                acc_mut = acc_2;\n                continue MapTreeModule_filterAux;\n            }\n            else {\n                return MapTreeModule_filter1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc);\n            }\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\nexport function MapTreeModule_filter(comparer, f, m) {\n    return MapTreeModule_filterAux(comparer, f, m, MapTreeModule_empty());\n}\nexport function MapTreeModule_spliceOutSuccessor(m) {\n    if (m != null) {\n        const m2 = value_1(m);\n        if (m2 instanceof MapTreeNode$2) {\n            const mn = m2;\n            if (MapTreeNode$2__get_Left(mn) == null) {\n                return [MapTreeLeaf$2__get_Key(mn), MapTreeLeaf$2__get_Value(mn), MapTreeNode$2__get_Right(mn)];\n            }\n            else {\n                const patternInput = MapTreeModule_spliceOutSuccessor(MapTreeNode$2__get_Left(mn));\n                return [patternInput[0], patternInput[1], MapTreeModule_mk(patternInput[2], MapTreeLeaf$2__get_Key(mn), MapTreeLeaf$2__get_Value(mn), MapTreeNode$2__get_Right(mn))];\n            }\n        }\n        else {\n            return [MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_empty()];\n        }\n    }\n    else {\n        throw new Error(\"internal error: Map.spliceOutSuccessor\");\n    }\n}\nexport function MapTreeModule_remove(comparer, k, m) {\n    if (m != null) {\n        const m2 = value_1(m);\n        const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\n        if (m2 instanceof MapTreeNode$2) {\n            const mn = m2;\n            if (c < 0) {\n                return MapTreeModule_rebalance(MapTreeModule_remove(comparer, k, MapTreeNode$2__get_Left(mn)), MapTreeLeaf$2__get_Key(mn), MapTreeLeaf$2__get_Value(mn), MapTreeNode$2__get_Right(mn));\n            }\n            else if (c === 0) {\n                if (MapTreeNode$2__get_Left(mn) == null) {\n                    return MapTreeNode$2__get_Right(mn);\n                }\n                else if (MapTreeNode$2__get_Right(mn) == null) {\n                    return MapTreeNode$2__get_Left(mn);\n                }\n                else {\n                    const patternInput = MapTreeModule_spliceOutSuccessor(MapTreeNode$2__get_Right(mn));\n                    return MapTreeModule_mk(MapTreeNode$2__get_Left(mn), patternInput[0], patternInput[1], patternInput[2]);\n                }\n            }\n            else {\n                return MapTreeModule_rebalance(MapTreeNode$2__get_Left(mn), MapTreeLeaf$2__get_Key(mn), MapTreeLeaf$2__get_Value(mn), MapTreeModule_remove(comparer, k, MapTreeNode$2__get_Right(mn)));\n            }\n        }\n        else if (c === 0) {\n            return MapTreeModule_empty();\n        }\n        else {\n            return m;\n        }\n    }\n    else {\n        return MapTreeModule_empty();\n    }\n}\nexport function MapTreeModule_change(comparer, k, u, m) {\n    if (m != null) {\n        const m2 = value_1(m);\n        if (m2 instanceof MapTreeNode$2) {\n            const mn = m2;\n            const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(mn)) | 0;\n            if (c < 0) {\n                return MapTreeModule_rebalance(MapTreeModule_change(comparer, k, u, MapTreeNode$2__get_Left(mn)), MapTreeLeaf$2__get_Key(mn), MapTreeLeaf$2__get_Value(mn), MapTreeNode$2__get_Right(mn));\n            }\n            else if (c === 0) {\n                const matchValue_1 = u(some(MapTreeLeaf$2__get_Value(mn)));\n                if (matchValue_1 != null) {\n                    return MapTreeNode$2_$ctor_Z39DE9543(k, value_1(matchValue_1), MapTreeNode$2__get_Left(mn), MapTreeNode$2__get_Right(mn), MapTreeNode$2__get_Height(mn));\n                }\n                else if (MapTreeNode$2__get_Left(mn) == null) {\n                    return MapTreeNode$2__get_Right(mn);\n                }\n                else if (MapTreeNode$2__get_Right(mn) == null) {\n                    return MapTreeNode$2__get_Left(mn);\n                }\n                else {\n                    const patternInput = MapTreeModule_spliceOutSuccessor(MapTreeNode$2__get_Right(mn));\n                    return MapTreeModule_mk(MapTreeNode$2__get_Left(mn), patternInput[0], patternInput[1], patternInput[2]);\n                }\n            }\n            else {\n                return MapTreeModule_rebalance(MapTreeNode$2__get_Left(mn), MapTreeLeaf$2__get_Key(mn), MapTreeLeaf$2__get_Value(mn), MapTreeModule_change(comparer, k, u, MapTreeNode$2__get_Right(mn)));\n            }\n        }\n        else {\n            const c_1 = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\n            if (c_1 < 0) {\n                const matchValue_2 = u(void 0);\n                if (matchValue_2 != null) {\n                    return MapTreeNode$2_$ctor_Z39DE9543(k, value_1(matchValue_2), MapTreeModule_empty(), m, 2);\n                }\n                else {\n                    return m;\n                }\n            }\n            else if (c_1 === 0) {\n                const matchValue_3 = u(some(MapTreeLeaf$2__get_Value(m2)));\n                if (matchValue_3 != null) {\n                    return MapTreeLeaf$2_$ctor_5BDDA1(k, value_1(matchValue_3));\n                }\n                else {\n                    return MapTreeModule_empty();\n                }\n            }\n            else {\n                const matchValue_4 = u(void 0);\n                if (matchValue_4 != null) {\n                    return MapTreeNode$2_$ctor_Z39DE9543(k, value_1(matchValue_4), m, MapTreeModule_empty(), 2);\n                }\n                else {\n                    return m;\n                }\n            }\n        }\n    }\n    else {\n        const matchValue = u(void 0);\n        if (matchValue != null) {\n            return MapTreeLeaf$2_$ctor_5BDDA1(k, value_1(matchValue));\n        }\n        else {\n            return m;\n        }\n    }\n}\nexport function MapTreeModule_mem(comparer_mut, k_mut, m_mut) {\n    MapTreeModule_mem: while (true) {\n        const comparer = comparer_mut, k = k_mut, m = m_mut;\n        if (m != null) {\n            const m2 = value_1(m);\n            const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\n            if (m2 instanceof MapTreeNode$2) {\n                const mn = m2;\n                if (c < 0) {\n                    comparer_mut = comparer;\n                    k_mut = k;\n                    m_mut = MapTreeNode$2__get_Left(mn);\n                    continue MapTreeModule_mem;\n                }\n                else if (c === 0) {\n                    return true;\n                }\n                else {\n                    comparer_mut = comparer;\n                    k_mut = k;\n                    m_mut = MapTreeNode$2__get_Right(mn);\n                    continue MapTreeModule_mem;\n                }\n            }\n            else {\n                return c === 0;\n            }\n        }\n        else {\n            return false;\n        }\n        break;\n    }\n}\nexport function MapTreeModule_iterOpt(f_mut, m_mut) {\n    MapTreeModule_iterOpt: while (true) {\n        const f = f_mut, m = m_mut;\n        if (m != null) {\n            const m2 = value_1(m);\n            if (m2 instanceof MapTreeNode$2) {\n                const mn = m2;\n                MapTreeModule_iterOpt(f, MapTreeNode$2__get_Left(mn));\n                f(MapTreeLeaf$2__get_Key(mn), MapTreeLeaf$2__get_Value(mn));\n                f_mut = f;\n                m_mut = MapTreeNode$2__get_Right(mn);\n                continue MapTreeModule_iterOpt;\n            }\n            else {\n                f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\n            }\n        }\n        break;\n    }\n}\nexport function MapTreeModule_iter(f, m) {\n    MapTreeModule_iterOpt(f, m);\n}\nexport function MapTreeModule_tryPickOpt(f_mut, m_mut) {\n    MapTreeModule_tryPickOpt: while (true) {\n        const f = f_mut, m = m_mut;\n        if (m != null) {\n            const m2 = value_1(m);\n            if (m2 instanceof MapTreeNode$2) {\n                const mn = m2;\n                const matchValue = MapTreeModule_tryPickOpt(f, MapTreeNode$2__get_Left(mn));\n                if (matchValue == null) {\n                    const matchValue_1 = f(MapTreeLeaf$2__get_Key(mn), MapTreeLeaf$2__get_Value(mn));\n                    if (matchValue_1 == null) {\n                        f_mut = f;\n                        m_mut = MapTreeNode$2__get_Right(mn);\n                        continue MapTreeModule_tryPickOpt;\n                    }\n                    else {\n                        return matchValue_1;\n                    }\n                }\n                else {\n                    return matchValue;\n                }\n            }\n            else {\n                return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\n            }\n        }\n        else {\n            return void 0;\n        }\n        break;\n    }\n}\nexport function MapTreeModule_tryPick(f, m) {\n    return MapTreeModule_tryPickOpt(f, m);\n}\nexport function MapTreeModule_existsOpt(f_mut, m_mut) {\n    MapTreeModule_existsOpt: while (true) {\n        const f = f_mut, m = m_mut;\n        if (m != null) {\n            const m2 = value_1(m);\n            if (m2 instanceof MapTreeNode$2) {\n                const mn = m2;\n                if (MapTreeModule_existsOpt(f, MapTreeNode$2__get_Left(mn)) ? true : f(MapTreeLeaf$2__get_Key(mn), MapTreeLeaf$2__get_Value(mn))) {\n                    return true;\n                }\n                else {\n                    f_mut = f;\n                    m_mut = MapTreeNode$2__get_Right(mn);\n                    continue MapTreeModule_existsOpt;\n                }\n            }\n            else {\n                return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\n            }\n        }\n        else {\n            return false;\n        }\n        break;\n    }\n}\nexport function MapTreeModule_exists(f, m) {\n    return MapTreeModule_existsOpt(f, m);\n}\nexport function MapTreeModule_forallOpt(f_mut, m_mut) {\n    MapTreeModule_forallOpt: while (true) {\n        const f = f_mut, m = m_mut;\n        if (m != null) {\n            const m2 = value_1(m);\n            if (m2 instanceof MapTreeNode$2) {\n                const mn = m2;\n                if (MapTreeModule_forallOpt(f, MapTreeNode$2__get_Left(mn)) && f(MapTreeLeaf$2__get_Key(mn), MapTreeLeaf$2__get_Value(mn))) {\n                    f_mut = f;\n                    m_mut = MapTreeNode$2__get_Right(mn);\n                    continue MapTreeModule_forallOpt;\n                }\n                else {\n                    return false;\n                }\n            }\n            else {\n                return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\n            }\n        }\n        else {\n            return true;\n        }\n        break;\n    }\n}\nexport function MapTreeModule_forall(f, m) {\n    return MapTreeModule_forallOpt(f, m);\n}\nexport function MapTreeModule_map(f, m) {\n    if (m != null) {\n        const m2 = value_1(m);\n        if (m2 instanceof MapTreeNode$2) {\n            const mn = m2;\n            const l2 = MapTreeModule_map(f, MapTreeNode$2__get_Left(mn));\n            const v2 = f(MapTreeLeaf$2__get_Value(mn));\n            const r2 = MapTreeModule_map(f, MapTreeNode$2__get_Right(mn));\n            return MapTreeNode$2_$ctor_Z39DE9543(MapTreeLeaf$2__get_Key(mn), v2, l2, r2, MapTreeNode$2__get_Height(mn));\n        }\n        else {\n            return MapTreeLeaf$2_$ctor_5BDDA1(MapTreeLeaf$2__get_Key(m2), f(MapTreeLeaf$2__get_Value(m2)));\n        }\n    }\n    else {\n        return MapTreeModule_empty();\n    }\n}\nexport function MapTreeModule_mapiOpt(f, m) {\n    if (m != null) {\n        const m2 = value_1(m);\n        if (m2 instanceof MapTreeNode$2) {\n            const mn = m2;\n            const l2 = MapTreeModule_mapiOpt(f, MapTreeNode$2__get_Left(mn));\n            const v2 = f(MapTreeLeaf$2__get_Key(mn), MapTreeLeaf$2__get_Value(mn));\n            const r2 = MapTreeModule_mapiOpt(f, MapTreeNode$2__get_Right(mn));\n            return MapTreeNode$2_$ctor_Z39DE9543(MapTreeLeaf$2__get_Key(mn), v2, l2, r2, MapTreeNode$2__get_Height(mn));\n        }\n        else {\n            return MapTreeLeaf$2_$ctor_5BDDA1(MapTreeLeaf$2__get_Key(m2), f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)));\n        }\n    }\n    else {\n        return MapTreeModule_empty();\n    }\n}\nexport function MapTreeModule_mapi(f, m) {\n    return MapTreeModule_mapiOpt(f, m);\n}\nexport function MapTreeModule_foldBackOpt(f_mut, m_mut, x_mut) {\n    MapTreeModule_foldBackOpt: while (true) {\n        const f = f_mut, m = m_mut, x = x_mut;\n        if (m != null) {\n            const m2 = value_1(m);\n            if (m2 instanceof MapTreeNode$2) {\n                const mn = m2;\n                const x_1 = MapTreeModule_foldBackOpt(f, MapTreeNode$2__get_Right(mn), x);\n                const x_2 = f(MapTreeLeaf$2__get_Key(mn), MapTreeLeaf$2__get_Value(mn), x_1);\n                f_mut = f;\n                m_mut = MapTreeNode$2__get_Left(mn);\n                x_mut = x_2;\n                continue MapTreeModule_foldBackOpt;\n            }\n            else {\n                return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x);\n            }\n        }\n        else {\n            return x;\n        }\n        break;\n    }\n}\nexport function MapTreeModule_foldBack(f, m, x) {\n    return MapTreeModule_foldBackOpt(f, m, x);\n}\nexport function MapTreeModule_foldOpt(f_mut, x_mut, m_mut) {\n    MapTreeModule_foldOpt: while (true) {\n        const f = f_mut, x = x_mut, m = m_mut;\n        if (m != null) {\n            const m2 = value_1(m);\n            if (m2 instanceof MapTreeNode$2) {\n                const mn = m2;\n                f_mut = f;\n                x_mut = f(MapTreeModule_foldOpt(f, x, MapTreeNode$2__get_Left(mn)), MapTreeLeaf$2__get_Key(mn), MapTreeLeaf$2__get_Value(mn));\n                m_mut = MapTreeNode$2__get_Right(mn);\n                continue MapTreeModule_foldOpt;\n            }\n            else {\n                return f(x, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\n            }\n        }\n        else {\n            return x;\n        }\n        break;\n    }\n}\nexport function MapTreeModule_fold(f, x, m) {\n    return MapTreeModule_foldOpt(f, x, m);\n}\nexport function MapTreeModule_foldSectionOpt(comparer, lo, hi, f, m, x) {\n    const foldFromTo = (f_1_mut, m_1_mut, x_1_mut) => {\n        foldFromTo: while (true) {\n            const f_1 = f_1_mut, m_1 = m_1_mut, x_1 = x_1_mut;\n            if (m_1 != null) {\n                const m2 = value_1(m_1);\n                if (m2 instanceof MapTreeNode$2) {\n                    const mn = m2;\n                    const cLoKey = comparer.Compare(lo, MapTreeLeaf$2__get_Key(mn)) | 0;\n                    const cKeyHi = comparer.Compare(MapTreeLeaf$2__get_Key(mn), hi) | 0;\n                    const x_2 = (cLoKey < 0) ? foldFromTo(f_1, MapTreeNode$2__get_Left(mn), x_1) : x_1;\n                    const x_3 = ((cLoKey <= 0) && (cKeyHi <= 0)) ? f_1(MapTreeLeaf$2__get_Key(mn), MapTreeLeaf$2__get_Value(mn), x_2) : x_2;\n                    if (cKeyHi < 0) {\n                        f_1_mut = f_1;\n                        m_1_mut = MapTreeNode$2__get_Right(mn);\n                        x_1_mut = x_3;\n                        continue foldFromTo;\n                    }\n                    else {\n                        return x_3;\n                    }\n                }\n                else if ((comparer.Compare(lo, MapTreeLeaf$2__get_Key(m2)) <= 0) && (comparer.Compare(MapTreeLeaf$2__get_Key(m2), hi) <= 0)) {\n                    return f_1(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x_1);\n                }\n                else {\n                    return x_1;\n                }\n            }\n            else {\n                return x_1;\n            }\n            break;\n        }\n    };\n    if (comparer.Compare(lo, hi) === 1) {\n        return x;\n    }\n    else {\n        return foldFromTo(f, m, x);\n    }\n}\nexport function MapTreeModule_foldSection(comparer, lo, hi, f, m, x) {\n    return MapTreeModule_foldSectionOpt(comparer, lo, hi, f, m, x);\n}\nexport function MapTreeModule_toList(m) {\n    const loop = (m_1_mut, acc_mut) => {\n        loop: while (true) {\n            const m_1 = m_1_mut, acc = acc_mut;\n            if (m_1 != null) {\n                const m2 = value_1(m_1);\n                if (m2 instanceof MapTreeNode$2) {\n                    const mn = m2;\n                    m_1_mut = MapTreeNode$2__get_Left(mn);\n                    acc_mut = cons([MapTreeLeaf$2__get_Key(mn), MapTreeLeaf$2__get_Value(mn)], loop(MapTreeNode$2__get_Right(mn), acc));\n                    continue loop;\n                }\n                else {\n                    return cons([MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)], acc);\n                }\n            }\n            else {\n                return acc;\n            }\n            break;\n        }\n    };\n    return loop(m, empty_1());\n}\nexport function MapTreeModule_copyToArray(m, arr, i) {\n    let j = i;\n    MapTreeModule_iter((x, y) => {\n        arr[j] = [x, y];\n        j = ((j + 1) | 0);\n    }, m);\n}\nexport function MapTreeModule_toArray(m) {\n    const n = MapTreeModule_size(m) | 0;\n    const res = fill(new Array(n), 0, n, [null, null]);\n    MapTreeModule_copyToArray(m, res, 0);\n    return res;\n}\nexport function MapTreeModule_ofList(comparer, l) {\n    return fold_1((acc, tupledArg) => MapTreeModule_add(comparer, tupledArg[0], tupledArg[1], acc), MapTreeModule_empty(), l);\n}\nexport function MapTreeModule_mkFromEnumerator(comparer_mut, acc_mut, e_mut) {\n    MapTreeModule_mkFromEnumerator: while (true) {\n        const comparer = comparer_mut, acc = acc_mut, e = e_mut;\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            const patternInput = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n            comparer_mut = comparer;\n            acc_mut = MapTreeModule_add(comparer, patternInput[0], patternInput[1], acc);\n            e_mut = e;\n            continue MapTreeModule_mkFromEnumerator;\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\nexport function MapTreeModule_ofArray(comparer, arr) {\n    let res = MapTreeModule_empty();\n    for (let idx = 0; idx <= (arr.length - 1); idx++) {\n        const forLoopVar = arr[idx];\n        res = MapTreeModule_add(comparer, forLoopVar[0], forLoopVar[1], res);\n    }\n    return res;\n}\nexport function MapTreeModule_ofSeq(comparer, c) {\n    if (isArrayLike(c)) {\n        return MapTreeModule_ofArray(comparer, c);\n    }\n    else if (c instanceof FSharpList) {\n        return MapTreeModule_ofList(comparer, c);\n    }\n    else {\n        const ie = getEnumerator(c);\n        try {\n            return MapTreeModule_mkFromEnumerator(comparer, MapTreeModule_empty(), ie);\n        }\n        finally {\n            disposeSafe(ie);\n        }\n    }\n}\nexport class MapTreeModule_MapIterator$2 extends Record {\n    constructor(stack, started) {\n        super();\n        this.stack = stack;\n        this.started = started;\n    }\n}\nexport function MapTreeModule_MapIterator$2_$reflection(gen0, gen1) {\n    return record_type(\"Map.MapTreeModule.MapIterator`2\", [gen0, gen1], MapTreeModule_MapIterator$2, () => [[\"stack\", list_type(option_type(MapTreeLeaf$2_$reflection(gen0, gen1)))], [\"started\", bool_type]]);\n}\nexport function MapTreeModule_collapseLHS(stack_mut) {\n    MapTreeModule_collapseLHS: while (true) {\n        const stack = stack_mut;\n        if (!isEmpty_1(stack)) {\n            const rest = tail(stack);\n            const m = head(stack);\n            if (m != null) {\n                const m2 = value_1(m);\n                if (m2 instanceof MapTreeNode$2) {\n                    const mn = m2;\n                    stack_mut = ofArrayWithTail([MapTreeNode$2__get_Left(mn), MapTreeLeaf$2_$ctor_5BDDA1(MapTreeLeaf$2__get_Key(mn), MapTreeLeaf$2__get_Value(mn)), MapTreeNode$2__get_Right(mn)], rest);\n                    continue MapTreeModule_collapseLHS;\n                }\n                else {\n                    return stack;\n                }\n            }\n            else {\n                stack_mut = rest;\n                continue MapTreeModule_collapseLHS;\n            }\n        }\n        else {\n            return empty_1();\n        }\n        break;\n    }\n}\nexport function MapTreeModule_mkIterator(m) {\n    return new MapTreeModule_MapIterator$2(MapTreeModule_collapseLHS(singleton(m)), false);\n}\nexport function MapTreeModule_notStarted() {\n    throw new Error(\"enumeration not started\");\n}\nexport function MapTreeModule_alreadyFinished() {\n    throw new Error(\"enumeration already finished\");\n}\nexport function MapTreeModule_current(i) {\n    if (i.started) {\n        const matchValue = i.stack;\n        if (!isEmpty_1(matchValue)) {\n            if (head(matchValue) != null) {\n                const m = value_1(head(matchValue));\n                if (m instanceof MapTreeNode$2) {\n                    throw new Error(\"Please report error: Map iterator, unexpected stack for current\");\n                }\n                else {\n                    return [MapTreeLeaf$2__get_Key(m), MapTreeLeaf$2__get_Value(m)];\n                }\n            }\n            else {\n                throw new Error(\"Please report error: Map iterator, unexpected stack for current\");\n            }\n        }\n        else {\n            return MapTreeModule_alreadyFinished();\n        }\n    }\n    else {\n        return MapTreeModule_notStarted();\n    }\n}\nexport function MapTreeModule_moveNext(i) {\n    if (i.started) {\n        const matchValue = i.stack;\n        if (!isEmpty_1(matchValue)) {\n            if (head(matchValue) != null) {\n                const m = value_1(head(matchValue));\n                if (m instanceof MapTreeNode$2) {\n                    throw new Error(\"Please report error: Map iterator, unexpected stack for moveNext\");\n                }\n                else {\n                    i.stack = MapTreeModule_collapseLHS(tail(matchValue));\n                    return !isEmpty_1(i.stack);\n                }\n            }\n            else {\n                throw new Error(\"Please report error: Map iterator, unexpected stack for moveNext\");\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    else {\n        i.started = true;\n        return !isEmpty_1(i.stack);\n    }\n}\nexport function MapTreeModule_mkIEnumerator(m) {\n    let i = MapTreeModule_mkIterator(m);\n    return {\n        \"System.Collections.Generic.IEnumerator`1.get_Current\"() {\n            return MapTreeModule_current(i);\n        },\n        \"System.Collections.IEnumerator.get_Current\"() {\n            return MapTreeModule_current(i);\n        },\n        \"System.Collections.IEnumerator.MoveNext\"() {\n            return MapTreeModule_moveNext(i);\n        },\n        \"System.Collections.IEnumerator.Reset\"() {\n            i = MapTreeModule_mkIterator(m);\n        },\n        Dispose() {\n        },\n    };\n}\nexport function MapTreeModule_toSeq(s) {\n    return unfold((en_1) => {\n        if (en_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            return [en_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), en_1];\n        }\n        else {\n            return void 0;\n        }\n    }, MapTreeModule_mkIEnumerator(s));\n}\nexport function MapTreeModule_leftmost(m_mut) {\n    MapTreeModule_leftmost: while (true) {\n        const m = m_mut;\n        if (m != null) {\n            const m2 = value_1(m);\n            let matchResult, nd_1;\n            if (m2 instanceof MapTreeNode$2) {\n                if (MapTreeNode$2__get_Height(m2) > 1) {\n                    matchResult = 0;\n                    nd_1 = m2;\n                }\n                else {\n                    matchResult = 1;\n                }\n            }\n            else {\n                matchResult = 1;\n            }\n            switch (matchResult) {\n                case 0:\n                    if (MapTreeNode$2__get_Left(nd_1) == null) {\n                        return [MapTreeLeaf$2__get_Key(nd_1), MapTreeLeaf$2__get_Value(nd_1)];\n                    }\n                    else {\n                        m_mut = MapTreeNode$2__get_Left(nd_1);\n                        continue MapTreeModule_leftmost;\n                    }\n                default:\n                    return [MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)];\n            }\n        }\n        else {\n            throw new Error();\n        }\n        break;\n    }\n}\nexport function MapTreeModule_rightmost(m_mut) {\n    MapTreeModule_rightmost: while (true) {\n        const m = m_mut;\n        if (m != null) {\n            const m2 = value_1(m);\n            let matchResult, nd_1;\n            if (m2 instanceof MapTreeNode$2) {\n                if (MapTreeNode$2__get_Height(m2) > 1) {\n                    matchResult = 0;\n                    nd_1 = m2;\n                }\n                else {\n                    matchResult = 1;\n                }\n            }\n            else {\n                matchResult = 1;\n            }\n            switch (matchResult) {\n                case 0:\n                    if (MapTreeNode$2__get_Right(nd_1) == null) {\n                        return [MapTreeLeaf$2__get_Key(nd_1), MapTreeLeaf$2__get_Value(nd_1)];\n                    }\n                    else {\n                        m_mut = MapTreeNode$2__get_Right(nd_1);\n                        continue MapTreeModule_rightmost;\n                    }\n                default:\n                    return [MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)];\n            }\n        }\n        else {\n            throw new Error();\n        }\n        break;\n    }\n}\nexport class FSharpMap {\n    constructor(comparer, tree) {\n        this.comparer = comparer;\n        this.tree = tree;\n    }\n    GetHashCode() {\n        const this$ = this;\n        return FSharpMap__ComputeHashCode(this$) | 0;\n    }\n    Equals(that) {\n        const this$ = this;\n        if (that instanceof FSharpMap) {\n            const that_1 = that;\n            const e1 = getEnumerator(this$);\n            try {\n                const e2 = getEnumerator(that_1);\n                try {\n                    const loop = () => {\n                        const m1 = e1[\"System.Collections.IEnumerator.MoveNext\"]();\n                        if (m1 === e2[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                            if (!m1) {\n                                return true;\n                            }\n                            else {\n                                const e1c = e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                                const e2c = e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                                if (equals(e1c[0], e2c[0]) && equals(e1c[1], e2c[1])) {\n                                    return loop();\n                                }\n                                else {\n                                    return false;\n                                }\n                            }\n                        }\n                        else {\n                            return false;\n                        }\n                    };\n                    return loop();\n                }\n                finally {\n                    disposeSafe(e2);\n                }\n            }\n            finally {\n                disposeSafe(e1);\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    toString() {\n        const this$ = this;\n        return (\"map [\" + join(\"; \", map_1((kv) => format(\"({0}, {1})\", kv[0], kv[1]), this$))) + \"]\";\n    }\n    get [Symbol.toStringTag]() {\n        return \"FSharpMap\";\n    }\n    toJSON() {\n        const this$ = this;\n        return Array.from(this$);\n    }\n    GetEnumerator() {\n        const _ = this;\n        return MapTreeModule_mkIEnumerator(_.tree);\n    }\n    [Symbol.iterator]() {\n        return toIterator(getEnumerator(this));\n    }\n    \"System.Collections.IEnumerable.GetEnumerator\"() {\n        const _ = this;\n        return MapTreeModule_mkIEnumerator(_.tree);\n    }\n    CompareTo(obj) {\n        const m = this;\n        if (obj instanceof FSharpMap) {\n            const m2 = obj;\n            return compareWith((kvp1, kvp2) => {\n                const c = m.comparer.Compare(kvp1[0], kvp2[0]) | 0;\n                return ((c !== 0) ? c : compare(kvp1[1], kvp2[1])) | 0;\n            }, m, m2) | 0;\n        }\n        else {\n            throw new Error(\"not comparable\\\\nParameter name: obj\");\n        }\n    }\n    \"System.Collections.Generic.ICollection`1.Add2B595\"(x) {\n        throw new Error(\"Map cannot be mutated\");\n    }\n    \"System.Collections.Generic.ICollection`1.Clear\"() {\n        throw new Error(\"Map cannot be mutated\");\n    }\n    \"System.Collections.Generic.ICollection`1.Remove2B595\"(x) {\n        throw new Error(\"Map cannot be mutated\");\n    }\n    \"System.Collections.Generic.ICollection`1.Contains2B595\"(x) {\n        const m = this;\n        return FSharpMap__ContainsKey(m, x[0]) && equals(FSharpMap__get_Item(m, x[0]), x[1]);\n    }\n    \"System.Collections.Generic.ICollection`1.CopyToZ3B4C077E\"(arr, i) {\n        const m = this;\n        MapTreeModule_copyToArray(m.tree, arr, i);\n    }\n    \"System.Collections.Generic.ICollection`1.get_IsReadOnly\"() {\n        return true;\n    }\n    \"System.Collections.Generic.ICollection`1.get_Count\"() {\n        const m = this;\n        return FSharpMap__get_Count(m) | 0;\n    }\n    \"System.Collections.Generic.IReadOnlyCollection`1.get_Count\"() {\n        const m = this;\n        return FSharpMap__get_Count(m) | 0;\n    }\n    get size() {\n        const m = this;\n        return FSharpMap__get_Count(m) | 0;\n    }\n    clear() {\n        throw new Error(\"Map cannot be mutated\");\n    }\n    delete(_arg) {\n        throw new Error(\"Map cannot be mutated\");\n        return false;\n    }\n    entries() {\n        const m = this;\n        return map_1((p) => [p[0], p[1]], m);\n    }\n    get(k) {\n        const m = this;\n        return FSharpMap__get_Item(m, k);\n    }\n    has(k) {\n        const m = this;\n        return FSharpMap__ContainsKey(m, k);\n    }\n    keys() {\n        const m = this;\n        return map_1((p) => p[0], m);\n    }\n    set(k, v) {\n        const m = this;\n        throw new Error(\"Map cannot be mutated\");\n        return m;\n    }\n    values() {\n        const m = this;\n        return map_1((p) => p[1], m);\n    }\n    forEach(f, thisArg) {\n        const m = this;\n        iterate_1((p) => {\n            f(p[1], p[0], m);\n        }, m);\n    }\n}\nexport function FSharpMap_$reflection(gen0, gen1) {\n    return class_type(\"Map.FSharpMap\", [gen0, gen1], FSharpMap);\n}\nexport function FSharpMap_$ctor(comparer, tree) {\n    return new FSharpMap(comparer, tree);\n}\nexport function FSharpMap_Empty(comparer) {\n    return FSharpMap_$ctor(comparer, MapTreeModule_empty());\n}\nexport function FSharpMap__get_Comparer(m) {\n    return m.comparer;\n}\nexport function FSharpMap__get_Tree(m) {\n    return m.tree;\n}\nexport function FSharpMap__Add(m, key, value) {\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_add(m.comparer, key, value, m.tree));\n}\nexport function FSharpMap__Change(m, key, f) {\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_change(m.comparer, key, f, m.tree));\n}\nexport function FSharpMap__get_IsEmpty(m) {\n    return m.tree == null;\n}\nexport function FSharpMap__get_Item(m, key) {\n    return MapTreeModule_find(m.comparer, key, m.tree);\n}\nexport function FSharpMap__TryPick(m, f) {\n    return MapTreeModule_tryPick(f, m.tree);\n}\nexport function FSharpMap__Exists(m, predicate) {\n    return MapTreeModule_exists(predicate, m.tree);\n}\nexport function FSharpMap__Filter(m, predicate) {\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_filter(m.comparer, predicate, m.tree));\n}\nexport function FSharpMap__ForAll(m, predicate) {\n    return MapTreeModule_forall(predicate, m.tree);\n}\nexport function FSharpMap__Fold(m, f, acc) {\n    return MapTreeModule_foldBack(f, m.tree, acc);\n}\nexport function FSharpMap__FoldSection(m, lo, hi, f, acc) {\n    return MapTreeModule_foldSection(m.comparer, lo, hi, f, m.tree, acc);\n}\nexport function FSharpMap__Iterate(m, f) {\n    MapTreeModule_iter(f, m.tree);\n}\nexport function FSharpMap__MapRange(m, f) {\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_map(f, m.tree));\n}\nexport function FSharpMap__Map(m, f) {\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_mapi(f, m.tree));\n}\nexport function FSharpMap__Partition(m, predicate) {\n    const patternInput = MapTreeModule_partition(m.comparer, predicate, m.tree);\n    return [FSharpMap_$ctor(m.comparer, patternInput[0]), FSharpMap_$ctor(m.comparer, patternInput[1])];\n}\nexport function FSharpMap__get_Count(m) {\n    return MapTreeModule_size(m.tree);\n}\nexport function FSharpMap__ContainsKey(m, key) {\n    return MapTreeModule_mem(m.comparer, key, m.tree);\n}\nexport function FSharpMap__Remove(m, key) {\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_remove(m.comparer, key, m.tree));\n}\nexport function FSharpMap__TryGetValue(_, key, value) {\n    const matchValue = MapTreeModule_tryFind(_.comparer, key, _.tree);\n    if (matchValue == null) {\n        return false;\n    }\n    else {\n        const v = value_1(matchValue);\n        value.contents = v;\n        return true;\n    }\n}\nexport function FSharpMap__get_Keys(_) {\n    return map_2((kvp) => kvp[0], MapTreeModule_toArray(_.tree));\n}\nexport function FSharpMap__get_Values(_) {\n    return map_2((kvp) => kvp[1], MapTreeModule_toArray(_.tree));\n}\nexport function FSharpMap__get_MinKeyValue(m) {\n    return MapTreeModule_leftmost(m.tree);\n}\nexport function FSharpMap__get_MaxKeyValue(m) {\n    return MapTreeModule_rightmost(m.tree);\n}\nexport function FSharpMap__TryFind(m, key) {\n    return MapTreeModule_tryFind(m.comparer, key, m.tree);\n}\nexport function FSharpMap__ToList(m) {\n    return MapTreeModule_toList(m.tree);\n}\nexport function FSharpMap__ToArray(m) {\n    return MapTreeModule_toArray(m.tree);\n}\nexport function FSharpMap__ComputeHashCode(this$) {\n    const combineHash = (x, y) => (((x << 1) + y) + 631);\n    let res = 0;\n    const enumerator = getEnumerator(this$);\n    try {\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            const activePatternResult = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n            res = (combineHash(res, structuralHash(activePatternResult[0])) | 0);\n            res = (combineHash(res, structuralHash(activePatternResult[1])) | 0);\n        }\n    }\n    finally {\n        disposeSafe(enumerator);\n    }\n    return res | 0;\n}\nexport function isEmpty(table) {\n    return FSharpMap__get_IsEmpty(table);\n}\nexport function add(key, value, table) {\n    return FSharpMap__Add(table, key, value);\n}\nexport function change(key, f, table) {\n    return FSharpMap__Change(table, key, f);\n}\nexport function find(key, table) {\n    return FSharpMap__get_Item(table, key);\n}\nexport function tryFind(key, table) {\n    return FSharpMap__TryFind(table, key);\n}\nexport function remove(key, table) {\n    return FSharpMap__Remove(table, key);\n}\nexport function containsKey(key, table) {\n    return FSharpMap__ContainsKey(table, key);\n}\nexport function iterate(action, table) {\n    FSharpMap__Iterate(table, action);\n}\nexport function tryPick(chooser, table) {\n    return FSharpMap__TryPick(table, chooser);\n}\nexport function pick(chooser, table) {\n    const matchValue = tryPick(chooser, table);\n    if (matchValue != null) {\n        return value_1(matchValue);\n    }\n    else {\n        throw new Error();\n    }\n}\nexport function exists(predicate, table) {\n    return FSharpMap__Exists(table, predicate);\n}\nexport function filter(predicate, table) {\n    return FSharpMap__Filter(table, predicate);\n}\nexport function partition(predicate, table) {\n    return FSharpMap__Partition(table, predicate);\n}\nexport function forAll(predicate, table) {\n    return FSharpMap__ForAll(table, predicate);\n}\nexport function map(mapping, table) {\n    return FSharpMap__Map(table, mapping);\n}\nexport function fold(folder, state, table) {\n    return MapTreeModule_fold(folder, state, FSharpMap__get_Tree(table));\n}\nexport function foldBack(folder, table, state) {\n    return MapTreeModule_foldBack(folder, FSharpMap__get_Tree(table), state);\n}\nexport function toSeq(table) {\n    return map_1((kvp) => [kvp[0], kvp[1]], table);\n}\nexport function findKey(predicate, table) {\n    return pick_1((kvp) => {\n        const k = kvp[0];\n        if (predicate(k, kvp[1])) {\n            return some(k);\n        }\n        else {\n            return void 0;\n        }\n    }, table);\n}\nexport function tryFindKey(predicate, table) {\n    return tryPick_1((kvp) => {\n        const k = kvp[0];\n        if (predicate(k, kvp[1])) {\n            return some(k);\n        }\n        else {\n            return void 0;\n        }\n    }, table);\n}\nexport function ofList(elements, comparer) {\n    return FSharpMap_$ctor(comparer, MapTreeModule_ofSeq(comparer, elements));\n}\nexport function ofSeq(elements, comparer) {\n    return FSharpMap_$ctor(comparer, MapTreeModule_ofSeq(comparer, elements));\n}\nexport function ofArray(elements, comparer) {\n    return FSharpMap_$ctor(comparer, MapTreeModule_ofSeq(comparer, elements));\n}\nexport function toList(table) {\n    return FSharpMap__ToList(table);\n}\nexport function toArray(table) {\n    return FSharpMap__ToArray(table);\n}\nexport function keys(table) {\n    return FSharpMap__get_Keys(table);\n}\nexport function values(table) {\n    return FSharpMap__get_Values(table);\n}\nexport function minKeyValue(table) {\n    return FSharpMap__get_MinKeyValue(table);\n}\nexport function maxKeyValue(table) {\n    return FSharpMap__get_MaxKeyValue(table);\n}\nexport function empty(comparer) {\n    return FSharpMap_Empty(comparer);\n}\nexport function count(table) {\n    return FSharpMap__get_Count(table);\n}\n","import { record_type, bool_type, list_type, option_type, class_type } from \"./Reflection.js\";\nimport { some, value as value_1 } from \"./Option.js\";\nimport { structuralHash, toIterator, disposeSafe, getEnumerator, isArrayLike } from \"./Util.js\";\nimport { toString, Record } from \"./Types.js\";\nimport { fold as fold_2, cons, singleton as singleton_1, empty as empty_1, ofArrayWithTail, tail, head, isEmpty as isEmpty_1, FSharpList } from \"./List.js\";\nimport { fold as fold_1, fill } from \"./Array.js\";\nimport { join } from \"./String.js\";\nimport { exists as exists_1, cache, forAll as forAll_1, fold as fold_3, reduce, iterate as iterate_1, map as map_1 } from \"./Seq.js\";\nimport { HashSet__get_Comparer, HashSet_$ctor_Z6150332D, HashSet } from \"./MutableSet.js\";\nexport class SetTreeLeaf$1 {\n    constructor(k) {\n        this.k = k;\n    }\n}\nexport function SetTreeLeaf$1_$reflection(gen0) {\n    return class_type(\"Set.SetTreeLeaf`1\", [gen0], SetTreeLeaf$1);\n}\nexport function SetTreeLeaf$1_$ctor_2B595(k) {\n    return new SetTreeLeaf$1(k);\n}\nexport function SetTreeLeaf$1__get_Key(_) {\n    return _.k;\n}\nexport class SetTreeNode$1 extends SetTreeLeaf$1 {\n    constructor(v, left, right, h) {\n        super(v);\n        this.left = left;\n        this.right = right;\n        this.h = (h | 0);\n    }\n}\nexport function SetTreeNode$1_$reflection(gen0) {\n    return class_type(\"Set.SetTreeNode`1\", [gen0], SetTreeNode$1, SetTreeLeaf$1_$reflection(gen0));\n}\nexport function SetTreeNode$1_$ctor_5F465FC9(v, left, right, h) {\n    return new SetTreeNode$1(v, left, right, h);\n}\nexport function SetTreeNode$1__get_Left(_) {\n    return _.left;\n}\nexport function SetTreeNode$1__get_Right(_) {\n    return _.right;\n}\nexport function SetTreeNode$1__get_Height(_) {\n    return _.h;\n}\nexport function SetTreeModule_empty() {\n    return void 0;\n}\nexport function SetTreeModule_countAux(t_mut, acc_mut) {\n    SetTreeModule_countAux: while (true) {\n        const t = t_mut, acc = acc_mut;\n        if (t != null) {\n            const t2 = value_1(t);\n            if (t2 instanceof SetTreeNode$1) {\n                const tn = t2;\n                t_mut = SetTreeNode$1__get_Left(tn);\n                acc_mut = SetTreeModule_countAux(SetTreeNode$1__get_Right(tn), acc + 1);\n                continue SetTreeModule_countAux;\n            }\n            else {\n                return (acc + 1) | 0;\n            }\n        }\n        else {\n            return acc | 0;\n        }\n        break;\n    }\n}\nexport function SetTreeModule_count(s) {\n    return SetTreeModule_countAux(s, 0);\n}\nexport function SetTreeModule_mk(l, k, r) {\n    let tn, tn_1;\n    let hl;\n    const t = l;\n    if (t != null) {\n        const t2 = value_1(t);\n        hl = ((t2 instanceof SetTreeNode$1) ? ((tn = t2, SetTreeNode$1__get_Height(tn))) : 1);\n    }\n    else {\n        hl = 0;\n    }\n    let hr;\n    const t_1 = r;\n    if (t_1 != null) {\n        const t2_1 = value_1(t_1);\n        hr = ((t2_1 instanceof SetTreeNode$1) ? ((tn_1 = t2_1, SetTreeNode$1__get_Height(tn_1))) : 1);\n    }\n    else {\n        hr = 0;\n    }\n    const m = ((hl < hr) ? hr : hl) | 0;\n    if (m === 0) {\n        return SetTreeLeaf$1_$ctor_2B595(k);\n    }\n    else {\n        return SetTreeNode$1_$ctor_5F465FC9(k, l, r, m + 1);\n    }\n}\nexport function SetTreeModule_rebalance(t1, v, t2) {\n    let tn, tn_1, t_2, t2_3, tn_2, t_3, t2_4, tn_3;\n    let t1h;\n    const t = t1;\n    if (t != null) {\n        const t2_1 = value_1(t);\n        t1h = ((t2_1 instanceof SetTreeNode$1) ? ((tn = t2_1, SetTreeNode$1__get_Height(tn))) : 1);\n    }\n    else {\n        t1h = 0;\n    }\n    let t2h;\n    const t_1 = t2;\n    if (t_1 != null) {\n        const t2_2 = value_1(t_1);\n        t2h = ((t2_2 instanceof SetTreeNode$1) ? ((tn_1 = t2_2, SetTreeNode$1__get_Height(tn_1))) : 1);\n    }\n    else {\n        t2h = 0;\n    }\n    if (t2h > (t1h + 2)) {\n        const matchValue = value_1(t2);\n        if (matchValue instanceof SetTreeNode$1) {\n            const t2$0027 = matchValue;\n            if (((t_2 = SetTreeNode$1__get_Left(t2$0027), (t_2 != null) ? ((t2_3 = value_1(t_2), (t2_3 instanceof SetTreeNode$1) ? ((tn_2 = t2_3, SetTreeNode$1__get_Height(tn_2))) : 1)) : 0)) > (t1h + 1)) {\n                const matchValue_1 = value_1(SetTreeNode$1__get_Left(t2$0027));\n                if (matchValue_1 instanceof SetTreeNode$1) {\n                    const t2l = matchValue_1;\n                    return SetTreeModule_mk(SetTreeModule_mk(t1, v, SetTreeNode$1__get_Left(t2l)), SetTreeLeaf$1__get_Key(t2l), SetTreeModule_mk(SetTreeNode$1__get_Right(t2l), SetTreeLeaf$1__get_Key(t2$0027), SetTreeNode$1__get_Right(t2$0027)));\n                }\n                else {\n                    throw new Error(\"internal error: Set.rebalance\");\n                }\n            }\n            else {\n                return SetTreeModule_mk(SetTreeModule_mk(t1, v, SetTreeNode$1__get_Left(t2$0027)), SetTreeLeaf$1__get_Key(t2$0027), SetTreeNode$1__get_Right(t2$0027));\n            }\n        }\n        else {\n            throw new Error(\"internal error: Set.rebalance\");\n        }\n    }\n    else if (t1h > (t2h + 2)) {\n        const matchValue_2 = value_1(t1);\n        if (matchValue_2 instanceof SetTreeNode$1) {\n            const t1$0027 = matchValue_2;\n            if (((t_3 = SetTreeNode$1__get_Right(t1$0027), (t_3 != null) ? ((t2_4 = value_1(t_3), (t2_4 instanceof SetTreeNode$1) ? ((tn_3 = t2_4, SetTreeNode$1__get_Height(tn_3))) : 1)) : 0)) > (t2h + 1)) {\n                const matchValue_3 = value_1(SetTreeNode$1__get_Right(t1$0027));\n                if (matchValue_3 instanceof SetTreeNode$1) {\n                    const t1r = matchValue_3;\n                    return SetTreeModule_mk(SetTreeModule_mk(SetTreeNode$1__get_Left(t1$0027), SetTreeLeaf$1__get_Key(t1$0027), SetTreeNode$1__get_Left(t1r)), SetTreeLeaf$1__get_Key(t1r), SetTreeModule_mk(SetTreeNode$1__get_Right(t1r), v, t2));\n                }\n                else {\n                    throw new Error(\"internal error: Set.rebalance\");\n                }\n            }\n            else {\n                return SetTreeModule_mk(SetTreeNode$1__get_Left(t1$0027), SetTreeLeaf$1__get_Key(t1$0027), SetTreeModule_mk(SetTreeNode$1__get_Right(t1$0027), v, t2));\n            }\n        }\n        else {\n            throw new Error(\"internal error: Set.rebalance\");\n        }\n    }\n    else {\n        return SetTreeModule_mk(t1, v, t2);\n    }\n}\nexport function SetTreeModule_add(comparer, k, t) {\n    if (t != null) {\n        const t2 = value_1(t);\n        const c = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\n        if (t2 instanceof SetTreeNode$1) {\n            const tn = t2;\n            if (c < 0) {\n                return SetTreeModule_rebalance(SetTreeModule_add(comparer, k, SetTreeNode$1__get_Left(tn)), SetTreeLeaf$1__get_Key(tn), SetTreeNode$1__get_Right(tn));\n            }\n            else if (c === 0) {\n                return t;\n            }\n            else {\n                return SetTreeModule_rebalance(SetTreeNode$1__get_Left(tn), SetTreeLeaf$1__get_Key(tn), SetTreeModule_add(comparer, k, SetTreeNode$1__get_Right(tn)));\n            }\n        }\n        else {\n            const c_1 = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\n            if (c_1 < 0) {\n                return SetTreeNode$1_$ctor_5F465FC9(k, SetTreeModule_empty(), t, 2);\n            }\n            else if (c_1 === 0) {\n                return t;\n            }\n            else {\n                return SetTreeNode$1_$ctor_5F465FC9(k, t, SetTreeModule_empty(), 2);\n            }\n        }\n    }\n    else {\n        return SetTreeLeaf$1_$ctor_2B595(k);\n    }\n}\nexport function SetTreeModule_balance(comparer, t1, k, t2) {\n    if (t1 != null) {\n        const t1$0027 = value_1(t1);\n        if (t2 != null) {\n            const t2$0027 = value_1(t2);\n            if (t1$0027 instanceof SetTreeNode$1) {\n                const t1n = t1$0027;\n                if (t2$0027 instanceof SetTreeNode$1) {\n                    const t2n = t2$0027;\n                    if ((SetTreeNode$1__get_Height(t1n) + 2) < SetTreeNode$1__get_Height(t2n)) {\n                        return SetTreeModule_rebalance(SetTreeModule_balance(comparer, t1, k, SetTreeNode$1__get_Left(t2n)), SetTreeLeaf$1__get_Key(t2n), SetTreeNode$1__get_Right(t2n));\n                    }\n                    else if ((SetTreeNode$1__get_Height(t2n) + 2) < SetTreeNode$1__get_Height(t1n)) {\n                        return SetTreeModule_rebalance(SetTreeNode$1__get_Left(t1n), SetTreeLeaf$1__get_Key(t1n), SetTreeModule_balance(comparer, SetTreeNode$1__get_Right(t1n), k, t2));\n                    }\n                    else {\n                        return SetTreeModule_mk(t1, k, t2);\n                    }\n                }\n                else {\n                    return SetTreeModule_add(comparer, k, SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2$0027), t1));\n                }\n            }\n            else {\n                return SetTreeModule_add(comparer, k, SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t1$0027), t2));\n            }\n        }\n        else {\n            return SetTreeModule_add(comparer, k, t1);\n        }\n    }\n    else {\n        return SetTreeModule_add(comparer, k, t2);\n    }\n}\nexport function SetTreeModule_split(comparer, pivot, t) {\n    if (t != null) {\n        const t2 = value_1(t);\n        if (t2 instanceof SetTreeNode$1) {\n            const tn = t2;\n            const c = comparer.Compare(pivot, SetTreeLeaf$1__get_Key(tn)) | 0;\n            if (c < 0) {\n                const patternInput = SetTreeModule_split(comparer, pivot, SetTreeNode$1__get_Left(tn));\n                return [patternInput[0], patternInput[1], SetTreeModule_balance(comparer, patternInput[2], SetTreeLeaf$1__get_Key(tn), SetTreeNode$1__get_Right(tn))];\n            }\n            else if (c === 0) {\n                return [SetTreeNode$1__get_Left(tn), true, SetTreeNode$1__get_Right(tn)];\n            }\n            else {\n                const patternInput_1 = SetTreeModule_split(comparer, pivot, SetTreeNode$1__get_Right(tn));\n                return [SetTreeModule_balance(comparer, SetTreeNode$1__get_Left(tn), SetTreeLeaf$1__get_Key(tn), patternInput_1[0]), patternInput_1[1], patternInput_1[2]];\n            }\n        }\n        else {\n            const c_1 = comparer.Compare(SetTreeLeaf$1__get_Key(t2), pivot) | 0;\n            if (c_1 < 0) {\n                return [t, false, SetTreeModule_empty()];\n            }\n            else if (c_1 === 0) {\n                return [SetTreeModule_empty(), true, SetTreeModule_empty()];\n            }\n            else {\n                return [SetTreeModule_empty(), false, t];\n            }\n        }\n    }\n    else {\n        return [SetTreeModule_empty(), false, SetTreeModule_empty()];\n    }\n}\nexport function SetTreeModule_spliceOutSuccessor(t) {\n    if (t != null) {\n        const t2 = value_1(t);\n        if (t2 instanceof SetTreeNode$1) {\n            const tn = t2;\n            if (SetTreeNode$1__get_Left(tn) == null) {\n                return [SetTreeLeaf$1__get_Key(tn), SetTreeNode$1__get_Right(tn)];\n            }\n            else {\n                const patternInput = SetTreeModule_spliceOutSuccessor(SetTreeNode$1__get_Left(tn));\n                return [patternInput[0], SetTreeModule_mk(patternInput[1], SetTreeLeaf$1__get_Key(tn), SetTreeNode$1__get_Right(tn))];\n            }\n        }\n        else {\n            return [SetTreeLeaf$1__get_Key(t2), SetTreeModule_empty()];\n        }\n    }\n    else {\n        throw new Error(\"internal error: Set.spliceOutSuccessor\");\n    }\n}\nexport function SetTreeModule_remove(comparer, k, t) {\n    if (t != null) {\n        const t2 = value_1(t);\n        const c = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\n        if (t2 instanceof SetTreeNode$1) {\n            const tn = t2;\n            if (c < 0) {\n                return SetTreeModule_rebalance(SetTreeModule_remove(comparer, k, SetTreeNode$1__get_Left(tn)), SetTreeLeaf$1__get_Key(tn), SetTreeNode$1__get_Right(tn));\n            }\n            else if (c === 0) {\n                if (SetTreeNode$1__get_Left(tn) == null) {\n                    return SetTreeNode$1__get_Right(tn);\n                }\n                else if (SetTreeNode$1__get_Right(tn) == null) {\n                    return SetTreeNode$1__get_Left(tn);\n                }\n                else {\n                    const patternInput = SetTreeModule_spliceOutSuccessor(SetTreeNode$1__get_Right(tn));\n                    return SetTreeModule_mk(SetTreeNode$1__get_Left(tn), patternInput[0], patternInput[1]);\n                }\n            }\n            else {\n                return SetTreeModule_rebalance(SetTreeNode$1__get_Left(tn), SetTreeLeaf$1__get_Key(tn), SetTreeModule_remove(comparer, k, SetTreeNode$1__get_Right(tn)));\n            }\n        }\n        else if (c === 0) {\n            return SetTreeModule_empty();\n        }\n        else {\n            return t;\n        }\n    }\n    else {\n        return t;\n    }\n}\nexport function SetTreeModule_mem(comparer_mut, k_mut, t_mut) {\n    SetTreeModule_mem: while (true) {\n        const comparer = comparer_mut, k = k_mut, t = t_mut;\n        if (t != null) {\n            const t2 = value_1(t);\n            const c = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\n            if (t2 instanceof SetTreeNode$1) {\n                const tn = t2;\n                if (c < 0) {\n                    comparer_mut = comparer;\n                    k_mut = k;\n                    t_mut = SetTreeNode$1__get_Left(tn);\n                    continue SetTreeModule_mem;\n                }\n                else if (c === 0) {\n                    return true;\n                }\n                else {\n                    comparer_mut = comparer;\n                    k_mut = k;\n                    t_mut = SetTreeNode$1__get_Right(tn);\n                    continue SetTreeModule_mem;\n                }\n            }\n            else {\n                return c === 0;\n            }\n        }\n        else {\n            return false;\n        }\n        break;\n    }\n}\nexport function SetTreeModule_iter(f_mut, t_mut) {\n    SetTreeModule_iter: while (true) {\n        const f = f_mut, t = t_mut;\n        if (t != null) {\n            const t2 = value_1(t);\n            if (t2 instanceof SetTreeNode$1) {\n                const tn = t2;\n                SetTreeModule_iter(f, SetTreeNode$1__get_Left(tn));\n                f(SetTreeLeaf$1__get_Key(tn));\n                f_mut = f;\n                t_mut = SetTreeNode$1__get_Right(tn);\n                continue SetTreeModule_iter;\n            }\n            else {\n                f(SetTreeLeaf$1__get_Key(t2));\n            }\n        }\n        break;\n    }\n}\nexport function SetTreeModule_foldBackOpt(f_mut, t_mut, x_mut) {\n    SetTreeModule_foldBackOpt: while (true) {\n        const f = f_mut, t = t_mut, x = x_mut;\n        if (t != null) {\n            const t2 = value_1(t);\n            if (t2 instanceof SetTreeNode$1) {\n                const tn = t2;\n                f_mut = f;\n                t_mut = SetTreeNode$1__get_Left(tn);\n                x_mut = f(SetTreeLeaf$1__get_Key(tn), SetTreeModule_foldBackOpt(f, SetTreeNode$1__get_Right(tn), x));\n                continue SetTreeModule_foldBackOpt;\n            }\n            else {\n                return f(SetTreeLeaf$1__get_Key(t2), x);\n            }\n        }\n        else {\n            return x;\n        }\n        break;\n    }\n}\nexport function SetTreeModule_foldBack(f, m, x) {\n    return SetTreeModule_foldBackOpt(f, m, x);\n}\nexport function SetTreeModule_foldOpt(f_mut, x_mut, t_mut) {\n    SetTreeModule_foldOpt: while (true) {\n        const f = f_mut, x = x_mut, t = t_mut;\n        if (t != null) {\n            const t2 = value_1(t);\n            if (t2 instanceof SetTreeNode$1) {\n                const tn = t2;\n                f_mut = f;\n                x_mut = f(SetTreeModule_foldOpt(f, x, SetTreeNode$1__get_Left(tn)), SetTreeLeaf$1__get_Key(tn));\n                t_mut = SetTreeNode$1__get_Right(tn);\n                continue SetTreeModule_foldOpt;\n            }\n            else {\n                return f(x, SetTreeLeaf$1__get_Key(t2));\n            }\n        }\n        else {\n            return x;\n        }\n        break;\n    }\n}\nexport function SetTreeModule_fold(f, x, m) {\n    return SetTreeModule_foldOpt(f, x, m);\n}\nexport function SetTreeModule_forall(f_mut, t_mut) {\n    SetTreeModule_forall: while (true) {\n        const f = f_mut, t = t_mut;\n        if (t != null) {\n            const t2 = value_1(t);\n            if (t2 instanceof SetTreeNode$1) {\n                const tn = t2;\n                if (f(SetTreeLeaf$1__get_Key(tn)) && SetTreeModule_forall(f, SetTreeNode$1__get_Left(tn))) {\n                    f_mut = f;\n                    t_mut = SetTreeNode$1__get_Right(tn);\n                    continue SetTreeModule_forall;\n                }\n                else {\n                    return false;\n                }\n            }\n            else {\n                return f(SetTreeLeaf$1__get_Key(t2));\n            }\n        }\n        else {\n            return true;\n        }\n        break;\n    }\n}\nexport function SetTreeModule_exists(f_mut, t_mut) {\n    SetTreeModule_exists: while (true) {\n        const f = f_mut, t = t_mut;\n        if (t != null) {\n            const t2 = value_1(t);\n            if (t2 instanceof SetTreeNode$1) {\n                const tn = t2;\n                if (f(SetTreeLeaf$1__get_Key(tn)) ? true : SetTreeModule_exists(f, SetTreeNode$1__get_Left(tn))) {\n                    return true;\n                }\n                else {\n                    f_mut = f;\n                    t_mut = SetTreeNode$1__get_Right(tn);\n                    continue SetTreeModule_exists;\n                }\n            }\n            else {\n                return f(SetTreeLeaf$1__get_Key(t2));\n            }\n        }\n        else {\n            return false;\n        }\n        break;\n    }\n}\nexport function SetTreeModule_subset(comparer, a, b) {\n    return SetTreeModule_forall((x) => SetTreeModule_mem(comparer, x, b), a);\n}\nexport function SetTreeModule_properSubset(comparer, a, b) {\n    if (SetTreeModule_forall((x) => SetTreeModule_mem(comparer, x, b), a)) {\n        return SetTreeModule_exists((x_1) => !SetTreeModule_mem(comparer, x_1, a), b);\n    }\n    else {\n        return false;\n    }\n}\nexport function SetTreeModule_filterAux(comparer_mut, f_mut, t_mut, acc_mut) {\n    SetTreeModule_filterAux: while (true) {\n        const comparer = comparer_mut, f = f_mut, t = t_mut, acc = acc_mut;\n        if (t != null) {\n            const t2 = value_1(t);\n            if (t2 instanceof SetTreeNode$1) {\n                const tn = t2;\n                const acc_1 = f(SetTreeLeaf$1__get_Key(tn)) ? SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(tn), acc) : acc;\n                comparer_mut = comparer;\n                f_mut = f;\n                t_mut = SetTreeNode$1__get_Left(tn);\n                acc_mut = SetTreeModule_filterAux(comparer, f, SetTreeNode$1__get_Right(tn), acc_1);\n                continue SetTreeModule_filterAux;\n            }\n            else if (f(SetTreeLeaf$1__get_Key(t2))) {\n                return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc);\n            }\n            else {\n                return acc;\n            }\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\nexport function SetTreeModule_filter(comparer, f, s) {\n    return SetTreeModule_filterAux(comparer, f, s, SetTreeModule_empty());\n}\nexport function SetTreeModule_diffAux(comparer_mut, t_mut, acc_mut) {\n    SetTreeModule_diffAux: while (true) {\n        const comparer = comparer_mut, t = t_mut, acc = acc_mut;\n        if (acc == null) {\n            return acc;\n        }\n        else if (t != null) {\n            const t2 = value_1(t);\n            if (t2 instanceof SetTreeNode$1) {\n                const tn = t2;\n                comparer_mut = comparer;\n                t_mut = SetTreeNode$1__get_Left(tn);\n                acc_mut = SetTreeModule_diffAux(comparer, SetTreeNode$1__get_Right(tn), SetTreeModule_remove(comparer, SetTreeLeaf$1__get_Key(tn), acc));\n                continue SetTreeModule_diffAux;\n            }\n            else {\n                return SetTreeModule_remove(comparer, SetTreeLeaf$1__get_Key(t2), acc);\n            }\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\nexport function SetTreeModule_diff(comparer, a, b) {\n    return SetTreeModule_diffAux(comparer, b, a);\n}\nexport function SetTreeModule_union(comparer, t1, t2) {\n    if (t1 != null) {\n        const t1$0027 = value_1(t1);\n        if (t2 != null) {\n            const t2$0027 = value_1(t2);\n            if (t1$0027 instanceof SetTreeNode$1) {\n                const t1n = t1$0027;\n                if (t2$0027 instanceof SetTreeNode$1) {\n                    const t2n = t2$0027;\n                    if (SetTreeNode$1__get_Height(t1n) > SetTreeNode$1__get_Height(t2n)) {\n                        const patternInput = SetTreeModule_split(comparer, SetTreeLeaf$1__get_Key(t1n), t2);\n                        return SetTreeModule_balance(comparer, SetTreeModule_union(comparer, SetTreeNode$1__get_Left(t1n), patternInput[0]), SetTreeLeaf$1__get_Key(t1n), SetTreeModule_union(comparer, SetTreeNode$1__get_Right(t1n), patternInput[2]));\n                    }\n                    else {\n                        const patternInput_1 = SetTreeModule_split(comparer, SetTreeLeaf$1__get_Key(t2n), t1);\n                        return SetTreeModule_balance(comparer, SetTreeModule_union(comparer, SetTreeNode$1__get_Left(t2n), patternInput_1[0]), SetTreeLeaf$1__get_Key(t2n), SetTreeModule_union(comparer, SetTreeNode$1__get_Right(t2n), patternInput_1[2]));\n                    }\n                }\n                else {\n                    return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2$0027), t1);\n                }\n            }\n            else {\n                return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t1$0027), t2);\n            }\n        }\n        else {\n            return t1;\n        }\n    }\n    else {\n        return t2;\n    }\n}\nexport function SetTreeModule_intersectionAux(comparer_mut, b_mut, t_mut, acc_mut) {\n    SetTreeModule_intersectionAux: while (true) {\n        const comparer = comparer_mut, b = b_mut, t = t_mut, acc = acc_mut;\n        if (t != null) {\n            const t2 = value_1(t);\n            if (t2 instanceof SetTreeNode$1) {\n                const tn = t2;\n                const acc_1 = SetTreeModule_intersectionAux(comparer, b, SetTreeNode$1__get_Right(tn), acc);\n                const acc_2 = SetTreeModule_mem(comparer, SetTreeLeaf$1__get_Key(tn), b) ? SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(tn), acc_1) : acc_1;\n                comparer_mut = comparer;\n                b_mut = b;\n                t_mut = SetTreeNode$1__get_Left(tn);\n                acc_mut = acc_2;\n                continue SetTreeModule_intersectionAux;\n            }\n            else if (SetTreeModule_mem(comparer, SetTreeLeaf$1__get_Key(t2), b)) {\n                return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc);\n            }\n            else {\n                return acc;\n            }\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\nexport function SetTreeModule_intersection(comparer, a, b) {\n    return SetTreeModule_intersectionAux(comparer, b, a, SetTreeModule_empty());\n}\nexport function SetTreeModule_partition1(comparer, f, k, acc1, acc2) {\n    if (f(k)) {\n        return [SetTreeModule_add(comparer, k, acc1), acc2];\n    }\n    else {\n        return [acc1, SetTreeModule_add(comparer, k, acc2)];\n    }\n}\nexport function SetTreeModule_partitionAux(comparer_mut, f_mut, t_mut, acc__mut, acc__1_mut) {\n    SetTreeModule_partitionAux: while (true) {\n        const comparer = comparer_mut, f = f_mut, t = t_mut, acc_ = acc__mut, acc__1 = acc__1_mut;\n        const acc = [acc_, acc__1];\n        if (t != null) {\n            const t2 = value_1(t);\n            if (t2 instanceof SetTreeNode$1) {\n                const tn = t2;\n                const acc_1 = SetTreeModule_partitionAux(comparer, f, SetTreeNode$1__get_Right(tn), acc[0], acc[1]);\n                const acc_4 = SetTreeModule_partition1(comparer, f, SetTreeLeaf$1__get_Key(tn), acc_1[0], acc_1[1]);\n                comparer_mut = comparer;\n                f_mut = f;\n                t_mut = SetTreeNode$1__get_Left(tn);\n                acc__mut = acc_4[0];\n                acc__1_mut = acc_4[1];\n                continue SetTreeModule_partitionAux;\n            }\n            else {\n                return SetTreeModule_partition1(comparer, f, SetTreeLeaf$1__get_Key(t2), acc[0], acc[1]);\n            }\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\nexport function SetTreeModule_partition(comparer, f, s) {\n    return SetTreeModule_partitionAux(comparer, f, s, SetTreeModule_empty(), SetTreeModule_empty());\n}\nexport function SetTreeModule_minimumElementAux(t_mut, n_mut) {\n    SetTreeModule_minimumElementAux: while (true) {\n        const t = t_mut, n = n_mut;\n        if (t != null) {\n            const t2 = value_1(t);\n            if (t2 instanceof SetTreeNode$1) {\n                const tn = t2;\n                t_mut = SetTreeNode$1__get_Left(tn);\n                n_mut = SetTreeLeaf$1__get_Key(tn);\n                continue SetTreeModule_minimumElementAux;\n            }\n            else {\n                return SetTreeLeaf$1__get_Key(t2);\n            }\n        }\n        else {\n            return n;\n        }\n        break;\n    }\n}\nexport function SetTreeModule_minimumElementOpt(t) {\n    if (t != null) {\n        const t2 = value_1(t);\n        if (t2 instanceof SetTreeNode$1) {\n            const tn = t2;\n            return some(SetTreeModule_minimumElementAux(SetTreeNode$1__get_Left(tn), SetTreeLeaf$1__get_Key(tn)));\n        }\n        else {\n            return some(SetTreeLeaf$1__get_Key(t2));\n        }\n    }\n    else {\n        return void 0;\n    }\n}\nexport function SetTreeModule_maximumElementAux(t_mut, n_mut) {\n    SetTreeModule_maximumElementAux: while (true) {\n        const t = t_mut, n = n_mut;\n        if (t != null) {\n            const t2 = value_1(t);\n            if (t2 instanceof SetTreeNode$1) {\n                const tn = t2;\n                t_mut = SetTreeNode$1__get_Right(tn);\n                n_mut = SetTreeLeaf$1__get_Key(tn);\n                continue SetTreeModule_maximumElementAux;\n            }\n            else {\n                return SetTreeLeaf$1__get_Key(t2);\n            }\n        }\n        else {\n            return n;\n        }\n        break;\n    }\n}\nexport function SetTreeModule_maximumElementOpt(t) {\n    if (t != null) {\n        const t2 = value_1(t);\n        if (t2 instanceof SetTreeNode$1) {\n            const tn = t2;\n            return some(SetTreeModule_maximumElementAux(SetTreeNode$1__get_Right(tn), SetTreeLeaf$1__get_Key(tn)));\n        }\n        else {\n            return some(SetTreeLeaf$1__get_Key(t2));\n        }\n    }\n    else {\n        return void 0;\n    }\n}\nexport function SetTreeModule_minimumElement(s) {\n    const matchValue = SetTreeModule_minimumElementOpt(s);\n    if (matchValue == null) {\n        throw new Error(\"Set contains no elements\");\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\nexport function SetTreeModule_maximumElement(s) {\n    const matchValue = SetTreeModule_maximumElementOpt(s);\n    if (matchValue == null) {\n        throw new Error(\"Set contains no elements\");\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\nexport class SetTreeModule_SetIterator$1 extends Record {\n    constructor(stack, started) {\n        super();\n        this.stack = stack;\n        this.started = started;\n    }\n}\nexport function SetTreeModule_SetIterator$1_$reflection(gen0) {\n    return record_type(\"Set.SetTreeModule.SetIterator`1\", [gen0], SetTreeModule_SetIterator$1, () => [[\"stack\", list_type(option_type(SetTreeLeaf$1_$reflection(gen0)))], [\"started\", bool_type]]);\n}\nexport function SetTreeModule_collapseLHS(stack_mut) {\n    SetTreeModule_collapseLHS: while (true) {\n        const stack = stack_mut;\n        if (!isEmpty_1(stack)) {\n            const x = head(stack);\n            const rest = tail(stack);\n            if (x != null) {\n                const x2 = value_1(x);\n                if (x2 instanceof SetTreeNode$1) {\n                    const xn = x2;\n                    stack_mut = ofArrayWithTail([SetTreeNode$1__get_Left(xn), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(xn)), SetTreeNode$1__get_Right(xn)], rest);\n                    continue SetTreeModule_collapseLHS;\n                }\n                else {\n                    return stack;\n                }\n            }\n            else {\n                stack_mut = rest;\n                continue SetTreeModule_collapseLHS;\n            }\n        }\n        else {\n            return empty_1();\n        }\n        break;\n    }\n}\nexport function SetTreeModule_mkIterator(s) {\n    return new SetTreeModule_SetIterator$1(SetTreeModule_collapseLHS(singleton_1(s)), false);\n}\nexport function SetTreeModule_notStarted() {\n    throw new Error(\"Enumeration not started\");\n}\nexport function SetTreeModule_alreadyFinished() {\n    throw new Error(\"Enumeration already started\");\n}\nexport function SetTreeModule_current(i) {\n    if (i.started) {\n        const matchValue = i.stack;\n        if (isEmpty_1(matchValue)) {\n            return SetTreeModule_alreadyFinished();\n        }\n        else if (head(matchValue) != null) {\n            const t = value_1(head(matchValue));\n            return SetTreeLeaf$1__get_Key(t);\n        }\n        else {\n            throw new Error(\"Please report error: Set iterator, unexpected stack for current\");\n        }\n    }\n    else {\n        return SetTreeModule_notStarted();\n    }\n}\nexport function SetTreeModule_moveNext(i) {\n    if (i.started) {\n        const matchValue = i.stack;\n        if (!isEmpty_1(matchValue)) {\n            if (head(matchValue) != null) {\n                const t = value_1(head(matchValue));\n                if (t instanceof SetTreeNode$1) {\n                    throw new Error(\"Please report error: Set iterator, unexpected stack for moveNext\");\n                }\n                else {\n                    i.stack = SetTreeModule_collapseLHS(tail(matchValue));\n                    return !isEmpty_1(i.stack);\n                }\n            }\n            else {\n                throw new Error(\"Please report error: Set iterator, unexpected stack for moveNext\");\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    else {\n        i.started = true;\n        return !isEmpty_1(i.stack);\n    }\n}\nexport function SetTreeModule_mkIEnumerator(s) {\n    let i = SetTreeModule_mkIterator(s);\n    return {\n        \"System.Collections.Generic.IEnumerator`1.get_Current\"() {\n            return SetTreeModule_current(i);\n        },\n        \"System.Collections.IEnumerator.get_Current\"() {\n            return SetTreeModule_current(i);\n        },\n        \"System.Collections.IEnumerator.MoveNext\"() {\n            return SetTreeModule_moveNext(i);\n        },\n        \"System.Collections.IEnumerator.Reset\"() {\n            i = SetTreeModule_mkIterator(s);\n        },\n        Dispose() {\n        },\n    };\n}\n/**\n * Set comparison.  Note this can be expensive.\n */\nexport function SetTreeModule_compareStacks(comparer_mut, l1_mut, l2_mut) {\n    SetTreeModule_compareStacks: while (true) {\n        const comparer = comparer_mut, l1 = l1_mut, l2 = l2_mut;\n        if (!isEmpty_1(l1)) {\n            if (!isEmpty_1(l2)) {\n                if (head(l2) != null) {\n                    if (head(l1) != null) {\n                        const x1_3 = value_1(head(l1));\n                        const x2_3 = value_1(head(l2));\n                        if (x1_3 instanceof SetTreeNode$1) {\n                            const x1n_2 = x1_3;\n                            if (SetTreeNode$1__get_Left(x1n_2) == null) {\n                                if (x2_3 instanceof SetTreeNode$1) {\n                                    const x2n_2 = x2_3;\n                                    if (SetTreeNode$1__get_Left(x2n_2) == null) {\n                                        const c = comparer.Compare(SetTreeLeaf$1__get_Key(x1n_2), SetTreeLeaf$1__get_Key(x2n_2)) | 0;\n                                        if (c !== 0) {\n                                            return c | 0;\n                                        }\n                                        else {\n                                            comparer_mut = comparer;\n                                            l1_mut = cons(SetTreeNode$1__get_Right(x1n_2), tail(l1));\n                                            l2_mut = cons(SetTreeNode$1__get_Right(x2n_2), tail(l2));\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                    }\n                                    else {\n                                        let matchResult, t1_6, x1_4, t2_6, x2_4;\n                                        if (!isEmpty_1(l1)) {\n                                            if (head(l1) != null) {\n                                                matchResult = 0;\n                                                t1_6 = tail(l1);\n                                                x1_4 = value_1(head(l1));\n                                            }\n                                            else if (!isEmpty_1(l2)) {\n                                                if (head(l2) != null) {\n                                                    matchResult = 1;\n                                                    t2_6 = tail(l2);\n                                                    x2_4 = value_1(head(l2));\n                                                }\n                                                else {\n                                                    matchResult = 2;\n                                                }\n                                            }\n                                            else {\n                                                matchResult = 2;\n                                            }\n                                        }\n                                        else if (!isEmpty_1(l2)) {\n                                            if (head(l2) != null) {\n                                                matchResult = 1;\n                                                t2_6 = tail(l2);\n                                                x2_4 = value_1(head(l2));\n                                            }\n                                            else {\n                                                matchResult = 2;\n                                            }\n                                        }\n                                        else {\n                                            matchResult = 2;\n                                        }\n                                        switch (matchResult) {\n                                            case 0:\n                                                if (x1_4 instanceof SetTreeNode$1) {\n                                                    const x1n_3 = x1_4;\n                                                    comparer_mut = comparer;\n                                                    l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1n_3), SetTreeNode$1_$ctor_5F465FC9(SetTreeLeaf$1__get_Key(x1n_3), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1n_3), 0)], t1_6);\n                                                    l2_mut = l2;\n                                                    continue SetTreeModule_compareStacks;\n                                                }\n                                                else {\n                                                    comparer_mut = comparer;\n                                                    l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_4))], t1_6);\n                                                    l2_mut = l2;\n                                                    continue SetTreeModule_compareStacks;\n                                                }\n                                            case 1:\n                                                if (x2_4 instanceof SetTreeNode$1) {\n                                                    const x2n_3 = x2_4;\n                                                    comparer_mut = comparer;\n                                                    l1_mut = l1;\n                                                    l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2n_3), SetTreeNode$1_$ctor_5F465FC9(SetTreeLeaf$1__get_Key(x2n_3), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2n_3), 0)], t2_6);\n                                                    continue SetTreeModule_compareStacks;\n                                                }\n                                                else {\n                                                    comparer_mut = comparer;\n                                                    l1_mut = l1;\n                                                    l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_4))], t2_6);\n                                                    continue SetTreeModule_compareStacks;\n                                                }\n                                            default:\n                                                throw new Error(\"unexpected state in SetTree.compareStacks\");\n                                        }\n                                    }\n                                }\n                                else {\n                                    const c_1 = comparer.Compare(SetTreeLeaf$1__get_Key(x1n_2), SetTreeLeaf$1__get_Key(x2_3)) | 0;\n                                    if (c_1 !== 0) {\n                                        return c_1 | 0;\n                                    }\n                                    else {\n                                        comparer_mut = comparer;\n                                        l1_mut = cons(SetTreeNode$1__get_Right(x1n_2), tail(l1));\n                                        l2_mut = cons(SetTreeModule_empty(), tail(l2));\n                                        continue SetTreeModule_compareStacks;\n                                    }\n                                }\n                            }\n                            else {\n                                let matchResult_1, t1_7, x1_5, t2_7, x2_5;\n                                if (!isEmpty_1(l1)) {\n                                    if (head(l1) != null) {\n                                        matchResult_1 = 0;\n                                        t1_7 = tail(l1);\n                                        x1_5 = value_1(head(l1));\n                                    }\n                                    else if (!isEmpty_1(l2)) {\n                                        if (head(l2) != null) {\n                                            matchResult_1 = 1;\n                                            t2_7 = tail(l2);\n                                            x2_5 = value_1(head(l2));\n                                        }\n                                        else {\n                                            matchResult_1 = 2;\n                                        }\n                                    }\n                                    else {\n                                        matchResult_1 = 2;\n                                    }\n                                }\n                                else if (!isEmpty_1(l2)) {\n                                    if (head(l2) != null) {\n                                        matchResult_1 = 1;\n                                        t2_7 = tail(l2);\n                                        x2_5 = value_1(head(l2));\n                                    }\n                                    else {\n                                        matchResult_1 = 2;\n                                    }\n                                }\n                                else {\n                                    matchResult_1 = 2;\n                                }\n                                switch (matchResult_1) {\n                                    case 0:\n                                        if (x1_5 instanceof SetTreeNode$1) {\n                                            const x1n_4 = x1_5;\n                                            comparer_mut = comparer;\n                                            l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1n_4), SetTreeNode$1_$ctor_5F465FC9(SetTreeLeaf$1__get_Key(x1n_4), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1n_4), 0)], t1_7);\n                                            l2_mut = l2;\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                        else {\n                                            comparer_mut = comparer;\n                                            l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_5))], t1_7);\n                                            l2_mut = l2;\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                    case 1:\n                                        if (x2_5 instanceof SetTreeNode$1) {\n                                            const x2n_4 = x2_5;\n                                            comparer_mut = comparer;\n                                            l1_mut = l1;\n                                            l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2n_4), SetTreeNode$1_$ctor_5F465FC9(SetTreeLeaf$1__get_Key(x2n_4), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2n_4), 0)], t2_7);\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                        else {\n                                            comparer_mut = comparer;\n                                            l1_mut = l1;\n                                            l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_5))], t2_7);\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                    default:\n                                        throw new Error(\"unexpected state in SetTree.compareStacks\");\n                                }\n                            }\n                        }\n                        else if (x2_3 instanceof SetTreeNode$1) {\n                            const x2n_5 = x2_3;\n                            if (SetTreeNode$1__get_Left(x2n_5) == null) {\n                                const c_2 = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2n_5)) | 0;\n                                if (c_2 !== 0) {\n                                    return c_2 | 0;\n                                }\n                                else {\n                                    comparer_mut = comparer;\n                                    l1_mut = cons(SetTreeModule_empty(), tail(l1));\n                                    l2_mut = cons(SetTreeNode$1__get_Right(x2n_5), tail(l2));\n                                    continue SetTreeModule_compareStacks;\n                                }\n                            }\n                            else {\n                                let matchResult_2, t1_8, x1_6, t2_8, x2_6;\n                                if (!isEmpty_1(l1)) {\n                                    if (head(l1) != null) {\n                                        matchResult_2 = 0;\n                                        t1_8 = tail(l1);\n                                        x1_6 = value_1(head(l1));\n                                    }\n                                    else if (!isEmpty_1(l2)) {\n                                        if (head(l2) != null) {\n                                            matchResult_2 = 1;\n                                            t2_8 = tail(l2);\n                                            x2_6 = value_1(head(l2));\n                                        }\n                                        else {\n                                            matchResult_2 = 2;\n                                        }\n                                    }\n                                    else {\n                                        matchResult_2 = 2;\n                                    }\n                                }\n                                else if (!isEmpty_1(l2)) {\n                                    if (head(l2) != null) {\n                                        matchResult_2 = 1;\n                                        t2_8 = tail(l2);\n                                        x2_6 = value_1(head(l2));\n                                    }\n                                    else {\n                                        matchResult_2 = 2;\n                                    }\n                                }\n                                else {\n                                    matchResult_2 = 2;\n                                }\n                                switch (matchResult_2) {\n                                    case 0:\n                                        if (x1_6 instanceof SetTreeNode$1) {\n                                            const x1n_5 = x1_6;\n                                            comparer_mut = comparer;\n                                            l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1n_5), SetTreeNode$1_$ctor_5F465FC9(SetTreeLeaf$1__get_Key(x1n_5), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1n_5), 0)], t1_8);\n                                            l2_mut = l2;\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                        else {\n                                            comparer_mut = comparer;\n                                            l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_6))], t1_8);\n                                            l2_mut = l2;\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                    case 1:\n                                        if (x2_6 instanceof SetTreeNode$1) {\n                                            const x2n_6 = x2_6;\n                                            comparer_mut = comparer;\n                                            l1_mut = l1;\n                                            l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2n_6), SetTreeNode$1_$ctor_5F465FC9(SetTreeLeaf$1__get_Key(x2n_6), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2n_6), 0)], t2_8);\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                        else {\n                                            comparer_mut = comparer;\n                                            l1_mut = l1;\n                                            l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_6))], t2_8);\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                    default:\n                                        throw new Error(\"unexpected state in SetTree.compareStacks\");\n                                }\n                            }\n                        }\n                        else {\n                            const c_3 = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;\n                            if (c_3 !== 0) {\n                                return c_3 | 0;\n                            }\n                            else {\n                                comparer_mut = comparer;\n                                l1_mut = tail(l1);\n                                l2_mut = tail(l2);\n                                continue SetTreeModule_compareStacks;\n                            }\n                        }\n                    }\n                    else {\n                        const x2 = value_1(head(l2));\n                        let matchResult_3, t1_2, x1, t2_2, x2_1;\n                        if (!isEmpty_1(l1)) {\n                            if (head(l1) != null) {\n                                matchResult_3 = 0;\n                                t1_2 = tail(l1);\n                                x1 = value_1(head(l1));\n                            }\n                            else if (!isEmpty_1(l2)) {\n                                if (head(l2) != null) {\n                                    matchResult_3 = 1;\n                                    t2_2 = tail(l2);\n                                    x2_1 = value_1(head(l2));\n                                }\n                                else {\n                                    matchResult_3 = 2;\n                                }\n                            }\n                            else {\n                                matchResult_3 = 2;\n                            }\n                        }\n                        else if (!isEmpty_1(l2)) {\n                            if (head(l2) != null) {\n                                matchResult_3 = 1;\n                                t2_2 = tail(l2);\n                                x2_1 = value_1(head(l2));\n                            }\n                            else {\n                                matchResult_3 = 2;\n                            }\n                        }\n                        else {\n                            matchResult_3 = 2;\n                        }\n                        switch (matchResult_3) {\n                            case 0:\n                                if (x1 instanceof SetTreeNode$1) {\n                                    const x1n = x1;\n                                    comparer_mut = comparer;\n                                    l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1n), SetTreeNode$1_$ctor_5F465FC9(SetTreeLeaf$1__get_Key(x1n), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1n), 0)], t1_2);\n                                    l2_mut = l2;\n                                    continue SetTreeModule_compareStacks;\n                                }\n                                else {\n                                    comparer_mut = comparer;\n                                    l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1))], t1_2);\n                                    l2_mut = l2;\n                                    continue SetTreeModule_compareStacks;\n                                }\n                            case 1:\n                                if (x2_1 instanceof SetTreeNode$1) {\n                                    const x2n = x2_1;\n                                    comparer_mut = comparer;\n                                    l1_mut = l1;\n                                    l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2n), SetTreeNode$1_$ctor_5F465FC9(SetTreeLeaf$1__get_Key(x2n), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2n), 0)], t2_2);\n                                    continue SetTreeModule_compareStacks;\n                                }\n                                else {\n                                    comparer_mut = comparer;\n                                    l1_mut = l1;\n                                    l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_1))], t2_2);\n                                    continue SetTreeModule_compareStacks;\n                                }\n                            default:\n                                throw new Error(\"unexpected state in SetTree.compareStacks\");\n                        }\n                    }\n                }\n                else if (head(l1) != null) {\n                    const x1_1 = value_1(head(l1));\n                    let matchResult_4, t1_4, x1_2, t2_4, x2_2;\n                    if (!isEmpty_1(l1)) {\n                        if (head(l1) != null) {\n                            matchResult_4 = 0;\n                            t1_4 = tail(l1);\n                            x1_2 = value_1(head(l1));\n                        }\n                        else if (!isEmpty_1(l2)) {\n                            if (head(l2) != null) {\n                                matchResult_4 = 1;\n                                t2_4 = tail(l2);\n                                x2_2 = value_1(head(l2));\n                            }\n                            else {\n                                matchResult_4 = 2;\n                            }\n                        }\n                        else {\n                            matchResult_4 = 2;\n                        }\n                    }\n                    else if (!isEmpty_1(l2)) {\n                        if (head(l2) != null) {\n                            matchResult_4 = 1;\n                            t2_4 = tail(l2);\n                            x2_2 = value_1(head(l2));\n                        }\n                        else {\n                            matchResult_4 = 2;\n                        }\n                    }\n                    else {\n                        matchResult_4 = 2;\n                    }\n                    switch (matchResult_4) {\n                        case 0:\n                            if (x1_2 instanceof SetTreeNode$1) {\n                                const x1n_1 = x1_2;\n                                comparer_mut = comparer;\n                                l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1n_1), SetTreeNode$1_$ctor_5F465FC9(SetTreeLeaf$1__get_Key(x1n_1), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1n_1), 0)], t1_4);\n                                l2_mut = l2;\n                                continue SetTreeModule_compareStacks;\n                            }\n                            else {\n                                comparer_mut = comparer;\n                                l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_2))], t1_4);\n                                l2_mut = l2;\n                                continue SetTreeModule_compareStacks;\n                            }\n                        case 1:\n                            if (x2_2 instanceof SetTreeNode$1) {\n                                const x2n_1 = x2_2;\n                                comparer_mut = comparer;\n                                l1_mut = l1;\n                                l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2n_1), SetTreeNode$1_$ctor_5F465FC9(SetTreeLeaf$1__get_Key(x2n_1), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2n_1), 0)], t2_4);\n                                continue SetTreeModule_compareStacks;\n                            }\n                            else {\n                                comparer_mut = comparer;\n                                l1_mut = l1;\n                                l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_2))], t2_4);\n                                continue SetTreeModule_compareStacks;\n                            }\n                        default:\n                            throw new Error(\"unexpected state in SetTree.compareStacks\");\n                    }\n                }\n                else {\n                    comparer_mut = comparer;\n                    l1_mut = tail(l1);\n                    l2_mut = tail(l2);\n                    continue SetTreeModule_compareStacks;\n                }\n            }\n            else {\n                return 1;\n            }\n        }\n        else if (isEmpty_1(l2)) {\n            return 0;\n        }\n        else {\n            return -1;\n        }\n        break;\n    }\n}\nexport function SetTreeModule_compare(comparer, t1, t2) {\n    if (t1 == null) {\n        if (t2 == null) {\n            return 0;\n        }\n        else {\n            return -1;\n        }\n    }\n    else if (t2 == null) {\n        return 1;\n    }\n    else {\n        return SetTreeModule_compareStacks(comparer, singleton_1(t1), singleton_1(t2)) | 0;\n    }\n}\nexport function SetTreeModule_choose(s) {\n    return SetTreeModule_minimumElement(s);\n}\nexport function SetTreeModule_toList(t) {\n    const loop = (t$0027_mut, acc_mut) => {\n        loop: while (true) {\n            const t$0027 = t$0027_mut, acc = acc_mut;\n            if (t$0027 != null) {\n                const t2 = value_1(t$0027);\n                if (t2 instanceof SetTreeNode$1) {\n                    const tn = t2;\n                    t$0027_mut = SetTreeNode$1__get_Left(tn);\n                    acc_mut = cons(SetTreeLeaf$1__get_Key(tn), loop(SetTreeNode$1__get_Right(tn), acc));\n                    continue loop;\n                }\n                else {\n                    return cons(SetTreeLeaf$1__get_Key(t2), acc);\n                }\n            }\n            else {\n                return acc;\n            }\n            break;\n        }\n    };\n    return loop(t, empty_1());\n}\nexport function SetTreeModule_copyToArray(s, arr, i) {\n    let j = i;\n    SetTreeModule_iter((x) => {\n        arr[j] = x;\n        j = ((j + 1) | 0);\n    }, s);\n}\nexport function SetTreeModule_toArray(s) {\n    const n = SetTreeModule_count(s) | 0;\n    const res = fill(new Array(n), 0, n, null);\n    SetTreeModule_copyToArray(s, res, 0);\n    return res;\n}\nexport function SetTreeModule_mkFromEnumerator(comparer_mut, acc_mut, e_mut) {\n    SetTreeModule_mkFromEnumerator: while (true) {\n        const comparer = comparer_mut, acc = acc_mut, e = e_mut;\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            comparer_mut = comparer;\n            acc_mut = SetTreeModule_add(comparer, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), acc);\n            e_mut = e;\n            continue SetTreeModule_mkFromEnumerator;\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\nexport function SetTreeModule_ofArray(comparer, l) {\n    return fold_1((acc, k) => SetTreeModule_add(comparer, k, acc), SetTreeModule_empty(), l);\n}\nexport function SetTreeModule_ofList(comparer, l) {\n    return fold_2((acc, k) => SetTreeModule_add(comparer, k, acc), SetTreeModule_empty(), l);\n}\nexport function SetTreeModule_ofSeq(comparer, c) {\n    if (isArrayLike(c)) {\n        return SetTreeModule_ofArray(comparer, c);\n    }\n    else if (c instanceof FSharpList) {\n        return SetTreeModule_ofList(comparer, c);\n    }\n    else {\n        const ie = getEnumerator(c);\n        try {\n            return SetTreeModule_mkFromEnumerator(comparer, SetTreeModule_empty(), ie);\n        }\n        finally {\n            disposeSafe(ie);\n        }\n    }\n}\nexport class FSharpSet {\n    constructor(comparer, tree) {\n        this.comparer = comparer;\n        this.tree = tree;\n    }\n    GetHashCode() {\n        const this$ = this;\n        return FSharpSet__ComputeHashCode(this$) | 0;\n    }\n    Equals(that) {\n        let that_1;\n        const this$ = this;\n        return (that instanceof FSharpSet) && ((that_1 = that, SetTreeModule_compare(FSharpSet__get_Comparer(this$), FSharpSet__get_Tree(this$), FSharpSet__get_Tree(that_1)) === 0));\n    }\n    toString() {\n        const this$ = this;\n        return (\"set [\" + join(\"; \", map_1((x) => {\n            let copyOfStruct = x;\n            return toString(copyOfStruct);\n        }, this$))) + \"]\";\n    }\n    get [Symbol.toStringTag]() {\n        return \"FSharpSet\";\n    }\n    toJSON() {\n        const this$ = this;\n        return Array.from(this$);\n    }\n    CompareTo(that) {\n        const s = this;\n        return SetTreeModule_compare(FSharpSet__get_Comparer(s), FSharpSet__get_Tree(s), FSharpSet__get_Tree(that)) | 0;\n    }\n    \"System.Collections.Generic.ICollection`1.Add2B595\"(x) {\n        throw new Error(\"ReadOnlyCollection\");\n    }\n    \"System.Collections.Generic.ICollection`1.Clear\"() {\n        throw new Error(\"ReadOnlyCollection\");\n    }\n    \"System.Collections.Generic.ICollection`1.Remove2B595\"(x) {\n        throw new Error(\"ReadOnlyCollection\");\n    }\n    \"System.Collections.Generic.ICollection`1.Contains2B595\"(x) {\n        const s = this;\n        return SetTreeModule_mem(FSharpSet__get_Comparer(s), x, FSharpSet__get_Tree(s));\n    }\n    \"System.Collections.Generic.ICollection`1.CopyToZ3B4C077E\"(arr, i) {\n        const s = this;\n        SetTreeModule_copyToArray(FSharpSet__get_Tree(s), arr, i);\n    }\n    \"System.Collections.Generic.ICollection`1.get_IsReadOnly\"() {\n        return true;\n    }\n    \"System.Collections.Generic.ICollection`1.get_Count\"() {\n        const s = this;\n        return FSharpSet__get_Count(s) | 0;\n    }\n    \"System.Collections.Generic.IReadOnlyCollection`1.get_Count\"() {\n        const s = this;\n        return FSharpSet__get_Count(s) | 0;\n    }\n    GetEnumerator() {\n        const s = this;\n        return SetTreeModule_mkIEnumerator(FSharpSet__get_Tree(s));\n    }\n    [Symbol.iterator]() {\n        return toIterator(getEnumerator(this));\n    }\n    \"System.Collections.IEnumerable.GetEnumerator\"() {\n        const s = this;\n        return SetTreeModule_mkIEnumerator(FSharpSet__get_Tree(s));\n    }\n    get size() {\n        const s = this;\n        return FSharpSet__get_Count(s) | 0;\n    }\n    add(k) {\n        const s = this;\n        throw new Error(\"Set cannot be mutated\");\n        return s;\n    }\n    clear() {\n        throw new Error(\"Set cannot be mutated\");\n    }\n    delete(k) {\n        throw new Error(\"Set cannot be mutated\");\n        return false;\n    }\n    has(k) {\n        const s = this;\n        return FSharpSet__Contains(s, k);\n    }\n    keys() {\n        const s = this;\n        return map_1((x) => x, s);\n    }\n    values() {\n        const s = this;\n        return map_1((x) => x, s);\n    }\n    entries() {\n        const s = this;\n        return map_1((v) => [v, v], s);\n    }\n    forEach(f, thisArg) {\n        const s = this;\n        iterate_1((x) => {\n            f(x, x, s);\n        }, s);\n    }\n}\nexport function FSharpSet_$reflection(gen0) {\n    return class_type(\"Set.FSharpSet\", [gen0], FSharpSet);\n}\nexport function FSharpSet_$ctor(comparer, tree) {\n    return new FSharpSet(comparer, tree);\n}\nexport function FSharpSet__get_Comparer(set$) {\n    return set$.comparer;\n}\nexport function FSharpSet__get_Tree(set$) {\n    return set$.tree;\n}\nexport function FSharpSet_Empty(comparer) {\n    return FSharpSet_$ctor(comparer, SetTreeModule_empty());\n}\nexport function FSharpSet__Add(s, value) {\n    return FSharpSet_$ctor(FSharpSet__get_Comparer(s), SetTreeModule_add(FSharpSet__get_Comparer(s), value, FSharpSet__get_Tree(s)));\n}\nexport function FSharpSet__Remove(s, value) {\n    return FSharpSet_$ctor(FSharpSet__get_Comparer(s), SetTreeModule_remove(FSharpSet__get_Comparer(s), value, FSharpSet__get_Tree(s)));\n}\nexport function FSharpSet__get_Count(s) {\n    return SetTreeModule_count(FSharpSet__get_Tree(s));\n}\nexport function FSharpSet__Contains(s, value) {\n    return SetTreeModule_mem(FSharpSet__get_Comparer(s), value, FSharpSet__get_Tree(s));\n}\nexport function FSharpSet__Iterate(s, x) {\n    SetTreeModule_iter(x, FSharpSet__get_Tree(s));\n}\nexport function FSharpSet__Fold(s, f, z) {\n    const f_1 = f;\n    return SetTreeModule_fold((x, z_1) => f_1(z_1, x), z, FSharpSet__get_Tree(s));\n}\nexport function FSharpSet__get_IsEmpty(s) {\n    return FSharpSet__get_Tree(s) == null;\n}\nexport function FSharpSet__Partition(s, f) {\n    if (FSharpSet__get_Tree(s) == null) {\n        return [s, s];\n    }\n    else {\n        const patternInput = SetTreeModule_partition(FSharpSet__get_Comparer(s), f, FSharpSet__get_Tree(s));\n        return [FSharpSet_$ctor(FSharpSet__get_Comparer(s), patternInput[0]), FSharpSet_$ctor(FSharpSet__get_Comparer(s), patternInput[1])];\n    }\n}\nexport function FSharpSet__Filter(s, f) {\n    if (FSharpSet__get_Tree(s) == null) {\n        return s;\n    }\n    else {\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(s), SetTreeModule_filter(FSharpSet__get_Comparer(s), f, FSharpSet__get_Tree(s)));\n    }\n}\nexport function FSharpSet__Map(s, f, comparer) {\n    return FSharpSet_$ctor(comparer, SetTreeModule_fold((acc, k) => SetTreeModule_add(comparer, f(k), acc), SetTreeModule_empty(), FSharpSet__get_Tree(s)));\n}\nexport function FSharpSet__Exists(s, f) {\n    return SetTreeModule_exists(f, FSharpSet__get_Tree(s));\n}\nexport function FSharpSet__ForAll(s, f) {\n    return SetTreeModule_forall(f, FSharpSet__get_Tree(s));\n}\nexport function FSharpSet_op_Subtraction(set1, set2) {\n    if (FSharpSet__get_Tree(set1) == null) {\n        return set1;\n    }\n    else if (FSharpSet__get_Tree(set2) == null) {\n        return set1;\n    }\n    else {\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(set1), SetTreeModule_diff(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2)));\n    }\n}\nexport function FSharpSet_op_Addition(set1, set2) {\n    if (FSharpSet__get_Tree(set2) == null) {\n        return set1;\n    }\n    else if (FSharpSet__get_Tree(set1) == null) {\n        return set2;\n    }\n    else {\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(set1), SetTreeModule_union(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2)));\n    }\n}\nexport function FSharpSet_Intersection(a, b) {\n    if (FSharpSet__get_Tree(b) == null) {\n        return b;\n    }\n    else if (FSharpSet__get_Tree(a) == null) {\n        return a;\n    }\n    else {\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(a), SetTreeModule_intersection(FSharpSet__get_Comparer(a), FSharpSet__get_Tree(a), FSharpSet__get_Tree(b)));\n    }\n}\nexport function FSharpSet_IntersectionMany(sets) {\n    return reduce(FSharpSet_Intersection, sets);\n}\nexport function FSharpSet_Equality(a, b) {\n    return SetTreeModule_compare(FSharpSet__get_Comparer(a), FSharpSet__get_Tree(a), FSharpSet__get_Tree(b)) === 0;\n}\nexport function FSharpSet_Compare(a, b) {\n    return SetTreeModule_compare(FSharpSet__get_Comparer(a), FSharpSet__get_Tree(a), FSharpSet__get_Tree(b));\n}\nexport function FSharpSet__get_Choose(x) {\n    return SetTreeModule_choose(FSharpSet__get_Tree(x));\n}\nexport function FSharpSet__get_MinimumElement(x) {\n    return SetTreeModule_minimumElement(FSharpSet__get_Tree(x));\n}\nexport function FSharpSet__get_MaximumElement(x) {\n    return SetTreeModule_maximumElement(FSharpSet__get_Tree(x));\n}\nexport function FSharpSet__IsSubsetOf(x, otherSet) {\n    return SetTreeModule_subset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(x), FSharpSet__get_Tree(otherSet));\n}\nexport function FSharpSet__IsSupersetOf(x, otherSet) {\n    return SetTreeModule_subset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(otherSet), FSharpSet__get_Tree(x));\n}\nexport function FSharpSet__IsProperSubsetOf(x, otherSet) {\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(x), FSharpSet__get_Tree(otherSet));\n}\nexport function FSharpSet__IsProperSupersetOf(x, otherSet) {\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(otherSet), FSharpSet__get_Tree(x));\n}\nexport function FSharpSet__ToList(x) {\n    return SetTreeModule_toList(FSharpSet__get_Tree(x));\n}\nexport function FSharpSet__ToArray(x) {\n    return SetTreeModule_toArray(FSharpSet__get_Tree(x));\n}\nexport function FSharpSet__ComputeHashCode(this$) {\n    let res = 0;\n    const enumerator = getEnumerator(this$);\n    try {\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            const x_1 = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n            res = ((((res << 1) + structuralHash(x_1)) + 631) | 0);\n        }\n    }\n    finally {\n        disposeSafe(enumerator);\n    }\n    return Math.abs(res) | 0;\n}\nexport function isEmpty(set$) {\n    return FSharpSet__get_IsEmpty(set$);\n}\nexport function contains(element, set$) {\n    return FSharpSet__Contains(set$, element);\n}\nexport function add(value, set$) {\n    return FSharpSet__Add(set$, value);\n}\nexport function singleton(value, comparer) {\n    return FSharpSet__Add(FSharpSet_Empty(comparer), value);\n}\nexport function remove(value, set$) {\n    return FSharpSet__Remove(set$, value);\n}\nexport function union(set1, set2) {\n    return FSharpSet_op_Addition(set1, set2);\n}\nexport function unionMany(sets, comparer) {\n    return fold_3(FSharpSet_op_Addition, FSharpSet_Empty(comparer), sets);\n}\nexport function intersect(set1, set2) {\n    return FSharpSet_Intersection(set1, set2);\n}\nexport function intersectMany(sets) {\n    return FSharpSet_IntersectionMany(sets);\n}\nexport function iterate(action, set$) {\n    FSharpSet__Iterate(set$, action);\n}\nexport function empty(comparer) {\n    return FSharpSet_Empty(comparer);\n}\nexport function forAll(predicate, set$) {\n    return FSharpSet__ForAll(set$, predicate);\n}\nexport function exists(predicate, set$) {\n    return FSharpSet__Exists(set$, predicate);\n}\nexport function filter(predicate, set$) {\n    return FSharpSet__Filter(set$, predicate);\n}\nexport function partition(predicate, set$) {\n    return FSharpSet__Partition(set$, predicate);\n}\nexport function fold(folder, state, set$) {\n    return SetTreeModule_fold(folder, state, FSharpSet__get_Tree(set$));\n}\nexport function foldBack(folder, set$, state) {\n    return SetTreeModule_foldBack(folder, FSharpSet__get_Tree(set$), state);\n}\nexport function map(mapping, set$, comparer) {\n    return FSharpSet__Map(set$, mapping, comparer);\n}\nexport function count(set$) {\n    return FSharpSet__get_Count(set$);\n}\nexport function ofList(elements, comparer) {\n    return FSharpSet_$ctor(comparer, SetTreeModule_ofSeq(comparer, elements));\n}\nexport function ofArray(array, comparer) {\n    return FSharpSet_$ctor(comparer, SetTreeModule_ofArray(comparer, array));\n}\nexport function toList(set$) {\n    return FSharpSet__ToList(set$);\n}\nexport function toArray(set$) {\n    return FSharpSet__ToArray(set$);\n}\nexport function toSeq(set$) {\n    return map_1((x) => x, set$);\n}\nexport function ofSeq(elements, comparer) {\n    return FSharpSet_$ctor(comparer, SetTreeModule_ofSeq(comparer, elements));\n}\nexport function difference(set1, set2) {\n    return FSharpSet_op_Subtraction(set1, set2);\n}\nexport function isSubset(set1, set2) {\n    return SetTreeModule_subset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2));\n}\nexport function isSuperset(set1, set2) {\n    return SetTreeModule_subset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set2), FSharpSet__get_Tree(set1));\n}\nexport function isProperSubset(set1, set2) {\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2));\n}\nexport function isProperSuperset(set1, set2) {\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set2), FSharpSet__get_Tree(set1));\n}\nexport function minElement(set$) {\n    return FSharpSet__get_MinimumElement(set$);\n}\nexport function maxElement(set$) {\n    return FSharpSet__get_MaximumElement(set$);\n}\nexport function unionWith(s1, s2) {\n    return fold_3((acc, x) => acc.add(x), s1, s2);\n}\nexport function newMutableSetWith(s1, s2) {\n    if (s1 instanceof HashSet) {\n        const s1_1 = s1;\n        return HashSet_$ctor_Z6150332D(s2, HashSet__get_Comparer(s1_1));\n    }\n    else {\n        return new Set(s2);\n    }\n}\nexport function intersectWith(s1, s2) {\n    const s2_1 = newMutableSetWith(s1, s2);\n    iterate_1((x) => {\n        if (!s2_1.has(x)) {\n            s1.delete(x);\n        }\n    }, s1.values());\n}\nexport function exceptWith(s1, s2) {\n    iterate_1((x) => {\n        s1.delete(x);\n    }, s2);\n}\nexport function isSubsetOf(s1, s2) {\n    const s2_1 = newMutableSetWith(s1, s2);\n    return forAll_1((arg) => s2_1.has(arg), s1.values());\n}\nexport function isSupersetOf(s1, s2) {\n    return forAll_1((arg) => s1.has(arg), s2);\n}\nexport function isProperSubsetOf(s1, s2) {\n    const s2_1 = newMutableSetWith(s1, s2);\n    if (s2_1.size > s1.size) {\n        return forAll_1((arg) => s2_1.has(arg), s1.values());\n    }\n    else {\n        return false;\n    }\n}\nexport function isProperSupersetOf(s1, s2) {\n    const s2_1 = cache(s2);\n    if (exists_1((arg_1) => !s1.has(arg_1), s2_1)) {\n        return forAll_1((arg_2) => s1.has(arg_2), s2_1);\n    }\n    else {\n        return false;\n    }\n}\n","\nnamespace Thoth.Json\nopen System.Text.RegularExpressions\n\n[<RequireQualifiedAccess>]\nmodule Decode =\n\n    open System.Globalization\n    open Fable.Core\n    open Fable.Core.JsInterop\n\n    module Helpers =\n        [<Emit(\"typeof $0\")>]\n        let jsTypeof (_ : JsonValue) : string = jsNative\n\n        [<Emit(\"$0 instanceof SyntaxError\")>]\n        let isSyntaxError (_ : JsonValue) : bool = jsNative\n\n        let inline getField (fieldName: string) (o: JsonValue) = o?(fieldName)\n        let inline isString (o: JsonValue) : bool = o :? string\n\n        let inline isBoolean (o: JsonValue) : bool = o :? bool\n\n        let inline isNumber (o: JsonValue) : bool = jsTypeof o = \"number\"\n\n        let inline isArray (o: JsonValue) : bool = JS.Constructors.Array.isArray(o)\n\n        [<Emit(\"$0 === null ? false : (Object.getPrototypeOf($0 || false) === Object.prototype)\")>]\n        let isObject (_ : JsonValue) : bool = jsNative\n\n        let inline isNaN (o: JsonValue) : bool = JS.Constructors.Number.isNaN(!!o)\n\n        let inline isNullValue (o: JsonValue): bool = isNull o\n\n        /// is the value an integer? This returns false for 1.1, NaN, Infinite, ...\n        [<Emit(\"isFinite($0) && Math.floor($0) === $0\")>]\n        let isIntegralValue (_: JsonValue) : bool = jsNative\n\n        [<Emit(\"$1 <= $0 && $0 < $2\")>]\n        let isBetweenInclusive(_v: JsonValue, _min: obj, _max: obj) = jsNative\n\n        [<Emit(\"isFinite($0) && !($0 % 1)\")>]\n        let isIntFinite (_: JsonValue) : bool = jsNative\n\n        let isUndefined (o: JsonValue): bool = jsTypeof o = \"undefined\"\n\n        [<Emit(\"JSON.stringify($0, null, 4) + ''\")>]\n        let anyToString (_: JsonValue) : string = jsNative\n\n        let inline isFunction (o: JsonValue) : bool = jsTypeof o = \"function\"\n\n        let inline objectKeys (o: JsonValue) : string seq = upcast JS.Constructors.Object.keys(o)\n        let inline asBool (o: JsonValue): bool = unbox o\n        let inline asInt (o: JsonValue): int = unbox o\n        let inline asFloat (o: JsonValue): float = unbox o\n        let inline asFloat32 (o: JsonValue): float32 = unbox o\n        let inline asString (o: JsonValue): string = unbox o\n        let inline asArray (o: JsonValue): JsonValue[] = unbox o\n\n    let private genericMsg msg value newLine =\n        try\n            \"Expecting \"\n                + msg\n                + \" but instead got:\"\n                + (if newLine then \"\\n\" else \" \")\n                + (Helpers.anyToString value)\n        with\n            | _ ->\n                \"Expecting \"\n                + msg\n                + \" but decoder failed. Couldn't report given value due to circular structure.\"\n                + (if newLine then \"\\n\" else \" \")\n\n    let private errorToString (path : string, error) =\n        let reason =\n            match error with\n            | BadPrimitive (msg, value) ->\n                genericMsg msg value false\n            | BadType (msg, value) ->\n                genericMsg msg value true\n            | BadPrimitiveExtra (msg, value, reason) ->\n                genericMsg msg value false + \"\\nReason: \" + reason\n            | BadField (msg, value) ->\n                genericMsg msg value true\n            | BadPath (msg, value, fieldName) ->\n                genericMsg msg value true + (\"\\nNode `\" + fieldName + \"` is unkown.\")\n            | TooSmallArray (msg, value) ->\n                \"Expecting \" + msg + \".\\n\" + (Helpers.anyToString value)\n            | BadOneOf messages ->\n                \"The following errors were found:\\n\\n\" + String.concat \"\\n\\n\" messages\n            | FailMessage msg ->\n                \"The following `failure` occurred with the decoder: \" + msg\n\n        match error with\n        | BadOneOf _ ->\n            // Don't need to show the path here because each error case will show it's own path\n            reason\n        | _ ->\n            \"Error at: `\" + path + \"`\\n\" + reason\n\n    ///////////////\n    // Runners ///\n    /////////////\n\n    let fromValue (path : string) (decoder : Decoder<'T>) =\n        fun value ->\n            match decoder path value with\n            | Ok success ->\n                Ok success\n            | Error error ->\n                Error (errorToString error)\n\n    let fromString (decoder : Decoder<'T>) =\n        fun value ->\n            try\n               let json = JS.JSON.parse value\n               fromValue \"$\" decoder json\n            with\n                | ex when Helpers.isSyntaxError ex ->\n                    Error(\"Given an invalid JSON: \" + ex.Message)\n\n    let unsafeFromString (decoder : Decoder<'T>) =\n        fun value ->\n            match fromString decoder value with\n            | Ok x -> x\n            | Error msg -> failwith msg\n\n    [<System.Obsolete(\"Please use fromValue instead\")>]\n    let decodeValue (path : string) (decoder : Decoder<'T>) = fromValue path decoder\n\n    [<System.Obsolete(\"Please use fromString instead\")>]\n    let decodeString (decoder : Decoder<'T>) = fromString decoder\n\n    //////////////////\n    // Primitives ///\n    ////////////////\n\n    let string : Decoder<string> =\n        fun path value ->\n            if Helpers.isString value then\n                Ok(Helpers.asString value)\n            else\n                (path, BadPrimitive(\"a string\", value)) |> Error\n\n    let guid : Decoder<System.Guid> =\n        fun path value ->\n            if Helpers.isString value then\n                match System.Guid.TryParse (Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"a guid\", value)) |> Error\n            else (path, BadPrimitive(\"a guid\", value)) |> Error\n\n    let unit : Decoder<unit> =\n        fun path value ->\n            if Helpers.isNullValue value then\n                Ok ()\n            else\n                (path, BadPrimitive(\"null\", value)) |> Error\n\n    let inline private integral\n                    (name : string)\n                    (tryParse : (string -> bool * 'T))\n                    (min : unit->'T)\n                    (max : unit->'T)\n                    (conv : float -> 'T) : Decoder< 'T > =\n\n        fun path value ->\n            if Helpers.isNumber value then\n                let value : float = unbox value\n                if Helpers.isIntegralValue value then\n                    if (float(min())) <= value && value <= (float(max())) then\n                        Ok(conv value)\n                    else\n                        (path, BadPrimitiveExtra(name, value, \"Value was either too large or too small for \" + name)) |> Error\n                else\n                    (path, BadPrimitiveExtra(name, value, \"Value is not an integral value\")) |> Error\n            elif Helpers.isString value then\n                match tryParse (Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(name, value)) |> Error\n            else\n                (path, BadPrimitive(name, value)) |> Error\n\n    let sbyte : Decoder<sbyte> =\n        integral\n            \"a sbyte\"\n            System.SByte.TryParse\n            (fun () -> System.SByte.MinValue)\n            (fun () -> System.SByte.MaxValue)\n            sbyte\n\n    /// Alias to Decode.uint8\n    let byte : Decoder<byte> =\n        integral\n            \"a byte\"\n            System.Byte.TryParse\n            (fun () -> System.Byte.MinValue)\n            (fun () -> System.Byte.MaxValue)\n            byte\n\n    let int16 : Decoder<int16> =\n        integral\n            \"an int16\"\n            System.Int16.TryParse\n            (fun () -> System.Int16.MinValue)\n            (fun () -> System.Int16.MaxValue)\n            int16\n\n    let uint16 : Decoder<uint16> =\n        integral\n            \"an uint16\"\n            System.UInt16.TryParse\n            (fun () -> System.UInt16.MinValue)\n            (fun () -> System.UInt16.MaxValue)\n            uint16\n\n    let int : Decoder<int> =\n        integral\n            \"an int\"\n            System.Int32.TryParse\n            (fun () -> System.Int32.MinValue)\n            (fun () -> System.Int32.MaxValue)\n            int\n\n    let uint32 : Decoder<uint32> =\n        integral\n            \"an uint32\"\n            System.UInt32.TryParse\n            (fun () -> System.UInt32.MinValue)\n            (fun () -> System.UInt32.MaxValue)\n            uint32\n\n    let int64 : Decoder<int64> =\n        integral\n            \"an int64\"\n            System.Int64.TryParse\n            (fun () -> System.Int64.MinValue)\n            (fun () -> System.Int64.MaxValue)\n            int64\n\n    let uint64 : Decoder<uint64> =\n        integral\n            \"an uint64\"\n            System.UInt64.TryParse\n            (fun () -> System.UInt64.MinValue)\n            (fun () -> System.UInt64.MaxValue)\n            uint64\n\n    let bigint : Decoder<bigint> =\n        fun path value ->\n            if Helpers.isNumber value then\n                Helpers.asInt value |> bigint |> Ok\n            elif Helpers.isString value then\n                // TODO: BigInt.TryParse has been added in Fable 2.1.4\n                // Don't use it for now to support lower Fable versions\n                try\n                    bigint.Parse (Helpers.asString value) |> Ok\n                with _ ->\n                    (path, BadPrimitive(\"a bigint\", value)) |> Error\n            else\n                (path, BadPrimitive(\"a bigint\", value)) |> Error\n\n    let bool : Decoder<bool> =\n        fun path value ->\n            if Helpers.isBoolean value then\n                Ok(Helpers.asBool value)\n            else\n                (path, BadPrimitive(\"a boolean\", value)) |> Error\n\n    let float : Decoder<float> =\n        fun path value ->\n            if Helpers.isNumber value then\n                Ok(Helpers.asFloat value)\n            else\n                (path, BadPrimitive(\"a float\", value)) |> Error\n\n    let float32 : Decoder<float32> =\n        fun path value ->\n            if Helpers.isNumber value then\n                Ok(Helpers.asFloat32 value)\n            else\n                (path, BadPrimitive(\"a float32\", value)) |> Error\n\n    let decimal : Decoder<decimal> =\n        fun path value ->\n            if Helpers.isNumber value then\n                Helpers.asFloat value |> decimal |> Ok\n            elif Helpers.isString value then\n                match System.Decimal.TryParse (Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"a decimal\", value)) |> Error\n            else\n                (path, BadPrimitive(\"a decimal\", value)) |> Error\n\n    let datetime : Decoder<System.DateTime> =\n        fun path value ->\n            if Helpers.isString value then\n                match System.DateTime.TryParse (Helpers.asString value) with\n                | true, x -> x.ToUniversalTime() |> Ok\n                | _ -> (path, BadPrimitive(\"a datetime\", value)) |> Error\n            else\n                (path, BadPrimitive(\"a datetime\", value)) |> Error\n\n    let datetimeOffset : Decoder<System.DateTimeOffset> =\n        fun path value ->\n            if Helpers.isString value then\n                match System.DateTimeOffset.TryParse(Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"a datetimeoffset\", value)) |> Error\n            else\n                (path, BadPrimitive(\"a datetime\", value)) |> Error\n\n    let timespan : Decoder<System.TimeSpan> =\n        fun path value ->\n            if Helpers.isString value then\n                match System.TimeSpan.TryParse(Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"a timespan\", value)) |> Error\n            else\n                (path, BadPrimitive(\"a timespan\", value)) |> Error\n\n    /////////////////////////\n    // Object primitives ///\n    ///////////////////////\n\n    let private decodeMaybeNull path (decoder : Decoder<'T>) value =\n        // The decoder may be an option decoder so give it an opportunity to check null values\n        match decoder path value with\n        | Ok v -> Ok(Some v)\n        | Error _ when Helpers.isNullValue value -> Ok None\n        | Error er -> Error er\n\n    let optional (fieldName : string) (decoder : Decoder<'value>) : Decoder<'value option> =\n        fun path value ->\n            if Helpers.isObject value then\n                let fieldValue = Helpers.getField fieldName value\n                if Helpers.isUndefined fieldValue then Ok None\n                else decodeMaybeNull (path + \".\" + fieldName) decoder fieldValue\n            else\n                Error(path, BadType(\"an object\", value))\n\n    let private badPathError fieldNames currentPath value =\n        let currentPath = defaultArg currentPath (\"$\"::fieldNames |> String.concat \".\")\n        let msg = \"an object with path `\" + (String.concat \".\" fieldNames) + \"`\"\n        Error(currentPath, BadPath (msg, value, List.tryLast fieldNames |> Option.defaultValue \"\"))\n\n    let optionalAt (fieldNames : string list) (decoder : Decoder<'value>) : Decoder<'value option> =\n        fun firstPath firstValue ->\n            ((firstPath, firstValue, None), fieldNames)\n            ||> List.fold (fun (curPath, curValue, res) field ->\n                match res with\n                | Some _ -> curPath, curValue, res\n                | None ->\n                    if Helpers.isNullValue curValue then\n                        curPath, curValue, Some (Ok None)\n                    elif Helpers.isObject curValue then\n                        let curValue = Helpers.getField field curValue\n                        curPath + \".\" + field, curValue, None\n                    else\n                        let res = Error(curPath, BadType(\"an object\", curValue))\n                        curPath, curValue, Some res)\n            |> function\n                | _, _, Some res -> res\n                | lastPath, lastValue, None ->\n                    if Helpers.isUndefined lastValue then Ok None\n                    else decodeMaybeNull lastPath decoder lastValue\n\n    let field (fieldName: string) (decoder : Decoder<'value>) : Decoder<'value> =\n        fun path value ->\n            if Helpers.isObject value then\n                let fieldValue = Helpers.getField fieldName value\n                if Helpers.isUndefined fieldValue then\n                    Error(path, BadField (\"an object with a field named `\" + fieldName + \"`\", value))\n                else\n                    decoder (path + \".\" + fieldName) fieldValue\n            else\n                Error(path, BadType(\"an object\", value))\n\n    let at (fieldNames: string list) (decoder : Decoder<'value>) : Decoder<'value> =\n        fun firstPath firstValue ->\n            ((firstPath, firstValue, None), fieldNames)\n            ||> List.fold (fun (curPath, curValue, res) field ->\n                match res with\n                | Some _ -> curPath, curValue, res\n                | None ->\n                    if Helpers.isNullValue curValue then\n                        let res = badPathError fieldNames (Some curPath) firstValue\n                        curPath, curValue, Some res\n                    elif Helpers.isObject curValue then\n                        let curValue = Helpers.getField field curValue\n                        if Helpers.isUndefined curValue then\n                            let res = badPathError fieldNames None firstValue\n                            curPath, curValue, Some res\n                        else\n                            curPath + \".\" + field, curValue, None\n                    else\n                        let res = Error(curPath, BadType(\"an object\", curValue))\n                        curPath, curValue, Some res)\n            |> function\n                | _, _, Some res -> res\n                | lastPath, lastValue, None ->\n                    decoder lastPath lastValue\n\n    let index (requestedIndex: int) (decoder : Decoder<'value>) : Decoder<'value> =\n        fun path value ->\n            let currentPath = path + \".[\" + (Operators.string requestedIndex) + \"]\"\n            if Helpers.isArray value then\n                let vArray = Helpers.asArray value\n                if requestedIndex < vArray.Length then\n                    decoder currentPath (vArray.[requestedIndex])\n                else\n                    let msg =\n                        \"a longer array. Need index `\"\n                            + (requestedIndex.ToString())\n                            + \"` but there are only `\"\n                            + (vArray.Length.ToString())\n                            + \"` entries\"\n\n                    (currentPath, TooSmallArray(msg, value))\n                    |> Error\n            else\n                (currentPath, BadPrimitive(\"an array\", value))\n                |> Error\n\n    let option (decoder : Decoder<'value>) : Decoder<'value option> =\n        fun path value ->\n            if Helpers.isNullValue value then Ok None\n            else decoder path value |> Result.map Some\n\n    //////////////////////\n    // Data structure ///\n    ////////////////////\n\n    let list (decoder : Decoder<'value>) : Decoder<'value list> =\n        fun path value ->\n            if Helpers.isArray value then\n                let mutable i = -1\n                let tokens = Helpers.asArray value\n                (Ok [], tokens) ||> Array.fold (fun acc value ->\n                    i <- i + 1\n                    match acc with\n                    | Error _ -> acc\n                    | Ok acc ->\n                        match decoder (path + \".[\" + (i.ToString()) + \"]\") value with\n                        | Error er -> Error er\n                        | Ok value -> Ok (value::acc))\n                |> Result.map List.rev\n            else\n                (path, BadPrimitive (\"a list\", value))\n                |> Error\n\n    let seq (decoder : Decoder<'value>) : Decoder<'value seq> =\n        fun path value ->\n            if Helpers.isArray value then\n                let mutable i = -1\n                let tokens = Helpers.asArray value\n                (Ok (seq []), tokens) ||> Array.fold (fun acc value ->\n                    i <- i + 1\n                    match acc with\n                    | Error _ -> acc\n                    | Ok acc ->\n                        match decoder (path + \".[\" + (i.ToString()) + \"]\") value with\n                        | Error er -> Error er\n                        | Ok value -> Ok (Seq.append [value] acc))\n                |> Result.map Seq.rev\n            else\n                (path, BadPrimitive (\"a seq\", value))\n                |> Error\n\n    let array (decoder : Decoder<'value>) : Decoder<'value array> =\n        fun path value ->\n            if Helpers.isArray value then\n                let mutable i = -1\n                let tokens = Helpers.asArray value\n                let arr = Array.zeroCreate tokens.Length\n                (Ok arr, tokens) ||> Array.fold (fun acc value ->\n                    i <- i + 1\n                    match acc with\n                    | Error _ -> acc\n                    | Ok acc ->\n                        match decoder (path + \".[\" + (i.ToString()) + \"]\") value with\n                        | Error er -> Error er\n                        | Ok value -> acc.[i] <- value; Ok acc)\n            else\n                (path, BadPrimitive (\"an array\", value))\n                |> Error\n\n    let keys: Decoder<string list> =\n        fun path value ->\n            if Helpers.isObject value then\n                Helpers.objectKeys value |> List.ofSeq |> Ok\n            else\n                (path, BadPrimitive (\"an object\", value))\n                |> Error\n\n    let keyValuePairs (decoder : Decoder<'value>) : Decoder<(string * 'value) list> =\n        fun path value ->\n            match keys path value with\n            | Ok objectKeys ->\n                (Ok [], objectKeys) ||> List.fold (fun acc prop ->\n                    match acc with\n                    | Error _ -> acc\n                    | Ok acc ->\n                        match Helpers.getField prop value |> decoder path with\n                        | Error er -> Error er\n                        | Ok value -> (prop, value)::acc |> Ok)\n                |> Result.map List.rev\n            | Error e -> Error e\n\n    //////////////////////////////\n    // Inconsistent Structure ///\n    ////////////////////////////\n\n    let oneOf (decoders : Decoder<'value> list) : Decoder<'value> =\n        fun path value ->\n            let rec runner (decoders : Decoder<'value> list) (errors : string list) =\n                match decoders with\n                | head::tail ->\n                    match fromValue path head value with\n                    | Ok v ->\n                        Ok v\n                    | Error error -> runner tail (errors @ [error])\n                | [] -> (path, BadOneOf errors) |> Error\n\n            runner decoders []\n\n    //////////////////////\n    // Fancy decoding ///\n    ////////////////////\n\n    let nil (output : 'a) : Decoder<'a> =\n        fun path value ->\n            if Helpers.isNullValue value then\n                Ok output\n            else\n                (path, BadPrimitive(\"null\", value)) |> Error\n\n    let value _ v = Ok v\n\n    let succeed (output : 'a) : Decoder<'a> =\n        fun _ _ ->\n            Ok output\n\n    let fail (msg: string) : Decoder<'a> =\n        fun path _ ->\n            (path, FailMessage msg) |> Error\n\n    let andThen (cb: 'a -> Decoder<'b>) (decoder : Decoder<'a>) : Decoder<'b> =\n        fun path value ->\n            match decoder path value with\n            | Error error -> Error error\n            | Ok result -> cb result path value\n\n    let all (decoders: Decoder<'a> list): Decoder<'a list> =\n        fun path value ->\n            let rec runner (decoders: Decoder<'a> list) (values: 'a list) =\n                match decoders with\n                | decoder :: tail ->\n                    match decoder path value with\n                    | Ok value -> runner tail (values @ [ value ])\n                    | Error error -> Error error\n                | [] -> Ok values\n\n            runner decoders []\n\n    /////////////////////\n    // Map functions ///\n    ///////////////////\n\n    let map\n        (ctor : 'a -> 'value)\n        (d1 : Decoder<'a>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value with\n            | Ok v1 -> Ok (ctor v1)\n            | Error er -> Error er\n\n    let map2\n        (ctor : 'a -> 'b -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value with\n            | Ok v1, Ok v2 -> Ok (ctor v1 v2)\n            | Error er,_ -> Error er\n            | _,Error er -> Error er\n\n    let map3\n        (ctor : 'a -> 'b -> 'c -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value with\n            | Ok v1, Ok v2, Ok v3 -> Ok (ctor v1 v2 v3)\n            | Error er,_,_ -> Error er\n            | _,Error er,_ -> Error er\n            | _,_,Error er -> Error er\n\n    let map4\n        (ctor : 'a -> 'b -> 'c -> 'd -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>)\n        (d4 : Decoder<'d>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value, d4 path value with\n            | Ok v1, Ok v2, Ok v3, Ok v4 -> Ok (ctor v1 v2 v3 v4)\n            | Error er,_,_,_ -> Error er\n            | _,Error er,_,_ -> Error er\n            | _,_,Error er,_ -> Error er\n            | _,_,_,Error er -> Error er\n\n    let map5\n        (ctor : 'a -> 'b -> 'c -> 'd -> 'e -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>)\n        (d4 : Decoder<'d>)\n        (d5 : Decoder<'e>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value, d4 path value, d5 path value with\n            | Ok v1, Ok v2, Ok v3, Ok v4, Ok v5 -> Ok (ctor v1 v2 v3 v4 v5)\n            | Error er,_,_,_,_ -> Error er\n            | _,Error er,_,_,_ -> Error er\n            | _,_,Error er,_,_ -> Error er\n            | _,_,_,Error er,_ -> Error er\n            | _,_,_,_,Error er -> Error er\n\n    let map6\n        (ctor : 'a -> 'b -> 'c -> 'd -> 'e -> 'f -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>)\n        (d4 : Decoder<'d>)\n        (d5 : Decoder<'e>)\n        (d6 : Decoder<'f>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value, d4 path value, d5 path value, d6 path value with\n            | Ok v1, Ok v2, Ok v3, Ok v4, Ok v5, Ok v6 -> Ok (ctor v1 v2 v3 v4 v5 v6)\n            | Error er,_,_,_,_,_ -> Error er\n            | _,Error er,_,_,_,_ -> Error er\n            | _,_,Error er,_,_,_ -> Error er\n            | _,_,_,Error er,_,_ -> Error er\n            | _,_,_,_,Error er,_ -> Error er\n            | _,_,_,_,_,Error er -> Error er\n\n    let map7\n        (ctor : 'a -> 'b -> 'c -> 'd -> 'e -> 'f -> 'g -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>)\n        (d4 : Decoder<'d>)\n        (d5 : Decoder<'e>)\n        (d6 : Decoder<'f>)\n        (d7 : Decoder<'g>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value, d4 path value, d5 path value, d6 path value, d7 path value with\n            | Ok v1, Ok v2, Ok v3, Ok v4, Ok v5, Ok v6, Ok v7 -> Ok (ctor v1 v2 v3 v4 v5 v6 v7)\n            | Error er,_,_,_,_,_,_ -> Error er\n            | _,Error er,_,_,_,_,_ -> Error er\n            | _,_,Error er,_,_,_,_ -> Error er\n            | _,_,_,Error er,_,_,_ -> Error er\n            | _,_,_,_,Error er,_,_ -> Error er\n            | _,_,_,_,_,Error er,_ -> Error er\n            | _,_,_,_,_,_,Error er -> Error er\n\n    let map8\n        (ctor : 'a -> 'b -> 'c -> 'd -> 'e -> 'f -> 'g -> 'h -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>)\n        (d4 : Decoder<'d>)\n        (d5 : Decoder<'e>)\n        (d6 : Decoder<'f>)\n        (d7 : Decoder<'g>)\n        (d8 : Decoder<'h>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value, d4 path value, d5 path value, d6 path value, d7 path value, d8 path value with\n            | Ok v1, Ok v2, Ok v3, Ok v4, Ok v5, Ok v6, Ok v7, Ok v8 -> Ok (ctor v1 v2 v3 v4 v5 v6 v7 v8)\n            | Error er,_,_,_,_,_,_,_ -> Error er\n            | _,Error er,_,_,_,_,_,_ -> Error er\n            | _,_,Error er,_,_,_,_,_ -> Error er\n            | _,_,_,Error er,_,_,_,_ -> Error er\n            | _,_,_,_,Error er,_,_,_ -> Error er\n            | _,_,_,_,_,Error er,_,_ -> Error er\n            | _,_,_,_,_,_,Error er,_ -> Error er\n            | _,_,_,_,_,_,_,Error er -> Error er\n\n    let dict (decoder : Decoder<'value>) : Decoder<Map<string, 'value>> =\n        map Map.ofList (keyValuePairs decoder)\n\n    //////////////////////\n    // Object builder ///\n    ////////////////////\n\n    type IRequiredGetter =\n        abstract Field : string -> Decoder<'a> -> 'a\n        abstract At : List<string> -> Decoder<'a> -> 'a\n        abstract Raw : Decoder<'a> -> 'a\n\n    type IOptionalGetter =\n        abstract Field : string -> Decoder<'a> -> 'a option\n        abstract At : List<string> -> Decoder<'a> -> 'a option\n        abstract Raw : Decoder<'a> -> 'a option\n\n    type IGetters =\n        abstract Required: IRequiredGetter\n        abstract Optional: IOptionalGetter\n\n    let private unwrapWith (errors: ResizeArray<DecoderError>) path (decoder: Decoder<'T>) value: 'T =\n        match decoder path value with\n        | Ok v -> v\n        | Error er -> errors.Add(er); Unchecked.defaultof<'T>\n\n    type Getters<'T>(path: string, v: 'T) =\n        let mutable errors = ResizeArray<DecoderError>()\n        let required =\n            { new IRequiredGetter with\n                member __.Field (fieldName : string) (decoder : Decoder<_>) =\n                    unwrapWith errors path (field fieldName decoder) v\n                member __.At (fieldNames : string list) (decoder : Decoder<_>) =\n                    unwrapWith errors path (at fieldNames decoder) v\n                member __.Raw (decoder: Decoder<_>) =\n                    unwrapWith errors path decoder v }\n        let optional =\n            { new IOptionalGetter with\n                member __.Field (fieldName : string) (decoder : Decoder<_>) =\n                    unwrapWith errors path (optional fieldName decoder) v\n                member __.At (fieldNames : string list) (decoder : Decoder<_>) =\n                    unwrapWith errors path (optionalAt fieldNames decoder) v\n                member __.Raw (decoder: Decoder<_>) =\n                    match decoder path v with\n                    | Ok v -> Some v\n                    | Error((_, reason) as error) ->\n                        match reason with\n                        | BadPrimitive(_,v)\n                        | BadPrimitiveExtra(_,v,_)\n                        | BadType(_,v) ->\n                            if Helpers.isNullValue v then None\n                            else errors.Add(error); Unchecked.defaultof<_>\n                        | BadField _\n                        | BadPath _ -> None\n                        | TooSmallArray _\n                        | FailMessage _\n                        | BadOneOf _ -> errors.Add(error); Unchecked.defaultof<_> }\n        member __.Errors: _ list = Seq.toList errors\n        interface IGetters with\n            member __.Required = required\n            member __.Optional = optional\n\n    let object (builder: IGetters -> 'value) : Decoder<'value> =\n        fun path v ->\n            let getters = Getters(path, v)\n            let result = builder getters\n            match getters.Errors with\n            | [] -> Ok result\n            | fst::_ as errors ->\n                if errors.Length > 1 then\n                    let errors = List.map errorToString errors\n                    (path, BadOneOf errors) |> Error\n                else\n                    Error fst\n\n    ///////////////////////\n    // Tuples decoders ///\n    ////////////////////\n\n    let tuple2 (decoder1: Decoder<'T1>) (decoder2: Decoder<'T2>) : Decoder<'T1 * 'T2> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                succeed (v1, v2)\n            )\n        )\n\n    let tuple3 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>) : Decoder<'T1 * 'T2 * 'T3> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    succeed (v1, v2, v3)\n                )\n            )\n        )\n\n    let tuple4 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>)\n               (decoder4: Decoder<'T4>) : Decoder<'T1 * 'T2 * 'T3 * 'T4> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    index 3 decoder4\n                    |> andThen (fun v4 ->\n                        succeed (v1, v2, v3, v4)\n                    )\n                )\n            )\n        )\n\n    let tuple5 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>)\n               (decoder4: Decoder<'T4>)\n               (decoder5: Decoder<'T5>) : Decoder<'T1 * 'T2 * 'T3 * 'T4 * 'T5> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    index 3 decoder4\n                    |> andThen (fun v4 ->\n                        index 4 decoder5\n                        |> andThen (fun v5 ->\n                            succeed (v1, v2, v3, v4, v5)\n                        )\n                    )\n                )\n            )\n        )\n\n    let tuple6 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>)\n               (decoder4: Decoder<'T4>)\n               (decoder5: Decoder<'T5>)\n               (decoder6: Decoder<'T6>) : Decoder<'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    index 3 decoder4\n                    |> andThen (fun v4 ->\n                        index 4 decoder5\n                        |> andThen (fun v5 ->\n                            index 5 decoder6\n                            |> andThen (fun v6 ->\n                                succeed (v1, v2, v3, v4, v5, v6)\n                            )\n                        )\n                    )\n                )\n            )\n        )\n\n    let tuple7 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>)\n               (decoder4: Decoder<'T4>)\n               (decoder5: Decoder<'T5>)\n               (decoder6: Decoder<'T6>)\n               (decoder7: Decoder<'T7>) : Decoder<'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    index 3 decoder4\n                    |> andThen (fun v4 ->\n                        index 4 decoder5\n                        |> andThen (fun v5 ->\n                            index 5 decoder6\n                            |> andThen (fun v6 ->\n                                index 6 decoder7\n                                |> andThen (fun v7 ->\n                                    succeed (v1, v2, v3, v4, v5, v6, v7)\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n\n    let tuple8 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>)\n               (decoder4: Decoder<'T4>)\n               (decoder5: Decoder<'T5>)\n               (decoder6: Decoder<'T6>)\n               (decoder7: Decoder<'T7>)\n               (decoder8: Decoder<'T8>) : Decoder<'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7 * 'T8> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    index 3 decoder4\n                    |> andThen (fun v4 ->\n                        index 4 decoder5\n                        |> andThen (fun v5 ->\n                            index 5 decoder6\n                            |> andThen (fun v6 ->\n                                index 6 decoder7\n                                |> andThen (fun v7 ->\n                                    index 7 decoder8\n                                    |> andThen (fun v8 ->\n                                        succeed (v1, v2, v3, v4, v5, v6, v7, v8)\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n\n    ////////////\n    // Enum ///\n    /////////\n\n    #if !FABLE_REPL_LIB\n    module Enum =\n\n        let inline byte<'TEnum when 'TEnum : enum<byte>> : Decoder<'TEnum> =\n            byte\n            |> andThen (fun value ->\n                LanguagePrimitives.EnumOfValue<byte, 'TEnum> value\n                |> succeed\n            )\n\n        let inline sbyte<'TEnum when 'TEnum : enum<sbyte>> : Decoder<'TEnum> =\n            sbyte\n            |> andThen (fun value ->\n                LanguagePrimitives.EnumOfValue<sbyte, 'TEnum> value\n                |> succeed\n            )\n\n        let inline int16<'TEnum when 'TEnum : enum<int16>> : Decoder<'TEnum> =\n            int16\n            |> andThen (fun value ->\n                LanguagePrimitives.EnumOfValue<int16, 'TEnum> value\n                |> succeed\n            )\n\n        let inline uint16<'TEnum when 'TEnum : enum<uint16>> : Decoder<'TEnum> =\n            uint16\n            |> andThen (fun value ->\n                LanguagePrimitives.EnumOfValue<uint16, 'TEnum> value\n                |> succeed\n            )\n\n        let inline int<'TEnum when 'TEnum : enum<int>> : Decoder<'TEnum> =\n            int\n            |> andThen (fun value ->\n                LanguagePrimitives.EnumOfValue<int, 'TEnum> value\n                |> succeed\n            )\n\n        let inline uint32<'TEnum when 'TEnum : enum<uint32>> : Decoder<'TEnum> =\n            uint32\n            |> andThen (fun value ->\n                LanguagePrimitives.EnumOfValue<uint32, 'TEnum> value\n                |> succeed\n            )\n    #endif\n\n    //////////////////\n    // Reflection ///\n    ////////////////\n\n    open FSharp.Reflection\n\n    // As generics are erased by Fable, let's just do an unsafe cast for performance\n    let inline boxDecoder (d: Decoder<'T>): BoxedDecoder =\n        !!d // d >> Result.map box\n\n    let inline unboxDecoder (d: BoxedDecoder): Decoder<'T> =\n        !!d // d >> Result.map unbox\n\n    // This is used to force Fable use a generic comparer for map keys\n    let private toMap<'key, 'value when 'key: comparison> (xs: ('key*'value) seq) = Map.ofSeq xs\n    let private toSet<'key when 'key: comparison> (xs: 'key seq) = Set.ofSeq xs\n\n    let private autoObject (decoderInfos: (string * BoxedDecoder)[]) (path : string) (value: JsonValue) =\n        if not (Helpers.isObject value) then\n            (path, BadPrimitive (\"an object\", value)) |> Error\n        else\n            (decoderInfos, Ok []) ||> Array.foldBack (fun (name, decoder) acc ->\n                match acc with\n                | Error _ -> acc\n                | Ok result ->\n                    Helpers.getField name value\n                    |> decoder (path + \".\" + name)\n                    |> Result.map (fun v -> v::result))\n\n    let inline private enumDecoder<'UnderlineType when 'UnderlineType : equality>\n        (decoder : Decoder<'UnderlineType>)\n        (toString : 'UnderlineType -> string)\n        (t: System.Type) =\n\n            fun path value ->\n                match decoder path value with\n                | Ok enumValue ->\n                    System.Enum.GetValues(t)\n                    |> Seq.cast<'UnderlineType>\n                    |> Seq.contains enumValue\n                    |> function\n                    | true ->\n                        System.Enum.Parse(t, toString enumValue)\n                        |> Ok\n                    | false ->\n                        (path, BadPrimitiveExtra(t.FullName, value, \"Unkown value provided for the enum\"))\n                        |> Error\n                | Error msg ->\n                    Error msg\n\n    let private autoObject2 (keyDecoder: BoxedDecoder) (valueDecoder: BoxedDecoder) (path : string) (value: JsonValue) =\n        if not (Helpers.isObject value) then\n            (path, BadPrimitive (\"an object\", value)) |> Error\n        else\n            (Ok [], Helpers.objectKeys(value)) ||> Seq.fold (fun acc name ->\n                match acc with\n                | Error _ -> acc\n                | Ok acc ->\n                    match keyDecoder path name with\n                    | Error er -> Error er\n                    | Ok k ->\n                        Helpers.getField name value\n                        |> valueDecoder (path + \".\" + name)\n                        |> function\n                            | Error er -> Error er\n                            | Ok v -> (k,v)::acc |> Ok)\n\n    let private mixedArray msg (decoders: BoxedDecoder[]) (path: string) (values: JsonValue[]): Result<JsonValue list, DecoderError> =\n        if decoders.Length <> values.Length then\n            (path, sprintf \"Expected %i %s but got %i\" decoders.Length msg values.Length\n            |> FailMessage) |> Error\n        else\n            (values, decoders, Ok [])\n            |||> Array.foldBack2 (fun value decoder acc ->\n                match acc with\n                | Error _ -> acc\n                | Ok result -> decoder path value |> Result.map (fun v -> v::result))\n\n    let rec private makeUnion extra caseStrategy t name (path : string) (values: JsonValue[]) =\n        let uci =\n            FSharpType.GetUnionCases(t, allowAccessToPrivateRepresentation=true)\n            |> Array.tryFind (fun x -> x.Name = name)\n        match uci with\n        | None -> (path, FailMessage(\"Cannot find case \" + name + \" in \" + t.FullName)) |> Error\n        | Some uci ->\n            if values.Length = 0 then\n                FSharpValue.MakeUnion(uci, [||], allowAccessToPrivateRepresentation=true) |> Ok\n            else\n                let decoders = uci.GetFields() |> Array.map (fun fi -> autoDecoder extra caseStrategy false fi.PropertyType)\n                mixedArray \"union fields\" decoders path values\n                |> Result.map (fun values -> FSharpValue.MakeUnion(uci, List.toArray values, allowAccessToPrivateRepresentation=true))\n\n    and private autoDecodeRecordsAndUnions extra (caseStrategy : CaseStrategy) (isOptional : bool) (t: System.Type) : BoxedDecoder =\n        // Add the decoder to extra in case one of the fields is recursive\n        let decoderRef = ref Unchecked.defaultof<_>\n        let extra = extra |> Map.add t.FullName decoderRef\n        let decoder =\n            if FSharpType.IsRecord(t, allowAccessToPrivateRepresentation=true) then\n                let decoders =\n                    FSharpType.GetRecordFields(t, allowAccessToPrivateRepresentation=true)\n                    |> Array.map (fun fi ->\n                        let name = Util.Casing.convert caseStrategy fi.Name\n                        name, autoDecoder extra caseStrategy false fi.PropertyType)\n                fun path value ->\n                    autoObject decoders path value\n                    |> Result.map (fun xs -> FSharpValue.MakeRecord(t, List.toArray xs, allowAccessToPrivateRepresentation=true))\n\n            elif FSharpType.IsUnion(t, allowAccessToPrivateRepresentation=true) then\n                fun path (value: JsonValue) ->\n                    if Helpers.isString(value) then\n                        let name = Helpers.asString value\n                        makeUnion extra caseStrategy t name path [||]\n                    elif Helpers.isArray(value) then\n                        let values = Helpers.asArray value\n                        let name = Helpers.asString values.[0]\n                        makeUnion extra caseStrategy t name path values.[1..]\n                    else (path, BadPrimitive(\"a string or array\", value)) |> Error\n\n            else\n                if isOptional then\n                    // The error will only happen at runtime if the value is not null\n                    // See https://github.com/MangelMaxime/Thoth/pull/84#issuecomment-444837773\n                    boxDecoder(fun path value -> Error(path, BadType(\"an extra coder for \" + t.FullName, value)))\n                else\n                    // Don't use failwithf here, for some reason F#/Fable compiles it as a function\n                    // when the return type is a function too, so it doesn't fail immediately\n                    sprintf \"Cannot generate auto decoder for %s. Please pass an extra decoder.\" t.FullName |> failwith\n        decoderRef := decoder\n        decoder\n\n    and private autoDecoder (extra: Map<string, ref<BoxedDecoder>>) caseStrategy (isOptional : bool) (t: System.Type) : BoxedDecoder =\n      let fullname = t.FullName\n      match Map.tryFind fullname extra with\n      | Some decoderRef -> fun path value -> decoderRef.contents path value\n      | None ->\n        if t.IsArray then\n            let decoder = t.GetElementType() |> autoDecoder extra caseStrategy false\n            array decoder |> boxDecoder\n        elif t.IsEnum then\n            let enumType = System.Enum.GetUnderlyingType(t).FullName\n            if enumType = typeof<sbyte>.FullName then\n                enumDecoder<sbyte> sbyte Operators.string t |> boxDecoder\n            elif enumType = typeof<byte>.FullName then\n                enumDecoder<byte> byte Operators.string t |> boxDecoder\n            elif enumType = typeof<int16>.FullName then\n                enumDecoder<int16> int16 Operators.string t |> boxDecoder\n            elif enumType = typeof<uint16>.FullName then\n                enumDecoder<uint16> uint16 Operators.string t |> boxDecoder\n            elif enumType = typeof<int>.FullName then\n                enumDecoder<int> int Operators.string t |> boxDecoder\n            elif enumType = typeof<uint32>.FullName then\n                enumDecoder<uint32> uint32 Operators.string t |> boxDecoder\n            else\n                failwithf\n                    \"\"\"Cannot generate auto decoder for %s.\nThoth.Json.Net only support the folluwing enum types:\n- sbyte\n- byte\n- int16\n- uint16\n- int\n- uint32\nIf you can't use one of these types, please pass an extra decoder.\n                    \"\"\" t.FullName\n        elif t.IsGenericType then\n            if FSharpType.IsTuple(t) then\n                let decoders = FSharpType.GetTupleElements(t) |> Array.map (autoDecoder extra caseStrategy false)\n                fun path value ->\n                    if Helpers.isArray value then\n                        mixedArray \"tuple elements\" decoders path (Helpers.asArray value)\n                        |> Result.map (fun xs -> FSharpValue.MakeTuple(List.toArray xs, t))\n                    else (path, BadPrimitive (\"an array\", value)) |> Error\n            else\n                let fullname = t.GetGenericTypeDefinition().FullName\n                if fullname = typedefof<obj option>.FullName then\n                    t.GenericTypeArguments.[0] |> (autoDecoder extra caseStrategy true) |> option |> boxDecoder\n                elif fullname = typedefof<obj list>.FullName then\n                    t.GenericTypeArguments.[0] |> (autoDecoder extra caseStrategy false) |> list |> boxDecoder\n                // Disable seq support because I don't know how to implement it on Thoth.Json.Net side\n                // elif fullname = typedefof<obj seq>.FullName then\n                //     t.GenericTypeArguments.[0] |> (autoDecoder extra caseStrategy false) |> seq |> boxDecoder\n                elif fullname = typedefof< Map<string, obj> >.FullName then\n                    let keyDecoder = t.GenericTypeArguments.[0] |> autoDecoder extra caseStrategy false\n                    let valueDecoder = t.GenericTypeArguments.[1] |> autoDecoder extra caseStrategy false\n                    oneOf [\n                        autoObject2 keyDecoder valueDecoder\n                        list (tuple2 keyDecoder valueDecoder)\n                    ] |> map (fun ar -> toMap (unbox ar) |> box)\n                elif fullname = typedefof< Set<string> >.FullName then\n                    let decoder = t.GenericTypeArguments.[0] |> autoDecoder extra caseStrategy false\n                    fun path value ->\n                        match array decoder path value with\n                        | Error er -> Error er\n                        | Ok ar -> toSet (unbox ar) |> box |> Ok\n                else\n                    autoDecodeRecordsAndUnions extra caseStrategy isOptional t\n        else\n            if fullname = typeof<bool>.FullName then\n                boxDecoder bool\n            elif fullname = typedefof<unit>.FullName then\n                boxDecoder unit\n            elif fullname = typeof<string>.FullName then\n                boxDecoder string\n            elif fullname = typeof<sbyte>.FullName then\n                boxDecoder sbyte\n            elif fullname = typeof<byte>.FullName then\n                boxDecoder byte\n            elif fullname = typeof<int16>.FullName then\n                boxDecoder int16\n            elif fullname = typeof<uint16>.FullName then\n                boxDecoder uint16\n            elif fullname = typeof<int>.FullName then\n                boxDecoder int\n            elif fullname = typeof<uint32>.FullName then\n                boxDecoder uint32\n            elif fullname = typeof<float>.FullName then\n                boxDecoder float\n            elif fullname = typeof<float32>.FullName then\n                boxDecoder float32\n            // These number types require extra libraries in Fable. To prevent penalizing\n            // all users, extra decoders (withInt64, etc) must be passed when they're needed.\n\n            // elif fullname = typeof<int64>.FullName then\n            //     boxDecoder int64\n            // elif fullname = typeof<uint64>.FullName then\n            //     boxDecoder uint64\n            // elif fullname = typeof<bigint>.FullName then\n            //     boxDecoder bigint\n            // elif fullname = typeof<decimal>.FullName then\n            //     boxDecoder decimal\n            elif fullname = typeof<System.DateTime>.FullName then\n                boxDecoder datetime\n            elif fullname = typeof<System.DateTimeOffset>.FullName then\n                boxDecoder datetimeOffset\n            elif fullname = typeof<System.TimeSpan>.FullName then\n                boxDecoder timespan\n            elif fullname = typeof<System.Guid>.FullName then\n                boxDecoder guid\n            elif fullname = typeof<obj>.FullName then\n                fun _ v -> Ok v\n            else autoDecodeRecordsAndUnions extra caseStrategy isOptional t\n\n    let private makeExtra (extra: ExtraCoders option) =\n        match extra with\n        | None -> Map.empty\n        | Some e -> Map.map (fun _ (_,dec) -> ref dec) e.Coders\n\n    type Auto =\n        static member generateBoxedDecoderCached(t: System.Type, ?caseStrategy : CaseStrategy, ?extra: ExtraCoders): BoxedDecoder =\n            let caseStrategy = defaultArg caseStrategy PascalCase\n\n            let key =\n                t.FullName\n                |> (+) (Operators.string caseStrategy)\n                |> (+) (extra |> Option.map (fun e -> e.Hash) |> Option.defaultValue \"\")\n\n            Util.CachedDecoders.GetOrAdd(key, fun _ -> autoDecoder (makeExtra extra) caseStrategy false t)\n\n        static member inline generateDecoderCached<'T>(?caseStrategy : CaseStrategy, ?extra: ExtraCoders): Decoder<'T> =\n            Auto.generateBoxedDecoderCached(typeof<'T>, ?caseStrategy=caseStrategy, ?extra=extra) |> unboxDecoder\n\n        static member generateBoxedDecoder(t: System.Type, ?caseStrategy : CaseStrategy, ?extra: ExtraCoders): BoxedDecoder =\n            let caseStrategy = defaultArg caseStrategy PascalCase\n            autoDecoder (makeExtra extra) caseStrategy false t\n\n        static member inline generateDecoder<'T>(?caseStrategy : CaseStrategy, ?extra: ExtraCoders): Decoder<'T> =\n            Auto.generateBoxedDecoder(typeof<'T>, ?caseStrategy=caseStrategy, ?extra=extra) |> unboxDecoder\n\n        static member inline fromString<'T>(json: string, ?caseStrategy : CaseStrategy, ?extra: ExtraCoders): Result<'T, string> =\n            let decoder = Auto.generateDecoder<'T>(?caseStrategy=caseStrategy, ?extra=extra)\n            fromString decoder json\n\n        static member inline unsafeFromString<'T>(json: string, ?caseStrategy : CaseStrategy, ?extra: ExtraCoders): 'T =\n            let decoder = Auto.generateDecoder<'T>(?caseStrategy=caseStrategy, ?extra=extra)\n            match fromString decoder json with\n            | Ok x -> x\n            | Error msg -> failwith msg\n","namespace Thoth.Json\nopen System.Text.RegularExpressions\n\n[<RequireQualifiedAccess>]\nmodule Encode =\n\n    open System.Collections.Generic\n    open System.Globalization\n    open Fable.Core\n    open Fable.Core.JsInterop\n\n    [<Emit(\"Array.from($0)\")>]\n    let private arrayFrom(x: JsonValue seq): JsonValue = jsNative\n\n    ///**Description**\n    /// Encode a string\n    ///\n    ///**Parameters**\n    ///  * `value` - parameter of type `string`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let inline string (value : string) : JsonValue =\n        box value\n\n    ///**Description**\n    /// Encode a GUID\n    ///\n    ///**Parameters**\n    ///  * `value` - parameter of type `System.Guid`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let guid (value : System.Guid) : JsonValue =\n        box (value.ToString())\n\n    ///**Description**\n    /// Encode a Float. `Infinity` and `NaN` are encoded as `null`.\n    ///\n    ///**Parameters**\n    ///  * `value` - parameter of type `float`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let inline float (value : float) : JsonValue =\n        box value\n\n    let inline float32 (value : float32) : JsonValue =\n        box value\n\n    ///**Description**\n    /// Encode a Decimal.\n    ///\n    ///**Parameters**\n    ///  * `value` - parameter of type `decimal`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let decimal (value : decimal) : JsonValue =\n        value.ToString() |> string\n\n    ///**Description**\n    /// Encode null\n    ///\n    ///**Parameters**\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let nil : JsonValue =\n        box null\n\n    ///**Description**\n    /// Encode a bool\n    ///**Parameters**\n    ///  * `value` - parameter of type `bool`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let inline bool (value : bool) : JsonValue =\n        box value\n\n    ///**Description**\n    /// Encode an object\n    ///\n    ///**Parameters**\n    ///  * `values` - parameter of type `(string * Value) list`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let object (values : (string * JsonValue) seq) : JsonValue =\n        let o = obj()\n        for (key, value) in values do\n            o?(key) <- value\n        box o\n\n    ///**Description**\n    /// Encode an array\n    ///\n    ///**Parameters**\n    ///  * `values` - parameter of type `Value array`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let inline array (values : JsonValue array) : JsonValue =\n        box values\n\n    ///**Description**\n    /// Encode a list\n    ///**Parameters**\n    ///  * `values` - parameter of type `Value list`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let list (values : JsonValue list) : JsonValue =\n        // Don't use List.toArray as it may create a typed array\n        arrayFrom values\n\n    let seq (values : JsonValue seq) : JsonValue =\n        arrayFrom values\n\n    ///**Description**\n    /// Encode a dictionary\n    ///**Parameters**\n    ///  * `values` - parameter of type `Map<string, Value>`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let dict (values : Map<string, JsonValue>) : JsonValue =\n        values\n        |> Map.toList\n        |> object\n\n    let bigint (value : bigint) : JsonValue =\n        box (value.ToString())\n\n    let datetimeOffset (value : System.DateTimeOffset) : JsonValue =\n        value.ToString(\"O\", CultureInfo.InvariantCulture) |> string\n\n    /// **Description**\n    /// Encode a timespan\n    /// **Parameters**\n    ///   * `value` - parameter of type `System.TimeSpan`\n    ///\n    /// **Output Type**\n    ///   * `Value`\n    ///\n    /// **Exceptions**\n    ///\n    let timespan (value : System.TimeSpan) : JsonValue =\n        value.ToString() |> string\n\n    let inline sbyte (value : sbyte) : JsonValue =\n        box value\n\n    let inline byte (value : byte) : JsonValue =\n        box value\n\n    let inline int16 (value : int16) : JsonValue =\n        box value\n\n    let inline uint16 (value : uint16) : JsonValue =\n        box value\n\n    let inline int (value : int) : JsonValue =\n        box value\n\n    let inline uint32 (value : uint32) : JsonValue =\n        box value\n\n    let int64 (value : int64) : JsonValue =\n        box (value.ToString(CultureInfo.InvariantCulture))\n\n    let uint64 (value : uint64) : JsonValue =\n        box (value.ToString(CultureInfo.InvariantCulture))\n\n    let unit () : JsonValue =\n        box null\n\n    let tuple2\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (v1, v2) : JsonValue =\n        box [| enc1 v1\n               enc2 v2 |]\n\n    let tuple3\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (v1, v2, v3) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3 |]\n\n    let tuple4\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (enc4 : Encoder<'T4>)\n            (v1, v2, v3, v4) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3\n               enc4 v4 |]\n\n    let tuple5\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (enc4 : Encoder<'T4>)\n            (enc5 : Encoder<'T5>)\n            (v1, v2, v3, v4, v5) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3\n               enc4 v4\n               enc5 v5 |]\n\n    let tuple6\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (enc4 : Encoder<'T4>)\n            (enc5 : Encoder<'T5>)\n            (enc6 : Encoder<'T6>)\n            (v1, v2, v3, v4, v5, v6) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3\n               enc4 v4\n               enc5 v5\n               enc6 v6 |]\n\n    let tuple7\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (enc4 : Encoder<'T4>)\n            (enc5 : Encoder<'T5>)\n            (enc6 : Encoder<'T6>)\n            (enc7 : Encoder<'T7>)\n            (v1, v2, v3, v4, v5, v6, v7) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3\n               enc4 v4\n               enc5 v5\n               enc6 v6\n               enc7 v7 |]\n\n    let tuple8\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (enc4 : Encoder<'T4>)\n            (enc5 : Encoder<'T5>)\n            (enc6 : Encoder<'T6>)\n            (enc7 : Encoder<'T7>)\n            (enc8 : Encoder<'T8>)\n            (v1, v2, v3, v4, v5, v6, v7, v8) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3\n               enc4 v4\n               enc5 v5\n               enc6 v6\n               enc7 v7\n               enc8 v8 |]\n\n\n    ////////////\n    // Enum ///\n    /////////\n\n    module Enum =\n\n        let byte<'TEnum when 'TEnum : enum<byte>> (value : 'TEnum) : JsonValue =\n            LanguagePrimitives.EnumToValue value\n            |> byte\n\n        let sbyte<'TEnum when 'TEnum : enum<sbyte>> (value : 'TEnum) : JsonValue =\n            LanguagePrimitives.EnumToValue value\n            |> sbyte\n\n        let int16<'TEnum when 'TEnum : enum<int16>> (value : 'TEnum) : JsonValue =\n            LanguagePrimitives.EnumToValue value\n            |> int16\n\n        let uint16<'TEnum when 'TEnum : enum<uint16>> (value : 'TEnum) : JsonValue =\n            LanguagePrimitives.EnumToValue value\n            |> uint16\n\n        let int<'TEnum when 'TEnum : enum<int>> (value : 'TEnum) : JsonValue =\n            LanguagePrimitives.EnumToValue value\n            |> int\n\n        let uint32<'TEnum when 'TEnum : enum<uint32>> (value : 'TEnum) : JsonValue =\n            LanguagePrimitives.EnumToValue value\n            |> uint32\n\n    /// **Description**\n    ///\n    /// The DateTime is always encoded using UTC representation\n    ///\n    /// **Parameters**\n    ///   * `value` - parameter of type `System.DateTime`\n    ///\n    /// **Output Type**\n    ///   * `Value`\n    ///\n    /// **Exceptions**\n    ///\n    let datetime (value : System.DateTime) : JsonValue =\n        value.ToString(\"O\", CultureInfo.InvariantCulture) |> string\n\n    ///**Description**\n    /// Convert a `Value` into a prettified string.\n    ///**Parameters**\n    ///  * `space` - parameter of type `int` - Amount of indentation\n    ///  * `value` - parameter of type `obj` - Value to convert\n    ///\n    ///**Output Type**\n    ///  * `string`\n    ///\n    ///**Exceptions**\n    ///\n    let toString (space: int) (value: JsonValue) : string =\n       JS.JSON.stringify(value, !!null, space)\n\n    ///**Description**\n    /// Encode an option\n    ///**Parameters**\n    ///  * `encoder` - parameter of type `'a -> Value`\n    ///\n    ///**Output Type**\n    ///  * `'a option -> Value`\n    ///\n    ///**Exceptions**\n    ///\n    let option (encoder : 'a -> JsonValue) =\n        Option.map encoder >> Option.defaultWith (fun _ -> nil)\n\n    //////////////////\n    // Reflection ///\n    ////////////////\n\n    open FSharp.Reflection\n    open Fable.Core.DynamicExtensions\n\n    // As generics are erased by Fable, let's just do an unsafe cast for performance\n    let inline boxEncoder (d: Encoder<'T>): BoxedEncoder =\n        !!d\n\n    let inline unboxEncoder (d: BoxedEncoder): Encoder<'T> =\n        !!d\n\n    let rec private autoEncodeRecordsAndUnions extra (caseStrategy : CaseStrategy) (skipNullField : bool) (t: System.Type) : BoxedEncoder =\n        // Add the encoder to extra in case one of the fields is recursive\n        let encoderRef = ref Unchecked.defaultof<_>\n        let extra = extra |> Map.add t.FullName encoderRef\n        let encoder =\n            if FSharpType.IsRecord(t, allowAccessToPrivateRepresentation=true) then\n                let setters =\n                    FSharpType.GetRecordFields(t, allowAccessToPrivateRepresentation=true)\n                    |> Array.map (fun fi ->\n                        let targetKey = Util.Casing.convert caseStrategy fi.Name\n                        let encode = autoEncoder extra caseStrategy skipNullField fi.PropertyType\n                        fun (source: obj) (target: JsonValue) ->\n                            let value = FSharpValue.GetRecordField(source, fi)\n                            if not skipNullField || (skipNullField && not (isNull value)) then // Discard null fields\n                                target.[targetKey] <- encode value\n                            target)\n                fun (source: obj) ->\n                    (JsonValue(), setters) ||> Seq.fold (fun target set -> set source target)\n            elif FSharpType.IsUnion(t, allowAccessToPrivateRepresentation=true) then\n                fun (value: obj) ->\n                    let info, fields = FSharpValue.GetUnionFields(value, t, allowAccessToPrivateRepresentation=true)\n                    match fields.Length with\n                    | 0 -> string info.Name\n                    | len ->\n                        let fieldTypes = info.GetFields()\n                        let target = Array.zeroCreate<JsonValue> (len + 1)\n                        target.[0] <- string info.Name\n                        for i = 1 to len do\n                            let encode = autoEncoder extra caseStrategy skipNullField fieldTypes.[i-1].PropertyType\n                            target.[i] <- encode fields.[i-1]\n                        array target\n            else\n                // Don't use failwithf here, for some reason F#/Fable compiles it as a function\n                // when the return type is a function too, so it doesn't fail immediately\n                sprintf \"Cannot generate auto encoder for %s. Please pass an extra encoder.\" t.FullName\n                |> failwith\n        encoderRef := encoder\n        encoder\n\n    and private autoEncoder (extra: Map<string, ref<BoxedEncoder>>) caseStrategy (skipNullField : bool) (t: System.Type) : BoxedEncoder =\n      let fullname = t.FullName\n      match Map.tryFind fullname extra with\n      | Some encoderRef -> fun v -> encoderRef.contents v\n      | None ->\n        if t.IsArray then\n            let encoder = t.GetElementType() |> autoEncoder extra caseStrategy skipNullField\n            fun (value: obj) ->\n                value :?> obj seq |> Seq.map encoder |> seq\n        elif t.IsEnum then\n            let enumType = System.Enum.GetUnderlyingType(t).FullName\n            if enumType = typeof<sbyte>.FullName then\n                boxEncoder sbyte\n            elif enumType = typeof<byte>.FullName then\n                boxEncoder byte\n            elif enumType = typeof<int16>.FullName then\n                boxEncoder int16\n            elif enumType = typeof<uint16>.FullName then\n                boxEncoder uint16\n            elif enumType = typeof<int>.FullName then\n                boxEncoder int\n            elif enumType = typeof<uint32>.FullName then\n                boxEncoder uint32\n            else\n                failwithf\n                    \"\"\"Cannot generate auto encoder for %s.\nThoth.Json.Net only support the folluwing enum types:\n- sbyte\n- byte\n- int16\n- uint16\n- int\n- uint32\nIf you can't use one of these types, please pass an extra encoder.\n                    \"\"\" t.FullName\n        elif t.IsGenericType then\n            if FSharpType.IsTuple(t) then\n                let encoders =\n                    FSharpType.GetTupleElements(t)\n                    |> Array.map (autoEncoder extra caseStrategy skipNullField)\n                fun (value: obj) ->\n                    FSharpValue.GetTupleFields(value)\n                    |> Seq.mapi (fun i x -> encoders.[i] x) |> seq\n            else\n                let fullname = t.GetGenericTypeDefinition().FullName\n                if fullname = typedefof<obj option>.FullName then\n                    // Evaluate lazily so we don't need to generate the encoder for null values\n                    let encoder = lazy\n                                    t.GenericTypeArguments.[0]\n                                    |> autoEncoder extra caseStrategy skipNullField\n                                    |> option\n                                    |> boxEncoder\n                    boxEncoder(fun (value: obj) ->\n                        if isNull value then nil\n                        else encoder.Value value)\n                elif fullname = typedefof<obj list>.FullName\n                    || fullname = typedefof<Set<string>>.FullName then\n                    // Disable seq support for now because I don't know how to implements to on Thoth.Json.Net\n                    // || fullname = typedefof<obj seq>.FullName then\n                    let encoder = t.GenericTypeArguments.[0] |> autoEncoder extra caseStrategy skipNullField\n                    fun (value: obj) ->\n                        value :?> obj seq |> Seq.map encoder |> seq\n                elif fullname = typedefof< Map<string, obj> >.FullName then\n                    let keyType = t.GenericTypeArguments.[0]\n                    let valueEncoder = t.GenericTypeArguments.[1] |> autoEncoder extra caseStrategy skipNullField\n                    if keyType.FullName = typeof<string>.FullName\n                        || keyType.FullName = typeof<System.Guid>.FullName then\n                        fun value ->\n                            // Fable compiles Guids as strings so this works, but maybe we should make the conversion explicit\n                            // (see dotnet version) in case Fable implementation of Guids change\n                            (JsonValue(), value :?> Map<string, obj>)\n                            ||> Seq.fold (fun target (KeyValue(k,v)) ->\n                                target.[k] <- valueEncoder v\n                                target)\n                    else\n                        let keyEncoder = keyType |> autoEncoder extra caseStrategy skipNullField\n                        fun value ->\n                            value :?> Map<string, obj> |> Seq.map (fun (KeyValue(k,v)) ->\n                                array [|keyEncoder k; valueEncoder v|]) |> seq\n                else\n                    autoEncodeRecordsAndUnions extra caseStrategy skipNullField t\n        else\n            if fullname = typeof<bool>.FullName then\n                boxEncoder bool\n            elif fullname = typeof<unit>.FullName then\n                boxEncoder unit\n            elif fullname = typeof<string>.FullName then\n                boxEncoder string\n            elif fullname = typeof<sbyte>.FullName then\n                boxEncoder sbyte\n            elif fullname = typeof<byte>.FullName then\n                boxEncoder byte\n            elif fullname = typeof<int16>.FullName then\n                boxEncoder int16\n            elif fullname = typeof<uint16>.FullName then\n                boxEncoder uint16\n            elif fullname = typeof<int>.FullName then\n                boxEncoder int\n            elif fullname = typeof<uint32>.FullName then\n                boxEncoder uint32\n            elif fullname = typeof<float>.FullName then\n                boxEncoder float\n            elif fullname = typeof<float32>.FullName then\n                boxEncoder float32\n            // These number types require extra libraries in Fable. To prevent penalizing\n            // all users, extra encoders (withInt64, etc) must be passed when they're needed.\n\n            // elif fullname = typeof<int64>.FullName then\n            //     boxEncoder int64\n            // elif fullname = typeof<uint64>.FullName then\n            //     boxEncoder uint64\n            // elif fullname = typeof<bigint>.FullName then\n            //     boxEncoder bigint\n            // elif fullname = typeof<decimal>.FullName then\n            //     boxEncoder decimal\n            elif fullname = typeof<System.DateTime>.FullName then\n                boxEncoder datetime\n            elif fullname = typeof<System.DateTimeOffset>.FullName then\n                boxEncoder datetimeOffset\n            elif fullname = typeof<System.TimeSpan>.FullName then\n                boxEncoder timespan\n            elif fullname = typeof<System.Guid>.FullName then\n                boxEncoder guid\n            elif fullname = typeof<obj>.FullName then\n                boxEncoder id\n            else\n                autoEncodeRecordsAndUnions extra caseStrategy skipNullField t\n\n    let private makeExtra (extra: ExtraCoders option) =\n        match extra with\n        | None -> Map.empty\n        | Some e -> Map.map (fun _ (enc,_) -> ref enc) e.Coders\n\n    type Auto =\n        static member generateBoxedEncoderCached(t: System.Type, ?caseStrategy : CaseStrategy, ?extra: ExtraCoders, ?skipNullField: bool): BoxedEncoder =\n            let caseStrategy = defaultArg caseStrategy PascalCase\n            let skipNullField = defaultArg skipNullField true\n\n            let key =\n                t.FullName\n                |> (+) (Operators.string caseStrategy)\n                |> (+) (extra |> Option.map (fun e -> e.Hash) |> Option.defaultValue \"\")\n\n            Util.CachedEncoders.GetOrAdd(key , fun _ ->\n                autoEncoder (makeExtra extra) caseStrategy skipNullField t)\n\n        static member inline generateEncoderCached<'T>(?caseStrategy : CaseStrategy, ?extra: ExtraCoders, ?skipNullField: bool): Encoder<'T> =\n            Auto.generateBoxedEncoderCached(typeof<'T>, ?caseStrategy=caseStrategy, ?extra=extra) |> unboxEncoder\n\n        static member generateBoxedEncoder(t: System.Type, ?caseStrategy : CaseStrategy, ?extra: ExtraCoders, ?skipNullField: bool): BoxedEncoder =\n            let caseStrategy = defaultArg caseStrategy PascalCase\n            let skipNullField = defaultArg skipNullField true\n            autoEncoder (makeExtra extra) caseStrategy skipNullField t\n\n        static member inline generateEncoder<'T>(?caseStrategy : CaseStrategy, ?extra: ExtraCoders, ?skipNullField: bool): Encoder<'T> =\n            Auto.generateBoxedEncoder(typeof<'T>, ?caseStrategy=caseStrategy, ?extra=extra, ?skipNullField=skipNullField) |> unboxEncoder\n\n        static member inline toString(space : int, value : 'T, ?caseStrategy : CaseStrategy, ?extra: ExtraCoders, ?skipNullField: bool) : string =\n            let encoder = Auto.generateEncoder(?caseStrategy=caseStrategy, ?extra=extra, ?skipNullField=skipNullField)\n            encoder value |> toString space\n\n    ///**Description**\n    /// Convert a `Value` into a prettified string.\n    ///**Parameters**\n    ///  * `space` - parameter of type `int` - Amount of indentation\n    ///  * `value` - parameter of type `obj` - Value to convert\n    ///\n    ///**Output Type**\n    ///  * `string`\n    ///\n    ///**Exceptions**\n    ///\n    [<System.Obsolete(\"Please use toString instead\")>]\n    let encode (space: int) (value: JsonValue) : string = toString space value\n","[<RequireQualifiedAccess>]\nmodule Thoth.Json.Extra\n\nopen Fable.Core\n\n#if !FABLE_REPL_LIB\nlet empty: ExtraCoders =\n    { Hash = \"\"\n      Coders = Map.empty }\n\nlet inline internal withCustomAndKey (encoder: Encoder<'Value>) (decoder: Decoder<'Value>)\n           (extra: ExtraCoders): ExtraCoders =\n    { extra with\n          Hash = System.Guid.NewGuid().ToString()\n          Coders =\n              extra.Coders |> Map.add typeof<'Value>.FullName (Encode.boxEncoder encoder, Decode.boxDecoder decoder) }\n\nlet inline withCustom (encoder: Encoder<'Value>) (decoder: Decoder<'Value>) (extra: ExtraCoders): ExtraCoders =\n    withCustomAndKey encoder decoder extra\n\nlet inline withInt64 (extra: ExtraCoders): ExtraCoders = withCustomAndKey Encode.int64 Decode.int64 extra\n\nlet inline withUInt64 (extra: ExtraCoders): ExtraCoders =\n    withCustomAndKey Encode.uint64 Decode.uint64 extra\n\nlet inline withDecimal (extra: ExtraCoders): ExtraCoders =\n    withCustomAndKey Encode.decimal Decode.decimal extra\n\nlet inline withBigInt (extra: ExtraCoders): ExtraCoders =\n    withCustomAndKey Encode.bigint Decode.bigint extra\n#endif","import { equals } from \"./Util.js\";\nimport { Union } from \"./Types.js\";\nconst CaseRules = {\n    None: 0,\n    LowerFirst: 1,\n    SnakeCase: 2,\n    SnakeCaseAllCaps: 3,\n    KebabCase: 4,\n};\nfunction dashify(str, separator) {\n    return str.replace(/[a-z]?[A-Z]/g, (m) => m.length === 1\n        ? m.toLowerCase()\n        : m.charAt(0) + separator + m.charAt(1).toLowerCase());\n}\nfunction changeCase(str, caseRule) {\n    switch (caseRule) {\n        case CaseRules.LowerFirst:\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        case CaseRules.SnakeCase:\n            return dashify(str, \"_\");\n        case CaseRules.SnakeCaseAllCaps:\n            return dashify(str, \"_\").toUpperCase();\n        case CaseRules.KebabCase:\n            return dashify(str, \"-\");\n        case CaseRules.None:\n        default:\n            return str;\n    }\n}\nexport function keyValueList(fields, caseRule = CaseRules.None) {\n    const obj = {};\n    const definedCaseRule = caseRule;\n    function fail(kvPair) {\n        throw new Error(\"Cannot infer key and value of \" + String(kvPair));\n    }\n    function assign(key, caseRule, value) {\n        key = changeCase(key, caseRule);\n        obj[key] = value;\n    }\n    for (let kvPair of fields) {\n        let caseRule = CaseRules.None;\n        if (kvPair == null) {\n            fail(kvPair);\n        }\n        // Deflate unions and use the defined case rule\n        if (kvPair instanceof Union) {\n            const name = kvPair.cases()[kvPair.tag];\n            kvPair = kvPair.fields.length === 0 ? name : [name].concat(kvPair.fields);\n            caseRule = definedCaseRule;\n        }\n        if (Array.isArray(kvPair)) {\n            switch (kvPair.length) {\n                case 0:\n                    fail(kvPair);\n                    break;\n                case 1:\n                    assign(kvPair[0], caseRule, true);\n                    break;\n                case 2:\n                    const value = kvPair[1];\n                    assign(kvPair[0], caseRule, value);\n                    break;\n                default:\n                    assign(kvPair[0], caseRule, kvPair.slice(1));\n            }\n        }\n        else if (typeof kvPair === \"string\") {\n            assign(kvPair, caseRule, true);\n        }\n        else {\n            fail(kvPair);\n        }\n    }\n    return obj;\n}\n// TODO: Move these methods to Map and Set modules\nexport function containsValue(v, map) {\n    for (const kv of map) {\n        if (equals(v, kv[1])) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function tryGetValue(map, key, defaultValue) {\n    if (map.has(key)) {\n        defaultValue.contents = map.get(key);\n        return true;\n    }\n    return false;\n}\nexport function addToSet(v, set) {\n    if (set.has(v)) {\n        return false;\n    }\n    set.add(v);\n    return true;\n}\nexport function addToDict(dict, k, v) {\n    if (dict.has(k)) {\n        throw new Error(\"An item with the same key has already been added. Key: \" + k);\n    }\n    dict.set(k, v);\n}\nexport function getItemFromDict(map, key) {\n    if (map.has(key)) {\n        return map.get(key);\n    }\n    else {\n        throw new Error(`The given key '${key}' was not present in the dictionary.`);\n    }\n}\n","namespace Fable.FontAwesome\n\nopen Fable.Core\nopen Fable.React\nopen Fable.React.Props\n\nmodule internal Helpers =\n\n    let classes std (options : string option list) (booleans: (string * bool) list) =\n        let std = (std, options) ||> List.fold (fun complete opt ->\n            match opt with Some name -> complete + \" \" + name | None -> complete)\n        (std, booleans) ||> List.fold (fun complete (name, flag) ->\n            if flag then complete + \" \" + name else complete)\n        |> ClassName :> IHTMLProp\n\n[<RequireQualifiedAccess>]\nmodule Fa =\n\n    module Classes =\n        module Size =\n            let [<Literal>] FaExtraSmall = \"fa-xs\"\n            let [<Literal>] FaSmall = \"fa-sm\"\n            let [<Literal>] FaLarge = \"fa-lg\"\n            let [<Literal>] Fa2x = \"fa-2x\"\n            let [<Literal>] Fa3x = \"fa-3x\"\n            let [<Literal>] Fa4x = \"fa-4x\"\n            let [<Literal>] Fa5x = \"fa-5x\"\n            let [<Literal>] Fa6x = \"fa-6x\"\n            let [<Literal>] Fa7x = \"fa-7x\"\n            let [<Literal>] Fa8x = \"fa-8x\"\n            let [<Literal>] Fa9x = \"fa-9x\"\n            let [<Literal>] Fa10 = \"fa-10x\"\n\n        module Style =\n            let [<Literal>] FixedWidth = \"fa-fw\"\n            let [<Literal>] IsLi = \"fa-li\"\n            let [<Literal>] Border = \"fa-border\"\n            let [<Literal>] Inverse = \"fa-inverse\"\n\n        module Rotations =\n            let [<Literal>] Rotate90 = \"fa-rotate-90\"\n            let [<Literal>] Rotate180 = \"fa-rotate-180\"\n            let [<Literal>] Rotate270 = \"fa-rotate-270\"\n\n        module Flips =\n            let [<Literal>] Horizontal = \"fa-flip-horizontal\"\n            let [<Literal>] Vertical = \"fa-flip-vertical\"\n\n        module Animations =\n            let [<Literal>] Spin = \"fa-spin\"\n            let [<Literal>] Pulse = \"fa-pulse\"\n\n        module Pull =\n            let [<Literal>] Right = \"fa-pull-right\"\n            let [<Literal>] Left = \"fa-pull-left\"\n\n        module Stack =\n\n            let [<Literal>] Container = \"fa-stack\"\n\n            module Size =\n                let [<Literal>] Fa1x = \"fa-stack-1x\"\n                let [<Literal>] Fa2x = \"fa-stack-2x\"\n\n    type ISize =\n        | FaExtraSmall\n        | FaSmall\n        | FaLarge\n        | Fa2x\n        | Fa3x\n        | Fa4x\n        | Fa5x\n        | Fa6x\n        | Fa7x\n        | Fa8x\n        | Fa9x\n        | Fa10\n\n    type IconOption =\n        | Size of ISize\n        | Border\n        | PullLeft\n        | PullRight\n        | Inverse\n        | Rotate90\n        | Rotate180\n        | Rotate270\n        | FlipHorizontal\n        | FlipVertical\n        | IsLi\n        | Icon of string\n        | Spin\n        | Pulse\n        | Props of IHTMLProp list\n        | CustomClass of string\n        | FixedWidth\n        | Stack1x\n        | Stack2x\n\n    let internal ofSize (size : ISize) =\n        match size with\n        | FaExtraSmall -> Classes.Size.FaExtraSmall\n        | FaSmall -> Classes.Size.FaSmall\n        | FaLarge -> Classes.Size.FaLarge\n        | Fa2x -> Classes.Size.Fa2x\n        | Fa3x -> Classes.Size.Fa3x\n        | Fa4x -> Classes.Size.Fa4x\n        | Fa5x -> Classes.Size.Fa5x\n        | Fa6x -> Classes.Size.Fa6x\n        | Fa7x -> Classes.Size.Fa7x\n        | Fa8x -> Classes.Size.Fa8x\n        | Fa9x -> Classes.Size.Fa9x\n        | Fa10 -> Classes.Size.Fa10\n\n    type IconOptions =\n        { Icon : string option\n          Size : string option\n          Border : string option\n          Pull : string option\n          HaveSpin : bool\n          HavePulse : bool\n          Rotation : string option\n          Flip : string option\n          IsInverse : bool\n          Props : IHTMLProp list\n          FixedWidth : bool\n          IsLi : bool\n          StackSize : string option\n          CustomClass : string option }\n\n        static member Empty =\n            { Icon = None\n              Size = None\n              Border = None\n              Pull = None\n              HaveSpin = false\n              HavePulse = false\n              Rotation = None\n              Flip = None\n              IsInverse = false\n              Props = [ ]\n              FixedWidth = false\n              IsLi = false\n              StackSize = None\n              CustomClass = None }\n\n    let toIconOptions (faOptions: IconOption list) =\n        let parseOptions (result: IconOptions) (option: IconOption) =\n            match option with\n            | Size s ->\n                { result with Size = ofSize s |> Some }\n            | Border ->\n                { result with Border = Some Classes.Style.Border }\n            | PullLeft ->\n                { result with Pull = Some Classes.Pull.Left }\n            | PullRight ->\n                { result with Pull = Some Classes.Pull.Right }\n            | Inverse ->\n                { result with IsInverse = true }\n            | Icon faIcon ->\n                { result with Icon = faIcon |> Some }\n            | Rotate90 ->\n                { result with Rotation = Classes.Rotations.Rotate90 |> Some }\n            | Rotate180 ->\n                { result with Rotation = Classes.Rotations.Rotate180 |> Some }\n            | Rotate270 ->\n                { result with Rotation = Classes.Rotations.Rotate270 |> Some }\n            | FlipHorizontal ->\n                { result with Rotation = Classes.Flips.Horizontal |> Some }\n            | FlipVertical ->\n                { result with Rotation = Classes.Flips.Vertical |> Some }\n            | Spin ->\n                { result with HaveSpin = true }\n            | Pulse ->\n                { result with HavePulse = true }\n            | Props props ->\n                { result with Props = props }\n            | FixedWidth ->\n                { result with FixedWidth = true }\n            | IsLi ->\n                { result with IsLi = true }\n            | CustomClass customClass ->\n                { result with CustomClass = Some customClass }\n            | Stack1x ->\n                { result with StackSize = Some Classes.Stack.Size.Fa1x }\n            | Stack2x ->\n                { result with StackSize = Some Classes.Stack.Size.Fa2x }\n\n        faOptions |> List.fold parseOptions IconOptions.Empty\n\n    /// Logic used to display one icon alone or as one item in an unordered list:\n    let internal displayIcon baseElement baseClass (opts: IconOptions) children  =\n        let classes =\n            Helpers.classes baseClass\n                [ opts.Icon\n                  opts.Size\n                  opts.Border\n                  opts.Pull\n                  opts.Rotation\n                  opts.Flip\n                  opts.CustomClass\n                  opts.StackSize ]\n                [ Classes.Style.FixedWidth, opts.FixedWidth\n                  Classes.Style.IsLi, opts.IsLi\n                  Classes.Animations.Pulse, opts.HavePulse\n                  Classes.Animations.Spin, opts.HaveSpin\n                  Classes.Style.Inverse, opts.IsInverse ]\n\n        baseElement (classes::opts.Props)\n          children\n\n    let ul props children =\n        ul [ ClassName \"fa-ul\" ]\n            children\n\n    let ol props children =\n        ol [ ClassName \"fa-ul\" ]\n            children\n\n    let i (faOptions: IconOption list) children =\n        let opts = toIconOptions faOptions\n        displayIcon i \"\" opts children\n\n    let span (faOptions: IconOption list) children =\n        let opts = toIconOptions faOptions\n        displayIcon span \"\" opts children\n\n    module Stack =\n        type Option =\n            | Size of ISize\n            | CustomClass of string\n            | Props of IHTMLProp list\n\n        type internal Options =\n            { Size : string option\n              Props : IHTMLProp list\n              CustomClass : string option }\n\n            static member Empty =\n                { Size = None\n                  Props = [ ]\n                  CustomClass = None }\n\n\n    let stack options children =\n        let parseOption (result : Stack.Options) opt =\n            match opt with\n            | Stack.Size size ->\n                { result with Size = ofSize size |> Some }\n            | Stack.CustomClass customClass ->\n                { result with CustomClass = Some customClass }\n            | Stack.Props props ->\n                { result with Props = props }\n\n        let opts = options |> List.fold parseOption Stack.Options.Empty\n        let classes = Helpers.classes\n                        Classes.Stack.Container\n                        ( opts.Size\n                            :: opts.CustomClass\n                            :: [] )\n                        [ ]\n\n        Fable.React.Standard.span (classes::opts.Props)\n            children\n","namespace Fulma\r\n\r\nopen Fable.React\r\nopen Fable.React.Props\r\n\r\nmodule Reflection =\r\n\r\n    open Microsoft.FSharp.Reflection\r\n    open System\r\n\r\n    let getCaseName (case : 'T) =\r\n#if FABLE_COMPILER\r\n        Fable.Core.Reflection.getCaseName case\r\n#else\r\n        // Get UnionCaseInfo value from the F# reflection tools\r\n        let (caseInfo, _args) = FSharpValue.GetUnionFields(case, typeof<'T>)\r\n        caseInfo.GetCustomAttributes()\r\n        |> Seq.tryPick (function\r\n                        | :? CompiledNameAttribute as att -> Some att.CompiledName\r\n                        | _ -> None)\r\n        |> Option.defaultWith (fun () -> caseInfo.Name)\r\n#endif\r\n\r\n    let getCaseTag (case : 'T) =\r\n#if FABLE_COMPILER\r\n        Fable.Core.Reflection.getCaseTag case\r\n#else\r\n        let (caseInfo, _args) = FSharpValue.GetUnionFields(case, typeof<'T>)\r\n        caseInfo.Tag\r\n#endif\r\n\r\n[<RequireQualifiedAccess>]\r\ntype Screen =\r\n    | All\r\n    | [<CompiledName(\"desktop\")>] Desktop\r\n    | [<CompiledName(\"tablet\")>] Tablet\r\n    | [<CompiledName(\"mobile\")>] Mobile\r\n    | [<CompiledName(\"widescreen\")>] WideScreen\r\n    | [<CompiledName(\"touch\")>] Touch\r\n    | [<CompiledName(\"fullhd\")>] FullHD\r\n\r\n    static member ToString (screen : Screen) =\r\n        match screen with\r\n        | All -> \"\"\r\n        | Desktop\r\n        | Tablet\r\n        | Mobile\r\n        | WideScreen\r\n        | Touch\r\n        | FullHD -> \"-\" + Reflection.getCaseName screen\r\n\r\n[<AutoOpen>]\r\nmodule Color =\r\n\r\n    type IColor =\r\n        | [<CompiledName(\"is-black\")>] IsBlack\r\n        | [<CompiledName(\"is-dark\")>] IsDark\r\n        | [<CompiledName(\"is-light\")>] IsLight\r\n        | [<CompiledName(\"is-white\")>] IsWhite\r\n        | [<CompiledName(\"is-primary\")>] IsPrimary\r\n        | [<CompiledName(\"is-info\")>] IsInfo\r\n        | [<CompiledName(\"is-success\")>] IsSuccess\r\n        | [<CompiledName(\"is-warning\")>] IsWarning\r\n        | [<CompiledName(\"is-danger\")>] IsDanger\r\n        | [<CompiledName(\"is-link\")>] IsLink\r\n        | [<CompiledName(\"is-black-bis\")>] IsBlackBis\r\n        | [<CompiledName(\"is-black-ter\")>] IsBlackTer\r\n        | [<CompiledName(\"is-grey-darker\")>] IsGreyDarker\r\n        | [<CompiledName(\"is-grey-dark\")>] IsGreyDark\r\n        | [<CompiledName(\"is-grey\")>] IsGrey\r\n        | [<CompiledName(\"is-grey-light\")>] IsGreyLight\r\n        | [<CompiledName(\"is-grey-lighter\")>] IsGreyLighter\r\n        | [<CompiledName(\"is-white-ter\")>] IsWhiteTer\r\n        | [<CompiledName(\"is-white-bis\")>] IsWhiteBis\r\n        /// Allow you to specify a custom color. The color will be prefixed by \"is-\"\r\n        | IsCustomColor of string\r\n        /// Allow you to specify a NoColor case.\r\n        | NoColor\r\n\r\n    let ofColor level =\r\n        match level with\r\n        | NoColor -> \"\"\r\n        | IsCustomColor color -> \"is-\" + color\r\n        | IsBlack\r\n        | IsDark\r\n        | IsLight\r\n        | IsWhite\r\n        | IsPrimary\r\n        | IsInfo\r\n        | IsSuccess\r\n        | IsWarning\r\n        | IsDanger\r\n        | IsLink\r\n        | IsBlackBis\r\n        | IsBlackTer\r\n        | IsGreyDarker\r\n        | IsGreyDark\r\n        | IsGrey\r\n        | IsGreyLight\r\n        | IsGreyLighter\r\n        | IsWhiteTer\r\n        | IsWhiteBis -> Reflection.getCaseName level\r\n\r\n[<AutoOpen>]\r\nmodule Size =\r\n\r\n    type ISize =\r\n        | [<CompiledName(\"is-small\")>] IsSmall\r\n        | [<CompiledName(\"is-medium\")>] IsMedium\r\n        | [<CompiledName(\"is-large\")>] IsLarge\r\n\r\n    let inline ofSize size =\r\n        Reflection.getCaseName size\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule TextSize =\r\n    type Option =\r\n        | Is1\r\n        | Is2\r\n        | Is3\r\n        | Is4\r\n        | Is5\r\n        | Is6\r\n        | Is7\r\n\r\n        static member ToString (x: Option) =\r\n            Reflection.getCaseTag x + 1 |> string\r\n\r\n    let inline generic screen size =\r\n        \"is-size-\" + Option.ToString size + Screen.ToString screen\r\n\r\n    let inline only screen size =\r\n        match screen with\r\n        | Screen.Tablet\r\n        | Screen.Desktop\r\n        | Screen.WideScreen ->\r\n            \"is-size-\" + Option.ToString size + Screen.ToString screen + \"-only\"\r\n        | x ->\r\n            Fable.Core.JS.console.warn(sprintf \"Screen `%s` does not support `is-size-xxx-only`.\" (string x))\r\n            \"\"\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule TextAlignment =\r\n\r\n    type Option =\r\n        /// Add `has-text-centered`\r\n        | [<CompiledName(\"has-text-centered\")>] Centered\r\n        /// Add `has-text-justified`\r\n        | [<CompiledName(\"has-text-justified\")>] Justified\r\n        /// Add `has-text-left`\r\n        | [<CompiledName(\"has-text-left\")>] Left\r\n        /// Add `has-text-right`\r\n        | [<CompiledName(\"has-text-right\")>] Right\r\n\r\n        static member inline ToString opt =\r\n            Reflection.getCaseName opt\r\n\r\n    let inline generic screen alignment =\r\n        Option.ToString alignment + Screen.ToString screen\r\n\r\n    let inline only screen alignment =\r\n        match screen with\r\n        | Screen.Tablet\r\n        | Screen.Desktop\r\n        | Screen.WideScreen ->\r\n            Option.ToString alignment + Screen.ToString screen + \"-only\"\r\n        | x ->\r\n            Fable.Core.JS.console.warn(sprintf \"Screen `%s` does not support `is-size-xxx-only`.\" (string x))\r\n            \"\"\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexDirection =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-flex-direction-row</c></summary>\r\n        | [<CompiledName(\"is-flex-direction-row\")>] Row\r\n        /// <summary>Add <c>is-flex-direction-row-reverse</c></summary>\r\n        | [<CompiledName(\"is-flex-direction-row-reverse\")>] RowReverse\r\n        /// <summary>Add <c>is-flex-direction-column</c></summary>\r\n        | [<CompiledName(\"is-flex-direction-column\")>] Column\r\n        /// <summary>Add <c>is-flex-direction-column-reverse</c></summary>\r\n        | [<CompiledName(\"is-flex-direction-column-reverse\")>] ColumnReverse\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexWrap =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-flex-wrap-nowrap</c></summary>\r\n        | [<CompiledName(\"is-flex-wrap-nowrap\")>] NoWrap\r\n        /// <summary>Add <c>is-flex-wrap-wrap</c></summary>\r\n        | [<CompiledName(\"is-flex-wrap-wrap\")>] Wrap\r\n        /// <summary>Add <c>is-flex-wrap-wrap-reverse</c></summary>\r\n        | [<CompiledName(\"is-flex-wrap-wrap-reverse\")>] WrapReverse\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexJustifyContent =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-justify-content-flex-start</c></summary>\r\n        | [<CompiledName(\"is-justify-content-flex-start\")>] FlexStart\r\n        /// <summary>Add <c>is-justify-content-flex-end</c></summary>\r\n        | [<CompiledName(\"is-justify-content-flex-end\")>] FlexEnd\r\n        /// <summary>Add <c>is-justify-content-center</c></summary>\r\n        | [<CompiledName(\"is-justify-content-center\")>] Center\r\n        /// <summary>Add <c>is-justify-content-space-between</c></summary>\r\n        | [<CompiledName(\"is-justify-content-space-between\")>] SpaceBetween\r\n        /// <summary>Add <c>is-justify-content-space-around</c></summary>\r\n        | [<CompiledName(\"is-justify-content-space-around\")>] SpaceAround\r\n        /// <summary>Add <c>is-justify-content-space-evenly</c></summary>\r\n        | [<CompiledName(\"is-justify-content-space-evenly\")>] SpaceEvenly\r\n        /// <summary>Add <c>is-justify-content-start</c></summary>\r\n        | [<CompiledName(\"is-justify-content-start\")>] Start\r\n        /// <summary>Add <c>is-justify-content-end</c></summary>\r\n        | [<CompiledName(\"is-justify-content-end\")>] End\r\n        /// <summary>Add <c>is-justify-content-left</c></summary>\r\n        | [<CompiledName(\"is-justify-content-left\")>] Left\r\n        /// <summary>Add <c>is-justify-content-right</c></summary>\r\n        | [<CompiledName(\"is-justify-content-right\")>] Right\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexAlignContent =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-align-content-flex-start</c></summary>\r\n        | [<CompiledName(\"is-align-content-flex-start\")>] FlexStart\r\n        /// <summary>Add <c>is-align-content-flex-end</c></summary>\r\n        | [<CompiledName(\"is-align-content-flex-end\")>] FlexEnd\r\n        /// <summary>Add <c>is-align-content-center</c></summary>\r\n        | [<CompiledName(\"is-align-content-center\")>] Center\r\n        /// <summary>Add <c>is-align-content-space-between</c></summary>\r\n        | [<CompiledName(\"is-align-content-space-between\")>] SpaceBetween\r\n        /// <summary>Add <c>is-align-content-space-around</c></summary>\r\n        | [<CompiledName(\"is-align-content-space-around\")>] SpaceAround\r\n        /// <summary>Add <c>is-align-content-space-evenly</c></summary>\r\n        | [<CompiledName(\"is-align-content-space-evenly\")>] SpaceEvenly\r\n        /// <summary>Add <c>is-align-content-stretch</c></summary>\r\n        | [<CompiledName(\"is-align-content-stretch\")>] Stretch\r\n        /// <summary>Add <c>is-align-content-start</c></summary>\r\n        | [<CompiledName(\"is-align-content-start\")>] Start\r\n        /// <summary>Add <c>is-align-content-end</c></summary>\r\n        | [<CompiledName(\"is-align-content-end\")>] End\r\n        /// <summary>Add <c>is-align-content-baseline</c></summary>\r\n        | [<CompiledName(\"is-align-content-baseline\")>] Baseline\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexAlignItems =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-align-items-stretch</c></summary>\r\n        | [<CompiledName(\"is-align-items-stretch\")>] Stretch\r\n        /// <summary>Add <c>is-align-items-flex-start</c></summary>\r\n        | [<CompiledName(\"is-align-items-flex-start\")>] FlexStart\r\n        /// <summary>Add <c>is-align-items-flex-end</c></summary>\r\n        | [<CompiledName(\"is-align-items-flex-end\")>] FlexEnd\r\n        /// <summary>Add <c>is-align-items-center</c></summary>\r\n        | [<CompiledName(\"is-align-items-center\")>] Center\r\n        /// <summary>Add <c>is-align-items-baseline</c></summary>\r\n        | [<CompiledName(\"is-align-items-baseline\")>] Baseline\r\n        /// <summary>Add <c>is-align-items-start</c></summary>\r\n        | [<CompiledName(\"is-align-items-start\")>] Start\r\n        /// <summary>Add <c>is-align-items-end</c></summary>\r\n        | [<CompiledName(\"is-align-items-end\")>] End\r\n        /// <summary>Add <c>is-align-items-self-start</c></summary>\r\n        | [<CompiledName(\"is-align-items-self-start\")>] SelfStart\r\n        /// <summary>Add <c>is-align-items-self-end</c></summary>\r\n        | [<CompiledName(\"is-align-items-self-end\")>] SelfEnd\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexAlignSelf =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-align-self-auto</c></summary>\r\n        | [<CompiledName(\"is-align-self-auto\")>] Auto\r\n        /// <summary>Add <c>is-align-self-flex-start</c></summary>\r\n        | [<CompiledName(\"is-align-self-flex-start\")>] FlexStart\r\n        /// <summary>Add <c>is-align-self-flex-end</c></summary>\r\n        | [<CompiledName(\"is-align-self-flex-end\")>] FlexEnd\r\n        /// <summary>Add <c>is-align-self-center</c></summary>\r\n        | [<CompiledName(\"is-align-self-center\")>] Center\r\n        /// <summary>Add <c>is-align-self-baseline</c></summary>\r\n        | [<CompiledName(\"is-align-self-baseline\")>] Baseline\r\n        /// <summary>Add <c>is-align-self-stretch</c></summary>\r\n        | [<CompiledName(\"is-align-self-stretch\")>] Stretch\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexGrow =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-flex-grow-0</c></summary>\r\n        | [<CompiledName(\"is-flex-grow-0\")>] Is0\r\n        /// <summary>Add <c>is-flex-grow-1</c></summary>\r\n        | [<CompiledName(\"is-flex-grow-1\")>] Is1\r\n        /// <summary>Add <c>is-flex-grow-2</c></summary>\r\n        | [<CompiledName(\"is-flex-grow-2\")>] Is2\r\n        /// <summary>Add <c>is-flex-grow-3</c></summary>\r\n        | [<CompiledName(\"is-flex-grow-3\")>] Is3\r\n        /// <summary>Add <c>is-flex-grow-4</c></summary>\r\n        | [<CompiledName(\"is-flex-grow-4\")>] Is4\r\n        /// <summary>Add <c>is-flex-grow-5</c></summary>\r\n        | [<CompiledName(\"is-flex-grow-5\")>] Is5\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexShrink =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-flex-shrink-0</c></summary>\r\n        | [<CompiledName(\"is-flex-shrink-0\")>] Is0\r\n        /// <summary>Add <c>is-flex-shrink-1</c></summary>\r\n        | [<CompiledName(\"is-flex-shrink-1\")>] Is1\r\n        /// <summary>Add <c>is-flex-shrink-2</c></summary>\r\n        | [<CompiledName(\"is-flex-shrink-2\")>] Is2\r\n        /// <summary>Add <c>is-flex-shrink-3</c></summary>\r\n        | [<CompiledName(\"is-flex-shrink-3\")>] Is3\r\n        /// <summary>Add <c>is-flex-shrink-4</c></summary>\r\n        | [<CompiledName(\"is-flex-shrink-4\")>] Is4\r\n        /// <summary>Add <c>is-flex-shrink-5</c></summary>\r\n        | [<CompiledName(\"is-flex-shrink-5\")>] Is5\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule TextWeight =\r\n\r\n    type Option =\r\n        /// Add `has-text-weight-light`\r\n        | [<CompiledName(\"has-text-weight-light\")>] Light\r\n        /// Add `has-text-weight-normal`\r\n        | [<CompiledName(\"has-text-weight-normal\")>] Normal\r\n        /// Add `has-text-weight-semibold`\r\n        | [<CompiledName(\"has-text-weight-semibold\")>] SemiBold\r\n        /// Add `has-text-weight-bold`\r\n        | [<CompiledName(\"has-text-weight-bold\")>] Bold\r\n        /// Add `has-text-weight-medium`\r\n        | [<CompiledName(\"has-text-weight-medium\")>] Medium\r\n\r\n    let inline internal ofOption opt =\r\n        Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule TextTransform =\r\n\r\n    type Option =\r\n        /// Add `is-capitalized`\r\n        | [<CompiledName(\"is-capitalized\")>] Capitalized\r\n        /// Add `is-lowercase`\r\n        | [<CompiledName(\"is-lowercase\")>] LowerCase\r\n        /// Add `is-uppercase`\r\n        | [<CompiledName(\"is-uppercase\")>] UpperCase\r\n        /// Add `is-italic`\r\n        | [<CompiledName(\"is-italic\")>] Italic\r\n        /// Add `is-underlined`\r\n        | [<CompiledName(\"is-underlined\")>] Underlined\r\n\r\n        static member inline toClass opt =\r\n            Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Display =\r\n\r\n    type Option =\r\n        | [<CompiledName(\"block\")>] Block\r\n        | [<CompiledName(\"flex\")>] Flex\r\n        | [<CompiledName(\"inline\")>] Inline\r\n        | [<CompiledName(\"inline-block\")>] InlineBlock\r\n        | [<CompiledName(\"inline-flex\")>] InlineFlex\r\n\r\n        static member inline toClass opt =\r\n            Reflection.getCaseName opt\r\n\r\n    let internal toDisplayClass screen display =\r\n        let display = Option.toClass display\r\n        let screen = Screen.ToString screen\r\n\r\n        \"is-\" + display + screen\r\n\r\n    let internal toDisplayOnlyClass screen display =\r\n        match screen with\r\n        | Screen.Tablet\r\n        | Screen.Desktop\r\n        | Screen.WideScreen ->\r\n            let display = Option.toClass display\r\n            let screen = Screen.ToString screen\r\n            \"is-\" + display + screen + \"-only\"\r\n\r\n        | x ->\r\n            Fable.Core.JS.console.warn(sprintf \"Screen `%s` does not support display only.\" (string x))\r\n            \"\"\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Spacing =\r\n    type TypeAndDirection =\r\n        | [<CompiledName(\"m\")>] Margin\r\n        | [<CompiledName(\"mt\")>] MarginTop\r\n        | [<CompiledName(\"mr\")>] MarginRight\r\n        | [<CompiledName(\"mb\")>] MarginBottom\r\n        | [<CompiledName(\"ml\")>] MarginLeft\r\n        | [<CompiledName(\"my\")>] MarginTopAndBottom\r\n        | [<CompiledName(\"mx\")>] MarginLeftAndRight\r\n        | [<CompiledName(\"p\")>] Padding\r\n        | [<CompiledName(\"pt\")>] PaddingTop\r\n        | [<CompiledName(\"pr\")>] PaddingRight\r\n        | [<CompiledName(\"pb\")>] PaddingBottom\r\n        | [<CompiledName(\"pl\")>] PaddingLeft\r\n        | [<CompiledName(\"py\")>] PaddingTopAndBottom\r\n        | [<CompiledName(\"px\")>] PaddingLeftAndRight\r\n\r\n        static member inline toClass opt =\r\n            Reflection.getCaseName opt\r\n\r\n    type Amount =\r\n        | [<CompiledName(\"auto\")>] IsAuto\r\n        | [<CompiledName(\"0\")>] Is0\r\n        | [<CompiledName(\"1\")>] Is1\r\n        | [<CompiledName(\"2\")>] Is2\r\n        | [<CompiledName(\"3\")>] Is3\r\n        | [<CompiledName(\"4\")>] Is4\r\n        | [<CompiledName(\"5\")>] Is5\r\n        | [<CompiledName(\"6\")>] Is6\r\n\r\n        static member inline toClass opt =\r\n            Reflection.getCaseName opt\r\n\r\n    let internal toSpacingClass typ amount =\r\n        let typ = TypeAndDirection.toClass typ\r\n        let amount = Amount.toClass amount\r\n\r\n        typ + \"-\" + amount\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Modifier =\r\n    let internal ofBackground level =\r\n        match level with\r\n        | NoColor -> \"\"\r\n        | IsCustomColor color -> \"has-background-\" + color\r\n        | IsBlack\r\n        | IsDark\r\n        | IsLight\r\n        | IsWhite\r\n        | IsPrimary\r\n        | IsInfo\r\n        | IsSuccess\r\n        | IsWarning\r\n        | IsDanger\r\n        | IsLink\r\n        | IsBlackBis\r\n        | IsBlackTer\r\n        | IsGreyDarker\r\n        | IsGreyDark\r\n        | IsGrey\r\n        | IsGreyLight\r\n        | IsGreyLighter\r\n        | IsWhiteTer\r\n        | IsWhiteBis -> \"has-background-\" + (Reflection.getCaseName level).[3..]\r\n\r\n    let internal ofText level =\r\n        match level with\r\n        | NoColor -> \"\"\r\n        | IsCustomColor color -> \"has-text-\" + color\r\n        | IsBlack\r\n        | IsDark\r\n        | IsLight\r\n        | IsWhite\r\n        | IsPrimary\r\n        | IsInfo\r\n        | IsSuccess\r\n        | IsWarning\r\n        | IsDanger\r\n        | IsLink\r\n        | IsBlackBis\r\n        | IsBlackTer\r\n        | IsGreyDarker\r\n        | IsGreyDark\r\n        | IsGrey\r\n        | IsGreyLight\r\n        | IsGreyLighter\r\n        | IsWhiteTer\r\n        | IsWhiteBis -> \"has-text-\" + (Reflection.getCaseName level).[3..]\r\n\r\n    let internal ofInvisible screen =\r\n        \"is-invisible\" + Screen.ToString screen\r\n\r\n    let internal ofHidden screen =\r\n        \"is-hidden\" + Screen.ToString screen\r\n\r\n    let internal ofInvisibleOnly screen =\r\n        match screen with\r\n        | Screen.Tablet\r\n        | Screen.Desktop\r\n        | Screen.WideScreen ->\r\n            \"is-invisible\" + Screen.ToString screen + \"-only\"\r\n        | x ->\r\n            Fable.Core.JS.console.warn(sprintf \"Screen `%s` does not support `is-invisible-xxx-only`.\" (string x))\r\n            \"\"\r\n\r\n    let internal ofHiddenOnly screen =\r\n        match screen with\r\n        | Screen.Tablet\r\n        | Screen.Desktop\r\n        | Screen.WideScreen ->\r\n            \"is-hidden\" + Screen.ToString screen + \"-only\"\r\n        | x ->\r\n            Fable.Core.JS.console.warn(sprintf \"Screen `%s` does not support `is-hidden-xxx-only`.\" (string x))\r\n            \"\"\r\n\r\n    type IModifier =\r\n        | BackgroundColor of IColor\r\n        | TextColor of IColor\r\n        | TextWeight of TextWeight.Option\r\n        | TextSize of Screen * TextSize.Option\r\n        | TextSizeOnly of Screen * TextSize.Option\r\n        | TextAlignment of Screen * TextAlignment.Option\r\n        | TextAlignmentOnly of Screen * TextAlignment.Option\r\n        | TextTransform of TextTransform.Option\r\n        | Display of Screen * Display.Option\r\n        | DisplayOnly of Screen * Display.Option\r\n        | [<CompiledName(\"is-clearfix\")>] IsClearfix\r\n        | [<CompiledName(\"is-pulled-left\")>] IsPulledLeft\r\n        | [<CompiledName(\"is-pulled-right\")>] IsPulledRight\r\n        | [<CompiledName(\"is-marginless\")>] IsMarginless\r\n        | [<CompiledName(\"is-paddingless\")>] IsPaddingless\r\n        | [<CompiledName(\"is-overlay\")>] IsOverlay\r\n        | [<CompiledName(\"is-clipped\")>] IsClipped\r\n        | [<CompiledName(\"is-radiusless\")>] IsRadiusless\r\n        | [<CompiledName(\"is-shadowless\")>] IsShadowless\r\n        | [<CompiledName(\"is-unselectable\")>] IsUnselectable\r\n        | [<CompiledName(\"is-clickable\")>] IsClickable\r\n        | [<CompiledName(\"is-relative\")>] IsRelative\r\n        | [<CompiledName(\"is-flex\")>] IsFlex\r\n        | IsInvisible of Screen * bool\r\n        | IsHidden of Screen * bool\r\n        | IsInvisibleOnly of Screen * bool\r\n        | IsHiddenOnly of Screen * bool\r\n        | IsSrOnly\r\n        | IsScreenReaderOnly\r\n        | Spacing of Spacing.TypeAndDirection * Spacing.Amount\r\n        // Flexbox helpers\r\n        | FlexDirection of FlexDirection.Option\r\n        | FlexWrap of FlexWrap.Option\r\n        | FlexJustifyContent of FlexJustifyContent.Option\r\n        | FlexAlignContent of FlexAlignContent.Option\r\n        | FlexAlignItems of FlexAlignItems.Option\r\n        | FlexAlignSelf of FlexAlignSelf.Option\r\n        | FlexGrow of FlexGrow.Option\r\n        | FlexShrink of FlexShrink.Option\r\n\r\n\r\n\r\n                //     | IsGap (screen, size) ->\r\n                // if not (List.contains \"is-variable\" result.Classes) then\r\n                //     result.AddClass(\"is-variable\").AddClass(gapSizeGeneric screen size)\r\n                // else\r\n                //     result.AddClass(gapSizeGeneric screen size)\r\n\r\n\r\n\r\n    let parseModifiers options =\r\n        let parseOptions result option =\r\n            match option with\r\n            | BackgroundColor color             -> (ofBackground color)::result\r\n            | TextColor color                   -> (ofText color)::result\r\n            | TextWeight textWeight             -> (TextWeight.ofOption textWeight)::result\r\n            | TextSize (screen, size)           -> (TextSize.generic screen size)::result\r\n            | TextSizeOnly (screen, size)       -> (TextSize.only screen size)::result\r\n            | TextAlignment (screen, size)      -> (TextAlignment.generic screen size)::result\r\n            | TextAlignmentOnly (screen, size)  -> (TextAlignment.only screen size)::result\r\n            | TextTransform transform           -> (TextTransform.Option.toClass transform)::result\r\n            | Display (screen, display)         -> (Display.toDisplayClass screen display)::result\r\n            | DisplayOnly (screen, display)     -> (Display.toDisplayOnlyClass screen display)::result\r\n            | IsInvisible (screen, b)           -> if b then (ofInvisible screen)::result else result\r\n            | IsInvisibleOnly (screen, b)       -> if b then (ofInvisibleOnly screen)::result else result\r\n            | IsHidden (screen, b)              -> if b then (ofHidden screen)::result else result\r\n            | IsHiddenOnly (screen, b)          -> if b then (ofHiddenOnly screen)::result else result\r\n            | IsSrOnly\r\n            | IsScreenReaderOnly -> \"is-sr-only\"::result\r\n            | IsClearfix\r\n            | IsPulledLeft\r\n            | IsPulledRight\r\n            | IsMarginless\r\n            | IsPaddingless\r\n            | IsOverlay\r\n            | IsClipped\r\n            | IsRadiusless\r\n            | IsShadowless\r\n            | IsClickable\r\n            | IsUnselectable\r\n            | IsFlex\r\n            | IsRelative -> (Reflection.getCaseName option)::result\r\n            | Spacing (typ, amount) -> (Spacing.toSpacingClass typ amount)::result\r\n            | FlexDirection direction ->\r\n                if not (List.contains \"is-flex\" result) then\r\n                    \"is-flex\"::(FlexDirection.Option.toClass direction)::result\r\n                else\r\n                    (FlexDirection.Option.toClass direction)::result\r\n            | FlexWrap option ->\r\n                if not (List.contains \"is-flex\" result) then\r\n                    \"is-flex\"::(FlexWrap.Option.toClass option)::result\r\n                else\r\n                    (FlexWrap.Option.toClass option)::result\r\n            | FlexJustifyContent option ->\r\n                if not (List.contains \"is-flex\" result) then\r\n                    \"is-flex\"::(FlexJustifyContent.Option.toClass option)::result\r\n                else\r\n                    (FlexJustifyContent.Option.toClass option)::result\r\n            | FlexAlignContent option ->\r\n                if not (List.contains \"is-flex\" result) then\r\n                    \"is-flex\"::(FlexAlignContent.Option.toClass option)::result\r\n                else\r\n                    (FlexAlignContent.Option.toClass option)::result\r\n            | FlexAlignItems option ->\r\n                if not (List.contains \"is-flex\" result) then\r\n                    \"is-flex\"::(FlexAlignItems.Option.toClass option)::result\r\n                else\r\n                    (FlexAlignItems.Option.toClass option)::result\r\n\r\n            | FlexAlignSelf option ->\r\n                (FlexAlignSelf.Option.toClass option)::result\r\n\r\n            | FlexGrow size ->\r\n                (FlexGrow.Option.toClass size)::result\r\n\r\n            | FlexShrink size ->\r\n                (FlexShrink.Option.toClass size)::result\r\n\r\n        options |> List.fold parseOptions []\r\n\r\n[<AutoOpen>]\r\nmodule Common =\r\n    type GenericOption =\r\n        | CustomClass of string\r\n        | Props of IHTMLProp list\r\n        | Modifiers of Modifier.IModifier list\r\n\r\n    type GenericOptions =\r\n        { Props : IHTMLProp list\r\n          Classes : string list\r\n          RemovedClasses : string list }\r\n\r\n        static member Empty =\r\n            { Props = []; Classes = []; RemovedClasses = [] }\r\n\r\n        static member Parse(options, parser, ?baseClass, ?baseProps) =\r\n            let result = options |> List.fold parser GenericOptions.Empty\r\n\r\n            let result =\r\n                match baseClass with\r\n                | Some baseClass -> result.AddClass(baseClass)\r\n                | None -> result\r\n\r\n            match baseProps with\r\n            | Some baseProps -> result.AddProps(baseProps)\r\n            | None -> result\r\n\r\n        member this.AddProp(prop : IHTMLProp) =\r\n            { this with Props = prop::this.Props }\r\n\r\n        member this.AddProps(props : IHTMLProp list) =\r\n            { this with Props = props@this.Props }\r\n\r\n        member this.AddClass(cl: string) =\r\n            { this with Classes = cl::this.Classes }\r\n\r\n        member this.RemoveClass(cl: string) =\r\n            { this with RemovedClasses = cl::this.RemovedClasses }\r\n\r\n        member this.AddCaseName(case: 'T) =\r\n            Reflection.getCaseName case |> this.AddClass\r\n\r\n        member this.AddModifiers(modifiers) =\r\n            { this with Classes = (modifiers |> Modifier.parseModifiers) @ this.Classes }\r\n\r\n        member this.ToAttributes() =\r\n            match this.Classes |> List.filter (fun cls -> not (System.String.IsNullOrEmpty cls) && not (List.contains cls this.RemovedClasses)) with\r\n            | [] -> this.Props\r\n            | classes -> (classes |> String.concat \" \" |> ClassName :> _) :: this.Props\r\n\r\n        /// Convert to standard element\r\n        member this.ToReactElement(el : IHTMLProp list -> ReactElement list -> ReactElement, ?children): ReactElement =\r\n            let children = defaultArg children []\r\n            el (this.ToAttributes ()) children\r\n\r\n        /// Convert to self closing element\r\n        member this.ToReactElement(el : IHTMLProp list -> ReactElement): ReactElement =\r\n            el (this.ToAttributes ())\r\n\r\n    let parseOptions (result : GenericOptions) option =\r\n        match option with\r\n        | Props props -> result.AddProps props\r\n        | CustomClass customClass -> result.AddClass customClass\r\n        | Modifiers modifiers -> result.AddModifiers modifiers\r\n\r\n    module Helpers =\r\n\r\n        [<System.Obsolete(\"Use GenericOptions.Parse. This build an abstraction layer usable by all the components and helps reduce the bundle size\")>]\r\n        let classes std (options : string option list) (booleans: (string * bool) list) =\r\n            let std = (std, options) ||> List.fold (fun complete option ->\r\n                match option with\r\n                | Some name -> complete + \" \" + name\r\n                | None -> complete )\r\n            (std, booleans) ||> List.fold (fun complete (name, flag) ->\r\n                if flag then complete + \" \" + name else complete)\r\n            |> ClassName :> IHTMLProp\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Text =\r\n    open Fable.React\r\n\r\n    let p (options: GenericOption list) children =\r\n        GenericOptions.Parse(options, parseOptions).ToReactElement(p, children)\r\n\r\n    let div (options: GenericOption list) children =\r\n        GenericOptions.Parse(options, parseOptions).ToReactElement(div, children)\r\n\r\n    let span (options: GenericOption list) children =\r\n        GenericOptions.Parse(options, parseOptions).ToReactElement(span, children)\r\n","//translate SharedComponents.tsx\r\nmodule Components.SharedComponents\r\n\r\nopen Fable.React\r\nopen Fable.React.Props\r\nopen Fulma\r\n\r\nopen Shared\r\n\r\ntype Children = ReactElement seq\r\n\r\ntype ThemeProps = {\r\n    Theme:string\r\n}\r\n// https://bulma.io/documentation/modifiers/syntax/\r\n// type SizeClass = 'is-large' | 'is-small';\r\ntype SizeClass =\r\n    |Small\r\n    |Large\r\nlet getSizeText =\r\n    function\r\n    |Small -> \"is-small\"\r\n    |Large -> \"is-large\"\r\n\r\ntype NumberInputProps = {\r\n    Name:string\r\n    OnChange: NameValue -> unit\r\n    Placeholder: string option\r\n    Value: float option\r\n}\r\n\r\nopen CodeHelpers.FableHelpers\r\nopen Shared.Helpers\r\n\r\nlet Select<'t>\r\n    (props:{|\r\n            addedClasses: string list\r\n            items: 't list\r\n            map: 't -> string\r\n            parse: string -> 't option\r\n            onChange: 't -> unit\r\n            active: 't |})\r\n    =\r\n        select [\r\n            yield Value (props.active |> props.map)\r\n            yield Class (\"select\" :: props.addedClasses |> String.concat \" \")\r\n            yield OnChange (getTargetValue \"SelectOpt.OnChange\" >> Option.bind props.parse >> Option.iter props.onChange)\r\n            ](props.items |> Seq.map(fun item -> option [props.map item |> box |> Value ] [unbox <| props.map item]))\r\n\r\nlet SelectOpt<'t>\r\n    (props:{|\r\n            addedClasses: string list\r\n            emptyLabel: string\r\n            items: 't list\r\n            map: 't -> string\r\n            parse: string -> 't option\r\n            onChange: 't option -> unit\r\n            active: 't option |})\r\n    =\r\n        select [\r\n            yield Value (props.active |> Option.map props.map |> Option.defaultValue \"\")\r\n            yield Class (\"select\" :: props.addedClasses |> String.concat \" \")\r\n            yield OnChange (getTargetValue \"SelectOpt.OnChange\" >> Option.bind props.parse >> props.onChange)\r\n            ] [\r\n                yield option [Value \"\"] [unbox props.emptyLabel]\r\n                yield! (props.items |> Seq.map(fun item -> option [props.map item |> box |> Value ] [unbox <| props.map item]))\r\n            ]\r\n\r\nlet NumberInput (props:NumberInputProps) =\r\n    let parser =\r\n        Option.bind tryParseDec\r\n    input [\r\n        yield Class \"input\"\r\n        yield OnChange (fun x -> {Name= props.Name;Value= getTargetValue (sprintf \"NumberInput.%s\" props.Name) x |> parser } |> props.OnChange)\r\n        match props.Placeholder with\r\n        | Some x ->\r\n            yield Placeholder x\r\n        | None -> ()\r\n        match props.Value with\r\n        | Some x ->\r\n            yield DefaultValue x\r\n        | None -> ()\r\n        ]\r\n\r\n// type InputColumnProps\r\n\r\n// type InputType = React.DetailedHTMLProps<\r\n// let inputb = <select />\r\n// let inputa = <input />\r\n// export let HField = (props: { title: string; label: string; input: React.DetailedReactHTMLElement<{ className: string; }, HTMLElement>; }) =>(\r\nlet HField<'t> (props:{|title:string;label:string;input:string -> ReactElement|}): ReactElement =\r\n    div [Title props.title] [\r\n        div [Class \"field is-horizontal\"] [\r\n            div [Class \"field-label is-normal\"] [\r\n                label [Class \"label\"] [unbox props.label]\r\n            ]\r\n            div [Class \"field-body\"] [\r\n                div [Class \"field\"] [\r\n                    p [Class \"control\"] [\r\n                        (props.input \" input \")\r\n                    ]\r\n                ]\r\n            ]\r\n        ]\r\n    ]\r\n\r\nmodule TabLink =\r\n    // export type TabLinkProps<T extends string> = {\r\n    //   name:T\r\n    //   onClick:Types.Action1<T>\r\n    //   active: T | undefined\r\n    //   children: React.ReactNode\r\n    //   title?:string\r\n    // }\r\n    type TabLinkProps = {\r\n        Name:string\r\n        OnClick: string -> unit\r\n        Active: string option\r\n        Children: Children // Fable.React.ReactNode\r\n        Title:string option\r\n    }\r\n\r\n    let TabLink props =\r\n        li [\r\n            Key props.Name\r\n            Title (props.Title |> Option.defaultValue props.Name)\r\n            Class (match props.Active with | Some active when active = props.Name -> \"active\" | _ -> \"\")\r\n           ] [\r\n               a [\r\n                   OnClick (fun _ -> props.OnClick props.Name)\r\n                   Data(\"name\",props.Name)\r\n                ] props.Children\r\n            ]\r\n\r\n    let TabTextLink name active onClick =\r\n        TabLink {Name=name;Active=active;OnClick=onClick;Title=None;Children=[unbox name]}\r\n\r\nopen TabLink\r\n\r\nlet TabContainer<'t> addedClasses\r\n    (stdTabs:{|\r\n                names:'t list\r\n                map: 't -> string\r\n                onClick:'t -> unit\r\n                active:'t option |} option)\r\n    (children: ReactElement seq) =\r\n        div [Class (\"tabs is-centered is-boxed\" + (addedClasses |> Option.defaultValue \"\"))] [\r\n            ul [] [\r\n                match stdTabs with\r\n                | None -> ()\r\n                | Some tabs ->\r\n                    yield!\r\n                        tabs.names\r\n                        |> Seq.map(fun n ->\r\n                            TabTextLink (tabs.map n) (tabs.active |> Option.map tabs.map) (fun _ -> tabs.onClick n)\r\n                        )\r\n\r\n                yield! children\r\n            ]\r\n        ]\r\n\r\ntype DiagnosticMode =\r\n    |Shown\r\n    |Hidden\r\n\r\nlet Diagnostic mode (value:obj) =\r\n    try\r\n        pre [] [\r\n            match mode with\r\n            | Shown ->\r\n                yield unbox (Resolver.Serialize value)\r\n            | _ -> ()\r\n        ]\r\n    with ex ->\r\n        pre [] [\r\n            yield unbox ex.Message\r\n        ]\r\n\r\nlet Table (props:{| headers:string list;children:ReactElement seq |}) =\r\n    table [Class \"table\"] [\r\n        thead [] [\r\n            tr[] [\r\n                yield! props.headers |> Seq.map(fun h ->\r\n                    th [Key h;Class \"th\"] [unbox h]\r\n                )\r\n            ]\r\n        ]\r\n        tbody [] props.children\r\n    ]\r\n\r\ntype FoldableState = {\r\n  IsFolded:bool\r\n}\r\n\r\ntype FoldableProps = {\r\n  DefaultFold:bool\r\n  Title:string\r\n  Children:ReactElement\r\n}\r\n\r\n// export let FoldTarget = (props:{isFolded:boolean, children:React.ReactNode}) => (<React.Fragment>\r\n//   {props.isFolded? null : props.children}\r\n// </React.Fragment>);\r\nlet FoldTarget isFolded element : ReactElement =\r\n    fragment [] [\r\n        if isFolded then yield element\r\n    ]\r\n\r\nopen Fable.FontAwesome\r\n\r\nmodule Fa =\r\n    let FaIcon opts fa =\r\n        Icon.icon opts [Fa.i [fa] []]\r\n\r\nlet FoldMaster (props:{| title:string;isFolded:bool;onToggle:bool -> unit |}) =\r\n    let icon = if props.isFolded then Fa.Solid.Minus else Fa.Solid.Plus\r\n    let toggle = fun _ -> props.onToggle(not props.isFolded)\r\n    div [OnClick toggle] [\r\n        Fa.FaIcon [] icon\r\n        unbox props.title\r\n    ]\r\n\r\nlet getEvValue:Browser.Types.Event -> string =\r\n    fun e ->\r\n        Browser.Dom.console.log(e.currentTarget)\r\n        let result = e.Value\r\n        printfn \"EvTarget is %A\" result\r\n        result\r\n","[<AutoOpen>]\r\nmodule Fable.React.Standard\r\n\r\nopen Fable.React\r\n\r\nlet inline a props children = domEl \"a\" props children\r\nlet inline abbr props children = domEl \"abbr\" props children\r\nlet inline address props children = domEl \"address\" props children\r\nlet inline article props children = domEl \"article\" props children\r\nlet inline aside props children = domEl \"aside\" props children\r\nlet inline audio props children = domEl \"audio\" props children\r\nlet inline b props children = domEl \"b\" props children\r\nlet inline bdi props children = domEl \"bdi\" props children\r\nlet inline bdo props children = domEl \"bdo\" props children\r\nlet inline big props children = domEl \"big\" props children\r\nlet inline blockquote props children = domEl \"blockquote\" props children\r\nlet inline body props children = domEl \"body\" props children\r\nlet inline button props children = domEl \"button\" props children\r\nlet inline canvas props children = domEl \"canvas\" props children\r\nlet inline caption props children = domEl \"caption\" props children\r\nlet inline cite props children = domEl \"cite\" props children\r\nlet inline code props children = domEl \"code\" props children\r\nlet inline colgroup props children = domEl \"colgroup\" props children\r\nlet inline data props children = domEl \"data\" props children\r\nlet inline datalist props children = domEl \"datalist\" props children\r\nlet inline dd props children = domEl \"dd\" props children\r\nlet inline del props children = domEl \"del\" props children\r\nlet inline details props children = domEl \"details\" props children\r\nlet inline dfn props children = domEl \"dfn\" props children\r\nlet inline dialog props children = domEl \"dialog\" props children\r\nlet inline div props children = domEl \"div\" props children\r\nlet inline dl props children = domEl \"dl\" props children\r\nlet inline dt props children = domEl \"dt\" props children\r\nlet inline em props children = domEl \"em\" props children\r\nlet inline fieldset props children = domEl \"fieldset\" props children\r\nlet inline figcaption props children = domEl \"figcaption\" props children\r\nlet inline figure props children = domEl \"figure\" props children\r\nlet inline footer props children = domEl \"footer\" props children\r\nlet inline form props children = domEl \"form\" props children\r\nlet inline h1 props children = domEl \"h1\" props children\r\nlet inline h2 props children = domEl \"h2\" props children\r\nlet inline h3 props children = domEl \"h3\" props children\r\nlet inline h4 props children = domEl \"h4\" props children\r\nlet inline h5 props children = domEl \"h5\" props children\r\nlet inline h6 props children = domEl \"h6\" props children\r\nlet inline head props children = domEl \"head\" props children\r\nlet inline header props children = domEl \"header\" props children\r\nlet inline hgroup props children = domEl \"hgroup\" props children\r\nlet inline html props children = domEl \"html\" props children\r\nlet inline i props children = domEl \"i\" props children\r\nlet inline iframe props children = domEl \"iframe\" props children\r\nlet inline ins props children = domEl \"ins\" props children\r\nlet inline kbd props children = domEl \"kbd\" props children\r\nlet inline label props children = domEl \"label\" props children\r\nlet inline legend props children = domEl \"legend\" props children\r\nlet inline li props children = domEl \"li\" props children\r\nlet inline main props children = domEl \"main\" props children\r\nlet inline map props children = domEl \"map\" props children\r\nlet inline mark props children = domEl \"mark\" props children\r\nlet inline menu props children = domEl \"menu\" props children\r\nlet inline meter props children = domEl \"meter\" props children\r\nlet inline nav props children = domEl \"nav\" props children\r\nlet inline noscript props children = domEl \"noscript\" props children\r\nlet inline object props children = domEl \"object\" props children\r\nlet inline ol props children = domEl \"ol\" props children\r\nlet inline optgroup props children = domEl \"optgroup\" props children\r\nlet inline option props children = domEl \"option\" props children\r\nlet inline output props children = domEl \"output\" props children\r\nlet inline p props children = domEl \"p\" props children\r\nlet inline picture props children = domEl \"picture\" props children\r\nlet inline pre props children = domEl \"pre\" props children\r\nlet inline progress props children = domEl \"progress\" props children\r\nlet inline q props children = domEl \"q\" props children\r\nlet inline rp props children = domEl \"rp\" props children\r\nlet inline rt props children = domEl \"rt\" props children\r\nlet inline ruby props children = domEl \"ruby\" props children\r\nlet inline s props children = domEl \"s\" props children\r\nlet inline samp props children = domEl \"samp\" props children\r\nlet inline script props children = domEl \"script\" props children\r\nlet inline section props children = domEl \"section\" props children\r\nlet inline select props children = domEl \"select\" props children\r\nlet inline small props children = domEl \"small\" props children\r\nlet inline span props children = domEl \"span\" props children\r\nlet inline strong props children = domEl \"strong\" props children\r\nlet inline style props children = domEl \"style\" props children\r\nlet inline sub props children = domEl \"sub\" props children\r\nlet inline summary props children = domEl \"summary\" props children\r\nlet inline sup props children = domEl \"sup\" props children\r\nlet inline table props children = domEl \"table\" props children\r\nlet inline tbody props children = domEl \"tbody\" props children\r\nlet inline td props children = domEl \"td\" props children\r\nlet inline textarea props children = domEl \"textarea\" props children\r\nlet inline tfoot props children = domEl \"tfoot\" props children\r\nlet inline th props children = domEl \"th\" props children\r\nlet inline thead props children = domEl \"thead\" props children\r\nlet inline time props children = domEl \"time\" props children\r\nlet inline title props children = domEl \"title\" props children\r\nlet inline tr props children = domEl \"tr\" props children\r\nlet inline u props children = domEl \"u\" props children\r\nlet inline ul props children = domEl \"ul\" props children\r\nlet inline var props children = domEl \"var\" props children\r\nlet inline video props children = domEl \"video\" props children\r\n\r\n// Void element\r\nlet inline area props = voidEl \"area\" props\r\nlet inline ``base`` props = voidEl \"base\" props\r\nlet inline br props = voidEl \"br\" props\r\nlet inline col props = voidEl \"col\" props\r\nlet inline embed props = voidEl \"embed\" props\r\nlet inline hr props = voidEl \"hr\" props\r\nlet inline img props = voidEl \"img\" props\r\nlet inline input props = voidEl \"input\" props\r\nlet inline keygen props = voidEl \"keygen\" props\r\nlet inline link props = voidEl \"link\" props\r\nlet inline menuitem props = voidEl \"menuitem\" props\r\nlet inline meta props = voidEl \"meta\" props\r\nlet inline param props = voidEl \"param\" props\r\nlet inline source props = voidEl \"source\" props\r\nlet inline track props = voidEl \"track\" props\r\nlet inline wbr props = voidEl \"wbr\" props\r\n\r\n// SVG elements\r\nlet inline svg props children = svgEl \"svg\" props children\r\nlet inline circle props children = svgEl \"circle\" props children\r\nlet inline clipPath props children = svgEl \"clipPath\" props children\r\nlet inline defs props children = svgEl \"defs\" props children\r\nlet inline ellipse props children = svgEl \"ellipse\" props children\r\nlet inline g props children = svgEl \"g\" props children\r\nlet inline image props children = svgEl \"image\" props children\r\nlet inline line props children = svgEl \"line\" props children\r\nlet inline linearGradient props children = svgEl \"linearGradient\" props children\r\nlet inline mask props children = svgEl \"mask\" props children\r\nlet inline path props children = svgEl \"path\" props children\r\nlet inline pattern props children = svgEl \"pattern\" props children\r\nlet inline polygon props children = svgEl \"polygon\" props children\r\nlet inline polyline props children = svgEl \"polyline\" props children\r\nlet inline radialGradient props children = svgEl \"radialGradient\" props children\r\nlet inline rect props children = svgEl \"rect\" props children\r\nlet inline stop props children = svgEl \"stop\" props children\r\nlet inline text props children = svgEl \"text\" props children\r\nlet inline tspan props children = svgEl \"tspan\" props children\r\n","module rec Fable.React.Props\r\n\r\nopen System\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Browser.Types\r\n\r\n#if !FABLE_COMPILER\r\nopen FSharp.Reflection\r\n#endif\r\n\r\n/// Helper to convert Fable StringEnum to string, compatible with .NET\r\nlet stringEnum (case: obj): string =\r\n#if FABLE_COMPILER\r\n    string case\r\n#else\r\n    let (caseInfo, _args) = FSharpValue.GetUnionFields(case, case.GetType())\r\n    caseInfo.GetCustomAttributes()\r\n    |> Seq.tryPick (function\r\n                    | :? CompiledNameAttribute as att -> Some att.CompiledName\r\n                    | _ -> None)\r\n    |> Option.defaultWith (fun () ->\r\n        let name = caseInfo.Name\r\n        Char.ToLower(name.[0]).ToString() + name.Substring(1))\r\n#endif\r\n\r\ntype IProp =\r\n    interface end\r\n\r\ntype IHTMLProp =\r\n    inherit IProp\r\n\r\ntype IFragmentProp =\r\n    inherit IProp\r\n\r\ntype FragmentProp =\r\n    | Key of string\r\n    interface IFragmentProp\r\n\r\ntype Prop =\r\n    | Key of string\r\n    | Ref of (Element->unit)\r\n    /// To be used in combination with `useRef` hook\r\n    | [<System.Obsolete(\"Use RefValue\")>] [<CompiledName(\"ref\")>] RefHook of IRefHook<Element option>\r\n    | [<CompiledName(\"ref\")>] RefValue of IRefValue<Element option>\r\n    interface IHTMLProp\r\n\r\ntype DangerousHtml = {\r\n    __html: string\r\n}\r\n\r\ntype DOMAttr =\r\n    | DangerouslySetInnerHTML of DangerousHtml\r\n    | OnCut of (ClipboardEvent -> unit)\r\n    | OnPaste of (ClipboardEvent -> unit)\r\n    | OnCompositionEnd of (CompositionEvent -> unit)\r\n    | OnCompositionStart of (CompositionEvent -> unit)\r\n    | OnCopy of (ClipboardEvent -> unit)\r\n    | OnCompositionUpdate of (CompositionEvent -> unit)\r\n    | OnFocus of (FocusEvent -> unit)\r\n    | OnBlur of (FocusEvent -> unit)\r\n    | OnChange of (Event -> unit)\r\n    | OnInput of (Event -> unit)\r\n    | OnSubmit of (Event -> unit)\r\n    | OnReset of (Event -> unit)\r\n    | OnLoad of (Event -> unit)\r\n    | OnError of (Event -> unit)\r\n    | OnKeyDown of (KeyboardEvent -> unit)\r\n    | OnKeyPress of (KeyboardEvent -> unit)\r\n    | OnKeyUp of (KeyboardEvent -> unit)\r\n    | OnAbort of (Event -> unit)\r\n    | OnCanPlay of (Event -> unit)\r\n    | OnCanPlayThrough of (Event -> unit)\r\n    | OnDurationChange of (Event -> unit)\r\n    | OnEmptied of (Event -> unit)\r\n    | OnEncrypted of (Event -> unit)\r\n    | OnEnded of (Event -> unit)\r\n    | OnLoadedData of (Event -> unit)\r\n    | OnLoadedMetadata of (Event -> unit)\r\n    | OnLoadStart of (Event -> unit)\r\n    | OnPause of (Event -> unit)\r\n    | OnPlay of (Event -> unit)\r\n    | OnPlaying of (Event -> unit)\r\n    | OnProgress of (Event -> unit)\r\n    | OnRateChange of (Event -> unit)\r\n    | OnSeeked of (Event -> unit)\r\n    | OnSeeking of (Event -> unit)\r\n    | OnStalled of (Event -> unit)\r\n    | OnSuspend of (Event -> unit)\r\n    | OnTimeUpdate of (Event -> unit)\r\n    | OnVolumeChange of (Event -> unit)\r\n    | OnWaiting of (Event -> unit)\r\n    | OnClick of (MouseEvent -> unit)\r\n    | OnContextMenu of (MouseEvent -> unit)\r\n    | OnDoubleClick of (MouseEvent -> unit)\r\n    | OnDrag of (DragEvent -> unit)\r\n    | OnDragEnd of (DragEvent -> unit)\r\n    | OnDragEnter of (DragEvent -> unit)\r\n    | OnDragExit of (DragEvent -> unit)\r\n    | OnDragLeave of (DragEvent -> unit)\r\n    | OnDragOver of (DragEvent -> unit)\r\n    | OnDragStart of (DragEvent -> unit)\r\n    | OnDrop of (DragEvent -> unit)\r\n    | OnMouseDown of (MouseEvent -> unit)\r\n    | OnMouseEnter of (MouseEvent -> unit)\r\n    | OnMouseLeave of (MouseEvent -> unit)\r\n    | OnMouseMove of (MouseEvent -> unit)\r\n    | OnMouseOut of (MouseEvent -> unit)\r\n    | OnMouseOver of (MouseEvent -> unit)\r\n    | OnMouseUp of (MouseEvent -> unit)\r\n    | OnSelect of (Event -> unit)\r\n    | OnTouchCancel of (TouchEvent -> unit)\r\n    | OnTouchEnd of (TouchEvent -> unit)\r\n    | OnTouchMove of (TouchEvent -> unit)\r\n    | OnTouchStart of (TouchEvent -> unit)\r\n    | OnScroll of (UIEvent -> unit)\r\n    | OnWheel of (WheelEvent -> unit)\r\n    | OnAnimationStart of (AnimationEvent -> unit)\r\n    | OnAnimationEnd of (AnimationEvent -> unit)\r\n    | OnAnimationIteration of (AnimationEvent -> unit)\r\n    | OnTransitionEnd of (TransitionEvent -> unit)\r\n    | [<Erase>] Custom of string * obj\r\n    interface IHTMLProp\r\n\r\ntype SVGAttr =\r\n    | ClipPath of string\r\n    | Cx of obj\r\n    | Cy of obj\r\n    | D of string\r\n    | Dx of obj\r\n    | Dy of obj\r\n    | Fill of string\r\n    | FillOpacity of obj\r\n    | FontFamily of string\r\n    | FontSize of obj\r\n    | Fx of obj\r\n    | Fy of obj\r\n    | GradientTransform of string\r\n    | GradientUnits of string\r\n    | Height of obj\r\n    | MarkerEnd of string\r\n    | MarkerMid of string\r\n    | MarkerStart of string\r\n    | Offset of obj\r\n    | Opacity of obj\r\n    | PatternContentUnits of string\r\n    | PatternUnits of string\r\n    | Points of string\r\n    | PreserveAspectRatio of string\r\n    | R of obj\r\n    | Rx of obj\r\n    | Ry of obj\r\n    | SpreadMethod of string\r\n    | StopColor of string\r\n    | StopOpacity of obj\r\n    | Stroke of string\r\n    | StrokeDasharray of string\r\n    | StrokeDashoffset of string\r\n    | StrokeLinecap of string\r\n    | StrokeMiterlimit of string\r\n    | StrokeOpacity of obj\r\n    | StrokeWidth of obj\r\n    | TextAnchor of string\r\n    | Transform of string\r\n    | Version of string\r\n    | ViewBox of string\r\n    | Width of obj\r\n    | X1 of obj\r\n    | X2 of obj\r\n    | X of obj\r\n    | XlinkActuate of string\r\n    | XlinkArcrole of string\r\n    | XlinkHref of string\r\n    | XlinkRole of string\r\n    | XlinkShow of string\r\n    | XlinkTitle of string\r\n    | XlinkType of string\r\n    | XmlBase of string\r\n    | XmlLang of string\r\n    | XmlSpace of string\r\n    | Y1 of obj\r\n    | Y2 of obj\r\n    | Y of obj\r\n    /// If you are searching for a way to provide a value not supported by this DSL then use something like: CSSProp.Custom (\"align-content\", \"center\")\r\n    | [<Erase>] Custom of string * obj\r\n    interface IProp\r\n\r\ntype HTMLAttr =\r\n    | DefaultChecked of bool\r\n    | DefaultValue of obj\r\n    | Accept of string\r\n    | AcceptCharset of string\r\n    | AccessKey of string\r\n    | Action of string\r\n    | AllowFullScreen of bool\r\n    | AllowTransparency of bool\r\n    | Alt of string\r\n    | [<CompiledName(\"aria-atomic\")>] AriaAtomic of bool\r\n    | [<CompiledName(\"aria-busy\")>] AriaBusy of bool\r\n    | [<CompiledName(\"aria-checked\")>] AriaChecked of bool\r\n    | [<CompiledName(\"aria-colcount\")>] AriaColcount of int\r\n    | [<CompiledName(\"aria-colindex\")>] AriaColindex of int\r\n    | [<CompiledName(\"aria-colspan\")>] AriaColspan of int\r\n    | [<CompiledName(\"aria-controls\")>] AriaControls of string\r\n    | [<CompiledName(\"aria-current\")>] AriaCurrent of string\r\n    | [<CompiledName(\"aria-describedby\")>] AriaDescribedBy of string\r\n    | [<CompiledName(\"aria-details\")>] AriaDetails of string\r\n    | [<CompiledName(\"aria-disabled\")>] AriaDisabled of bool\r\n    | [<CompiledName(\"aria-errormessage\")>] AriaErrormessage of string\r\n    | [<CompiledName(\"aria-expanded\")>] AriaExpanded of bool\r\n    | [<CompiledName(\"aria-flowto\")>] AriaFlowto of string\r\n    | [<CompiledName(\"aria-haspopup\")>] AriaHasPopup of bool\r\n    | [<CompiledName(\"aria-hidden\")>] AriaHidden of bool\r\n    | [<CompiledName(\"aria-invalid\")>] AriaInvalid of string\r\n    | [<CompiledName(\"aria-keyshortcuts\")>] AriaKeyshortcuts of string\r\n    | [<CompiledName(\"aria-label\")>] AriaLabel of string\r\n    | [<CompiledName(\"aria-labelledby\")>] AriaLabelledby of string\r\n    | [<CompiledName(\"aria-level\")>] AriaLevel of int\r\n    | [<CompiledName(\"aria-live\")>] AriaLive of string\r\n    | [<CompiledName(\"aria-modal\")>] AriaModal of bool\r\n    | [<CompiledName(\"aria-multiline\")>] AriaMultiline of bool\r\n    | [<CompiledName(\"aria-multiselectable\")>] AriaMultiselectable of bool\r\n    | [<CompiledName(\"aria-orientation\")>] AriaOrientation of string\r\n    | [<CompiledName(\"aria-owns\")>] AriaOwns of string\r\n    | [<CompiledName(\"aria-placeholder\")>] AriaPlaceholder of string\r\n    | [<CompiledName(\"aria-posinset\")>] AriaPosinset of int\r\n    | [<CompiledName(\"aria-pressed\")>] AriaPressed of bool\r\n    | [<CompiledName(\"aria-readonly\")>] AriaReadonly of bool\r\n    | [<CompiledName(\"aria-relevant\")>] AriaRelevant of string\r\n    | [<CompiledName(\"aria-required\")>] AriaRequired of bool\r\n    | [<CompiledName(\"aria-roledescription\")>] AriaRoledescription of string\r\n    | [<CompiledName(\"aria-rowcount\")>] AriaRowcount of int\r\n    | [<CompiledName(\"aria-rowindex\")>] AriaRowindex of int\r\n    | [<CompiledName(\"aria-rowspan\")>] AriaRowspan of int\r\n    | [<CompiledName(\"aria-selected\")>] AriaSelected of bool\r\n    | [<CompiledName(\"aria-setsize\")>] AriaSetsize of int\r\n    | [<CompiledName(\"aria-sort\")>] AriaSort of string\r\n    | [<CompiledName(\"aria-valuemax\")>] AriaValuemax of float\r\n    | [<CompiledName(\"aria-valuemin\")>] AriaValuemin of float\r\n    | [<CompiledName(\"aria-valuenow\")>] AriaValuenow of float\r\n    | [<CompiledName(\"aria-valuetext\")>] AriaValuetext of string\r\n    | Async of bool\r\n    | AutoComplete of string\r\n    | AutoFocus of bool\r\n    | AutoPlay of bool\r\n    | Capture of bool\r\n    | CellPadding of obj\r\n    | CellSpacing of obj\r\n    | CharSet of string\r\n    | Challenge of string\r\n    | Checked of bool\r\n    | ClassID of string\r\n    | ClassName of string\r\n    /// Alias of ClassName\r\n    | [<CompiledName(\"className\")>] Class of string\r\n    | Cols of int\r\n    | ColSpan of int\r\n    | Content of string\r\n    | ContentEditable of bool\r\n    | ContextMenu of string\r\n    | Controls of bool\r\n    | Coords of string\r\n    | CrossOrigin of string\r\n    // | Data of string\r\n    | [<CompiledName(\"data-toggle\")>] DataToggle of string\r\n    | DateTime of string\r\n    | Default of bool\r\n    | Defer of bool\r\n    | Dir of string\r\n    | Disabled of bool\r\n    | Download of obj\r\n    | Draggable of bool\r\n    | EncType of string\r\n    | Form of string\r\n    | FormAction of string\r\n    | FormEncType of string\r\n    | FormMethod of string\r\n    | FormNoValidate of bool\r\n    | FormTarget of string\r\n    | FrameBorder of obj\r\n    | Headers of string\r\n    | Height of obj\r\n    | Hidden of bool\r\n    | High of float\r\n    | Href of string\r\n    | HrefLang of string\r\n    | HtmlFor of string\r\n    | HttpEquiv of string\r\n    | Icon of string\r\n    | Id of string\r\n    | InputMode of string\r\n    | Integrity of string\r\n    | Is of string\r\n    | KeyParams of string\r\n    | KeyType of string\r\n    | Kind of string\r\n    | Label of string\r\n    | Lang of string\r\n    | List of string\r\n    | Loop of bool\r\n    | Low of float\r\n    | Manifest of string\r\n    | MarginHeight of float\r\n    | MarginWidth of float\r\n    | Max of obj\r\n    | MaxLength of float\r\n    | Media of string\r\n    | MediaGroup of string\r\n    | Method of string\r\n    | Min of obj\r\n    | MinLength of float\r\n    | Multiple of bool\r\n    | Muted of bool\r\n    | Name of string\r\n    | NoValidate of bool\r\n    | Open of bool\r\n    | Optimum of float\r\n    | Pattern of string\r\n    | Placeholder of string\r\n    | Poster of string\r\n    | Preload of string\r\n    | RadioGroup of string\r\n    | ReadOnly of bool\r\n    | Rel of string\r\n    | Required of bool\r\n    | Role of string\r\n    | Rows of int\r\n    | RowSpan of int\r\n    | Sandbox of string\r\n    | Scope of string\r\n    | Scoped of bool\r\n    | Scrolling of string\r\n    | Seamless of bool\r\n    | Selected of bool\r\n    | Shape of string\r\n    | Size of float\r\n    | Sizes of string\r\n    | Span of float\r\n    | SpellCheck of bool\r\n    | Src of string\r\n    | SrcDoc of string\r\n    | SrcLang of string\r\n    | SrcSet of string\r\n    | Start of float\r\n    | Step of obj\r\n    | Summary of string\r\n    | TabIndex of int\r\n    | Target of string\r\n    | Title of string\r\n    | Type of string\r\n    | UseMap of string\r\n    | Value of obj\r\n    /// Compiles to same prop as `Value`. Intended for `select` elements\r\n    /// with `Multiple` prop set to `true`.\r\n    | [<CompiledName(\"value\")>] ValueMultiple of string[]\r\n    | Width of obj\r\n    | Wmode of string\r\n    | Wrap of string\r\n    | About of string\r\n    | Datatype of string\r\n    | Inlist of obj\r\n    | Prefix of string\r\n    | Property of string\r\n    | Resource of string\r\n    | Typeof of string\r\n    | Vocab of string\r\n    | AutoCapitalize of string\r\n    | AutoCorrect of string\r\n    | AutoSave of string\r\n    // | Color of string // Conflicts with CSSProp, shouldn't be used in HTML5\r\n    | ItemProp of string\r\n    | ItemScope of bool\r\n    | ItemType of string\r\n    | ItemID of string\r\n    | ItemRef of string\r\n    | Results of float\r\n    | Security of string\r\n    | Unselectable of bool\r\n    | [<Erase>] Custom of string * obj\r\n#if !FABLE_COMPILER\r\n    | Style of CSSProp list\r\n    | Data of string * obj\r\n#endif\r\n    interface IHTMLProp\r\n\r\n#if FABLE_COMPILER\r\nlet inline Style (css: CSSProp list): HTMLAttr =\r\n    !!(\"style\", keyValueList CaseRules.LowerFirst css)\r\n\r\nlet inline Data (key: string, value: obj): HTMLAttr =\r\n    !!(\"data-\" + key, value)\r\n#endif\r\n\r\n[<StringEnum; RequireQualifiedAccess>]\r\n/// Specifies the display behavior (the type of rendering box) of an element.\r\ntype DisplayOptions =\r\n    /// The element is completely removed\r\n    | None\r\n    /// Sets this property to its default value. Read more about [CSS Initial value](https://www.w3schools.com/CSSref/css_initial.asp)\r\n    | Initial\r\n    /// Inherits this property from its parent element. Read about [CSS Inherit](https://www.w3schools.com/CSSref/css_inherit.asp)\r\n    | Inherit\r\n    /// Displays an element as an inline element (like `<span>`). Any height and width properties will have no effect.\r\n    | Inline\r\n    /// Displays an element as a block element (like `<p>`). It starts on a new line, and takes up the whole width.\r\n    | Block\r\n    /// Makes the container disappear, making the child elements children of the element the next level up in the DOM.\r\n    | Contents\r\n    /// Displays an element as a block-level flex container.\r\n    | Flex\r\n    /// Displays an element as a block-level grid container.\r\n    | Grid\r\n    /// Let the element behave like a `<table>` element\r\n    | Table\r\n    /// Displays an element as an inline-level block container. The element itself is formatted as an inline element, but you can apply height and width values\r\n    | [<CompiledName \"inline-block\">] InlineBlock\r\n    /// Displays an element as an inline-level flex container.\r\n    | [<CompiledName \"inline-flex\">] InlineFlex\r\n    /// Displays an element as an inline-level grid container.\r\n    | [<CompiledName \"inline-grid\">] InlineGrid\r\n    /// The element is displayed as an inline-level table.\r\n    | [<CompiledName \"inline-table\">] InlineTable\r\n    /// Let the element behave like a `<li>` element.\r\n    | [<CompiledName \"list-item\">] ListItem\r\n    /// Let the element behave like a `<caption>` element\r\n    | [<CompiledName \"table-caption\">] TableCaption\r\n    /// Let the element behave like a `<colgroup>` element.\r\n    | [<CompiledName \"table-column-group\">] TableColumnGroup\r\n    /// Let the element behave like a `<thead>` element.\r\n    | [<CompiledName \"table-header-group\">] TableHeaderGroup\r\n    /// Let the element behave like a `<tfoot>` element.\r\n    | [<CompiledName \"table-footer-group\">] TableFooterGroup\r\n    /// Let the element behave like a `<tbody>` element.\r\n    | [<CompiledName \"table-row-group\">] TableRowGroup\r\n    /// Let the element behave like a `<td>` element.\r\n    | [<CompiledName \"table-cell\">] TableCell\r\n    /// Let the element behave like a `<col>` element.\r\n    | [<CompiledName \"table-column\">] TableColumn\r\n    /// Let the element behave like a `<tr>` element.\r\n    | [<CompiledName \"table-row\">] TableRow\r\n\r\n[<StringEnum; RequireQualifiedAccess>]\r\n/// Modifies the behavior of the [flex-wrap](https://www.w3schools.com/CSSref/css3_pr_flex-wrap.asp) property. It is similar to [align-items](https://www.w3schools.com/CSSref/css3_pr_align-items.asp), but instead of aligning flex items, it aligns flex lines.\r\ntype AlignContentOptions =\r\n    /// Default value. Lines stretch to take up the remaining space.\r\n    | Stretch\r\n    /// Lines are packed toward the center of the flex container.\r\n    | Center\r\n    /// /// Sets this property to its default value. Read more about [CSS Initial value](https://www.w3schools.com/CSSref/css_initial.asp)\r\n    | Initial\r\n    /// Inherits this property from its parent element. Read about [CSS Inherit](https://www.w3schools.com/CSSref/css_inherit.asp)\r\n    | Inherit\r\n    /// Lines are packed toward the start of the flex container.\r\n    | [<CompiledName \"flex-start\">] FlexStart\r\n    /// Lines are packed toward the end of the flex container.\r\n    | [<CompiledName \"flex-end\">] FlexEnd\r\n    /// Lines are evenly distributed in the flex container.\r\n    | [<CompiledName \"space-between\">] SpaceBetween\r\n    /// Lines are evenly distributed in the flex container, with half-size spaces on either end.\r\n    | [<CompiledName \"space-around\">] SpaceAround\r\n\r\n[<StringEnum; RequireQualifiedAccess>]\r\n/// Specifies the default alignment for items inside the flexible container.\r\ntype AlignItemsOptions =\r\n    /// The effect of this keyword is dependent of the layout mode we are in. [Read more](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items#Values)\r\n    | Normal\r\n    /// Items are positioned at the baseline of the container\r\n    | Baseline\r\n    /// Default. Items are stretched to fit the container.\r\n    | Stretch\r\n    /// Items are positioned at the center of the container.\r\n    | Center\r\n    /// Sets this property to its default value. Read more about [CSS Initial value](https://www.w3schools.com/CSSref/css_initial.asp)\r\n    | Initial\r\n    /// Inherits this property from its parent element. Read about [CSS Inherit](https://www.w3schools.com/CSSref/css_inherit.asp)\r\n    | Inherit\r\n    /// Items are positioned at the beginning of the container.\r\n    | [<CompiledName \"flex-start\">] FlexStart\r\n    /// Items are positioned at the end of the container.\r\n    | [<CompiledName \"flex-end\">] FlexEnd\r\n\r\n[<StringEnum; RequireQualifiedAccess>]\r\n/// Specifies the default alignment for items inside the flexible container.\r\ntype AlignSelfOptions =\r\n    /// Default. The element inherits its parent container's align-items property, or \"stretch\" if it has no parent container.\r\n    | Auto\r\n    /// The element is positioned at the baseline of the container.\r\n    | Baseline\r\n    /// The element is positioned to fit the container.\r\n    | Stretch\r\n    /// The element is positioned at the center of the container.\r\n    | Center\r\n    /// Sets this property to its default value. Read more about [CSS Initial value](https://www.w3schools.com/CSSref/css_initial.asp)\r\n    | Initial\r\n    /// Inherits this property from its parent element. Read about [CSS Inherit](https://www.w3schools.com/CSSref/css_inherit.asp)\r\n    | Inherit\r\n    /// The element is positioned at the beginning of the container.\r\n    | [<CompiledName \"flex-start\">] FlexStart\r\n    /// The element is positioned at the end of the container.\r\n    | [<CompiledName \"flex-end\">] FlexEnd\r\n\r\n[<StringEnum; RequireQualifiedAccess>]\r\n/// Specifies the default alignment for items inside the grid container.\r\ntype JustifySelfOptions =\r\n    /// Default. The element inherits its parent container's justify-items property, or \"stretch\" if it has no parent container.\r\n    | Auto\r\n    /// The element is positioned at the baseline of the cell.\r\n    | Baseline\r\n    /// The element is positioned to fit the cell.\r\n    | Stretch\r\n    /// The element is positioned at the center of the cell.\r\n    | Center\r\n    /// Sets this property to its default value. Read more about [CSS Initial](https://developer.mozilla.org/en-US/docs/Web/CSS/initial)\r\n    | Initial\r\n    /// Inherits this property from its parent element. Read about [CSS Inherit](https://developer.mozilla.org/en-US/docs/Web/CSS/inherit)\r\n    | Inherit\r\n    /// The element is positioned at the beginning of the cell.\r\n    | Start\r\n    /// The element is positioned at the end of the cell.\r\n    | End\r\n    /// The element is positioned at the beginning of the cell.\r\n    | [<CompiledName \"self-start\">] SelfStart\r\n    /// The element is positioned at the end of the cell.\r\n    | [<CompiledName \"self-end\">] SelfEnd\r\n    /// The element is positioned at the left of the cell.\r\n    | Left\r\n    /// The element is positioned at the right of the cell.\r\n    | Right\r\n\r\n[<StringEnum; RequireQualifiedAccess>]\r\ntype TextAlignOptions =\r\n    /// Aligns the text to the left.\r\n    | Left\r\n    /// Aligns the text to the right.\r\n    | Right\r\n    /// Centers the text.\r\n    | Center\r\n    /// Stretches the lines so that each line has equal width (like in newspapers and magazines).\r\n    | Justify\r\n    /// Sets this property to its default value. Read more about [CSS Initial value](https://www.w3schools.com/CSSref/css_initial.asp)\r\n    | Initial\r\n    /// Inherits this property from its parent element. Read about [CSS Inherit](https://www.w3schools.com/CSSref/css_inherit.asp)\r\n    | Inherit\r\n\r\n[<StringEnum; RequireQualifiedAccess>]\r\n/// Specifies the type of positioning method used for an element (static, relative, absolute, fixed, or sticky).\r\ntype PositionOptions =\r\n    /// Default value. Elements render in order, as they appear in the document flow.\r\n    | Static\r\n    /// The element is positioned relative to its first positioned (not static) ancestor element.\r\n    | Absolute\r\n    /// The element is positioned relative to the browser window.\r\n    | Fixed\r\n    /// The element is positioned relative to its normal position, so \"left:20px\" adds 20 pixels to the element's LEFT position.\r\n    | Relative\r\n    /// The element is positioned based on the user's scroll position.\r\n    ///\r\n    /// A sticky element toggles between relative and fixed, depending on the scroll position. It is positioned relative until a given offset position is met in the viewport - then it \"sticks\" in place (like position:fixed).\r\n    | Sticky\r\n    /// Sets this property to its default value. Read more about [CSS Initial value](https://www.w3schools.com/CSSref/css_initial.asp)\r\n    | Initial\r\n    /// Inherits this property from its parent element. Read about [CSS Inherit](https://www.w3schools.com/CSSref/css_inherit.asp)\r\n    | Inherit\r\n\r\n[<StringEnum; RequireQualifiedAccess>]\r\n/// https://drafts.csswg.org/css-overflow-3/#propdef-overflow\r\ntype OverflowOptions =\r\n    /// There is no special handling of overflow, that is, the box’s content is rendered outside the box if positioned there. The box is not a scroll container.\r\n    | Visible\r\n    /// This value indicates that the box’s content is clipped to its padding box and that the UA must not provide any scrolling user interface to view the content outside the clipping region, nor allow scrolling by direct intervention of the user, such as dragging on a touch screen or using the scrolling wheel on a mouse. However, the content must still be scrollable programatically, for example using the mechanisms defined in  [CSSOM-VIEW], and the box is therefore still a scroll container.\r\n    | Hidden\r\n    /// Like hidden, this value indicates that the box’s content is clipped to its padding box and that no scrolling user interface should be provided by the UA to view the content outside the clipping region. In addition, unlike overflow: hidden which still allows programmatic scrolling, overflow: clip forbids scrolling entirely, through any mechanism, and therefore the box is not a scroll container.\r\n    | Clip\r\n    /// This value indicates that the content is clipped to the padding box, but can be scrolled into view (and therefore the box is a scroll container). Furthermore, if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism should be displayed whether or not any of its content is clipped. This avoids any problem with scrollbars appearing and disappearing in a dynamic environment. When the target medium is print, overflowing content may be printed; it is not defined where it may be printed.\r\n    | Scroll\r\n    /// Like scroll when the box has scrollable overflow; like hidden otherwise. Thus, if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism will only be displayed if there is overflow.\r\n    | Auto\r\n\r\n    /// Sets this property to its default value. Read more about [CSS Initial value](https://www.w3schools.com/CSSref/css_initial.asp)\r\n    | Initial\r\n    /// Inherits this property from its parent element. Read about [CSS Inherit](https://www.w3schools.com/CSSref/css_inherit.asp)\r\n    | Inherit\r\n    /// If the cascaded value of a property is the unset keyword, then if it is an inherited property, this is treated as inherit, and if it is not, this is treated as initial. This keyword effectively erases all declared values occurring earlier in the cascade, correctly inheriting or not as appropriate for the property (or all longhands of a shorthand).\r\n    | Unset\r\n\r\n[<StringEnum; RequireQualifiedAccess>]\r\n/// https://drafts.csswg.org/css-text-3/#propdef-white-space\r\ntype WhiteSpaceOptions = \r\n    /// This value directs user agents to collapse sequences of white space into a single character (or in some cases, no character). Lines may wrap at allowed soft wrap opportunities, as determined by the line-breaking rules in effect, in order to minimize inline-axis overflow.\r\n    | Normal\r\n    /// This value prevents user agents from collapsing sequences of white space. Segment breaks such as line feeds are preserved as forced line breaks. Lines only break at forced line breaks; content that does not fit within the block container overflows it.\r\n    | Pre\r\n    /// Like normal, this value collapses white space; but like pre, it does not allow wrapping.\r\n    | Nowrap\r\n    /// Like pre, this value preserves white space; but like normal, it allows wrapping.\r\n    | [<CompiledName \"pre-wrap\">] PreWrap\r\n    /// The behavior is identical to that of pre-wrap, except that: 1. Any sequence of preserved white space always takes up space, including at the end of the line. 2. A line breaking opportunity exists after every preserved white space character, including between white space characters.\r\n    | BreakSpaces\r\n    /// Like normal, this value collapses consecutive spaces and allows wrapping, but preserves segment breaks in the source as forced line breaks.\r\n    | [<CompiledName \"pre-line\">] PreLine\r\n\r\n    /// Sets this property to its default value. Read more about [CSS Initial value](https://www.w3schools.com/CSSref/css_initial.asp)\r\n    | Initial\r\n    /// Inherits this property from its parent element. Read about [CSS Inherit](https://www.w3schools.com/CSSref/css_inherit.asp)\r\n    | Inherit\r\n    /// If the cascaded value of a property is the unset keyword, then if it is an inherited property, this is treated as inherit, and if it is not, this is treated as initial. This keyword effectively erases all declared values occurring earlier in the cascade, correctly inheriting or not as appropriate for the property (or all longhands of a shorthand).\r\n    | Unset\r\n\r\n[<StringEnum; RequireQualifiedAccess>]\r\n/// https://drafts.csswg.org/css-ui-3/#box-sizing\r\ntype BoxSizingOptions =\r\n    /// This is the behavior of width and height as specified by CSS2.1. The specified width and height (and respective min/max properties) apply to the width and height respectively of the content box of the element. The padding and border of the element are laid out and drawn outside the specified width and height.\r\n    | [<CompiledName \"content-box\">] ContentBox\r\n    /// Length and percentages values for width and height (and respective min/max properties) on this element determine the border box of the element. That is, any padding or border specified on the element is laid out and drawn inside this specified width and height. The content width and height are calculated by subtracting the border and padding widths of the respective sides from the specified width and height properties. As the content width and height cannot be negative ([CSS2], section 10.2), this computation is floored at 0. Used values, as exposed for instance through getComputedStyle(), also refer to the border box.\r\n    | [<CompiledName \"border-box\">] BorderBox\r\n\r\n    /// Sets this property to its default value. Read more about [CSS Initial value](https://www.w3schools.com/CSSref/css_initial.asp)\r\n    | Initial\r\n    /// Inherits this property from its parent element. Read about [CSS Inherit](https://www.w3schools.com/CSSref/css_inherit.asp)\r\n    | Inherit\r\n    /// If the cascaded value of a property is the unset keyword, then if it is an inherited property, this is treated as inherit, and if it is not, this is treated as initial. This keyword effectively erases all declared values occurring earlier in the cascade, correctly inheriting or not as appropriate for the property (or all longhands of a shorthand).\r\n    | Unset\r\n\r\n[<StringEnum; RequireQualifiedAccess>]\r\n/// https://drafts.csswg.org/css-images-3/#the-image-rendering\r\ntype ImageRenderingOptions =\r\n    /// The scaling algorithm is UA dependent.\r\n    | Auto\r\n    /// The image should be scaled with an algorithm that maximizes the appearance of the image. In particular, scaling algorithms that \"smooth\" colors are acceptable, such as bilinear interpolation. This is intended for images such as photos.\r\n    | Smooth\r\n    /// Identical to smooth, but with a preference for higher-quality scaling. If system resources are constrained, images with high-quality should be prioritized over those with any other value, when considering which images to degrade the quality of and to what degree.\r\n    | HighQuality\r\n    /// The image must be scaled with an algorithm that preserves contrast and edges in the image, and which does not smooth colors or introduce blur to the image in the process. This is intended for images such as pixel art or line drawings.\r\n    | CrispEdges\r\n    /// The image must be scaled with the \"nearest neighbor\" or similar algorithm, to preserve a \"pixelated\" look as the image changes in size.\r\n    | Pixelated\r\n    \r\n    /// Sets this property to its default value. Read more about [CSS Initial value](https://www.w3schools.com/CSSref/css_initial.asp)\r\n    | Initial\r\n    /// Inherits this property from its parent element. Read about [CSS Inherit](https://www.w3schools.com/CSSref/css_inherit.asp)\r\n    | Inherit\r\n    /// If the cascaded value of a property is the unset keyword, then if it is an inherited property, this is treated as inherit, and if it is not, this is treated as initial. This keyword effectively erases all declared values occurring earlier in the cascade, correctly inheriting or not as appropriate for the property (or all longhands of a shorthand).\r\n    | Unset\r\n\r\n[<StringEnum; RequireQualifiedAccess>]\r\n/// https://www.w3.org/TR/CSS2/visuren.html#float-position\r\ntype FloatOptions =\r\n    /// The element generates a block box that is floated to the left. Content flows on the right side of the box, starting at the top (subject to the 'clear' property).\r\n    | Left\r\n    /// Similar to 'left', except the box is floated to the right, and content flows on the left side of the box, starting at the top.\r\n    | Right\r\n    /// The box is not floated.\r\n    | None\r\n    \r\n    /// Sets this property to its default value. Read more about [CSS Initial value](https://www.w3schools.com/CSSref/css_initial.asp)\r\n    | Initial\r\n    /// Inherits this property from its parent element. Read about [CSS Inherit](https://www.w3schools.com/CSSref/css_inherit.asp)\r\n    | Inherit\r\n    /// If the cascaded value of a property is the unset keyword, then if it is an inherited property, this is treated as inherit, and if it is not, this is treated as initial. This keyword effectively erases all declared values occurring earlier in the cascade, correctly inheriting or not as appropriate for the property (or all longhands of a shorthand).\r\n    | Unset\r\n\r\n[<StringEnum; RequireQualifiedAccess>]\r\n/// https://www.w3.org/TR/css-inline-3/#propdef-alignment-baseline\r\ntype AlignmentBaselineOptions =\r\n    /// Use the dominant baseline choice of the parent. Match the box’s corresponding baseline to that of its parent.\r\n    | Baseline\r\n    /// Match the bottom of the box to the bottom of the parent’s content area.\r\n    | TextBottom\r\n    /// Match the box’s alphabetic baseline to that of its parent.\r\n    | Alphabetic\r\n    /// Match the box’s ideographic character face under-side baseline to that of its parent.\r\n    | Ideographic\r\n    /// Align the vertical midpoint of the box with the baseline of the parent box plus half the x-height of the parent.\r\n    | Middle\r\n    /// Match the box’s central baseline to the central baseline of its parent.\r\n    | Central\r\n    /// Match the box’s mathematical baseline to that of its parent.\r\n    | Mathematical\r\n    /// Match the top of the box to the top of the parent’s content area.\r\n    | TextTop\r\n    /// Align the top of the aligned subtree with the top of the line box.\r\n    | Top\r\n    /// Align the center of the aligned subtree with the center of the line box.\r\n    | Center\r\n    /// Align the bottom of the aligned subtree with the bottom of the line box.\r\n    | Bottom\r\n    \r\n    /// Sets this property to its default value. Read more about [CSS Initial value](https://www.w3schools.com/CSSref/css_initial.asp)\r\n    | Initial\r\n    /// Inherits this property from its parent element. Read about [CSS Inherit](https://www.w3schools.com/CSSref/css_inherit.asp)\r\n    | Inherit\r\n    /// If the cascaded value of a property is the unset keyword, then if it is an inherited property, this is treated as inherit, and if it is not, this is treated as initial. This keyword effectively erases all declared values occurring earlier in the cascade, correctly inheriting or not as appropriate for the property (or all longhands of a shorthand).\r\n    | Unset\r\n\r\n[<StringEnum; RequireQualifiedAccess>]\r\n/// https://www.w3.org/TR/css3-values/#common-keywords\r\ntype AllOptions =\r\n    /// Sets this property to its default value. Read more about [CSS Initial value](https://www.w3schools.com/CSSref/css_initial.asp)\r\n    | Initial\r\n    /// Inherits this property from its parent element. Read about [CSS Inherit](https://www.w3schools.com/CSSref/css_inherit.asp)\r\n    | Inherit\r\n    /// If the cascaded value of a property is the unset keyword, then if it is an inherited property, this is treated as inherit, and if it is not, this is treated as initial. This keyword effectively erases all declared values occurring earlier in the cascade, correctly inheriting or not as appropriate for the property (or all longhands of a shorthand).\r\n    | Unset\r\n    \r\n[<StringEnum; RequireQualifiedAccess>]\r\n/// https://drafts.csswg.org/css-animations/#animation-direction\r\ntype SingleAnimationDirection =\r\n    /// All iterations of the animation are played as specified.\r\n    | Normal\r\n    /// All iterations of the animation are played in the reverse direction from the way they were specified.\r\n    | Reverse\r\n    /// The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction.\r\n    | Alternate\r\n    /// The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction.\r\n    | [<CompiledName \"alternate-reverse\">] AlternateReverse\r\n    \r\n    /// Sets this property to its default value. Read more about [CSS Initial value](https://www.w3schools.com/CSSref/css_initial.asp)\r\n    | Initial\r\n    /// Inherits this property from its parent element. Read about [CSS Inherit](https://www.w3schools.com/CSSref/css_inherit.asp)\r\n    | Inherit\r\n    /// If the cascaded value of a property is the unset keyword, then if it is an inherited property, this is treated as inherit, and if it is not, this is treated as initial. This keyword effectively erases all declared values occurring earlier in the cascade, correctly inheriting or not as appropriate for the property (or all longhands of a shorthand).\r\n    | Unset\r\n\r\n[<StringEnum; RequireQualifiedAccess>]\r\n/// https://drafts.csswg.org/css-animations/#animation-fill-mode\r\ntype SingleAnimationFillMode =\r\n    /// The animation has no effect when it is applied but not executing.\r\n    | None\r\n    /// After the animation ends (as determined by its animation-iteration-count), the animation will apply the property values for the time the animation ended. When animation-iteration-count is an integer greater than zero, the values applied will be those for the end of the last completed iteration of the animation (rather than the values for the start of the iteration that would be next). When animation-iteration-count is zero, the values applied will be those that would start the first iteration (just as when animation-fill-mode is backwards).\r\n    | Forwards\r\n    /// During the period defined by animation-delay, the animation will apply the property values defined in the keyframe that will start the first iteration of the animation. These are either the values of the from keyframe (when animation-direction is normal or alternate) or those of the to keyframe (when animation-direction is reverse or alternate-reverse).\r\n    | Backwards\r\n    /// The effects of both forwards and backwards fill apply.\r\n    | Both\r\n    \r\n    /// Sets this property to its default value. Read more about [CSS Initial value](https://www.w3schools.com/CSSref/css_initial.asp)\r\n    | Initial\r\n    /// Inherits this property from its parent element. Read about [CSS Inherit](https://www.w3schools.com/CSSref/css_inherit.asp)\r\n    | Inherit\r\n    /// If the cascaded value of a property is the unset keyword, then if it is an inherited property, this is treated as inherit, and if it is not, this is treated as initial. This keyword effectively erases all declared values occurring earlier in the cascade, correctly inheriting or not as appropriate for the property (or all longhands of a shorthand).\r\n    | Unset\r\n    \r\n[<StringEnum; RequireQualifiedAccess>]\r\n/// https://drafts.csswg.org/css-ui-4/#appearance-switching\r\ntype AppearanceOptions =\r\n    /// The element is rendered following the usual rules of CSS. Replaced elements other than controls are not affected by this, and remain replaced elements. Controls are not made to look like native controls of the host operating system. See § 7.1.1 Effects of appearance on Decorative Aspects of Elements and § 7.1.2 Effects of appearance on Semantic Aspects of Elements for details.\r\n    | None\r\n    /// UAs may render controls using native controls of the host operating system or with a look and feel not otherwise expressible in CSS. Elements other than controls must be rendered as if none had been specified.\r\n    | Auto\r\n    /// The element is rendered with the look and feel of a push button, similar to the appearance: auto rendering of the [HTML] button element. UAs must treat this value as auto on input elements, textarea elements, list box select elements, meter elements, and progress elements.\r\n    | Button\r\n    /// For input elements where the type attribute is in the Search state, the element is rendered as a \"normal\" text entry widget, similar to an input element where the type attribute is in the Text state. For all other elements, this value has the same effect as auto.\r\n    | Textfield\r\n    /// For drop-down box select elements, the element is rendered as a drop-down box, including a \"drop-down button\", but not necessarily using a native control of the host operating system. For such elements, CSS properties such as color, background-color, and border (that can be disregarded for auto) should not be disregarded. For all other elements, this value has the same effect as auto.\r\n    | [<CompiledName(\"menulist-button\")>] MenulistButton\r\n    /// These values exist for compatibility of content developed for earlier non standard versions of this property. They all have the same effect as auto.\r\n    | [<CompiledName(\"compat-auto\")>] CompatAuto\r\n    \r\n    /// Sets this property to its default value. Read more about [CSS Initial value](https://www.w3schools.com/CSSref/css_initial.asp)\r\n    | Initial\r\n    /// Inherits this property from its parent element. Read about [CSS Inherit](https://www.w3schools.com/CSSref/css_inherit.asp)\r\n    | Inherit\r\n    /// If the cascaded value of a property is the unset keyword, then if it is an inherited property, this is treated as inherit, and if it is not, this is treated as initial. This keyword effectively erases all declared values occurring earlier in the cascade, correctly inheriting or not as appropriate for the property (or all longhands of a shorthand).\r\n    | Unset\r\n    \r\n[<StringEnum; RequireQualifiedAccess>]\r\n/// https://drafts.csswg.org/css-transforms-2/#propdef-backface-visibility\r\ntype BackfaceVisibilityOptions =\r\n    | Visible\r\n    | Hidden\r\n    \r\n    /// Sets this property to its default value. Read more about [CSS Initial value](https://www.w3schools.com/CSSref/css_initial.asp)\r\n    | Initial\r\n    /// Inherits this property from its parent element. Read about [CSS Inherit](https://www.w3schools.com/CSSref/css_inherit.asp)\r\n    | Inherit\r\n    /// If the cascaded value of a property is the unset keyword, then if it is an inherited property, this is treated as inherit, and if it is not, this is treated as initial. This keyword effectively erases all declared values occurring earlier in the cascade, correctly inheriting or not as appropriate for the property (or all longhands of a shorthand).\r\n    | Unset\r\n    \r\n[<StringEnum; RequireQualifiedAccess>]\r\n/// https://developer.mozilla.org/en-US/docs/Web/CSS/box-align\r\ntype BoxAlignOptions =\r\n    | Start\r\n    | Center\r\n    | End\r\n    | Baseline\r\n    | Stretch\r\n    \r\n    /// Sets this property to its default value. Read more about [CSS Initial value](https://www.w3schools.com/CSSref/css_initial.asp)\r\n    | Initial\r\n    /// Inherits this property from its parent element. Read about [CSS Inherit](https://www.w3schools.com/CSSref/css_inherit.asp)\r\n    | Inherit\r\n    /// If the cascaded value of a property is the unset keyword, then if it is an inherited property, this is treated as inherit, and if it is not, this is treated as initial. This keyword effectively erases all declared values occurring earlier in the cascade, correctly inheriting or not as appropriate for the property (or all longhands of a shorthand).\r\n    | Unset\r\n    \r\n[<StringEnum; RequireQualifiedAccess>]\r\ntype BoxDecorationBreakOptions =\r\n    /// Each box fragment is independently wrapped with the border, padding, and margin. The border-radius and border-image and box-shadow, if any, are applied to each fragment independently. The background is drawn independently in each fragment of the element. A no-repeat background image will thus be rendered once in each fragment of the element.\r\n    | Clone\r\n    /// The effect is as though the element were rendered with no breaks present, and then sliced by the breaks afterward: no border and no padding are inserted at a break; no box-shadow is drawn at a broken edge; and backgrounds, border-radius, and the border-image are applied to the geometry of the whole box as if it were unbroken.\r\n    | Slice\r\n    \r\n    /// Sets this property to its default value. Read more about [CSS Initial value](https://www.w3schools.com/CSSref/css_initial.asp)\r\n    | Initial\r\n    /// Inherits this property from its parent element. Read about [CSS Inherit](https://www.w3schools.com/CSSref/css_inherit.asp)\r\n    | Inherit\r\n    /// If the cascaded value of a property is the unset keyword, then if it is an inherited property, this is treated as inherit, and if it is not, this is treated as initial. This keyword effectively erases all declared values occurring earlier in the cascade, correctly inheriting or not as appropriate for the property (or all longhands of a shorthand).\r\n    | Unset\r\n\r\n[<StringEnum; RequireQualifiedAccess>]\r\n/// https://developer.mozilla.org/en-US/docs/Web/CSS/box-direction\r\ntype BoxDirectionOptions =\r\n    /// The box lays out its contents from the start (the left or top edge).\r\n    | Normal\r\n    /// The box lays out its contents from the end (the right or bottom edge).\r\n    | Reverse\r\n    \r\n    /// Sets this property to its default value. Read more about [CSS Initial value](https://www.w3schools.com/CSSref/css_initial.asp)\r\n    | Initial\r\n    /// Inherits this property from its parent element. Read about [CSS Inherit](https://www.w3schools.com/CSSref/css_inherit.asp)\r\n    | Inherit\r\n    /// If the cascaded value of a property is the unset keyword, then if it is an inherited property, this is treated as inherit, and if it is not, this is treated as initial. This keyword effectively erases all declared values occurring earlier in the cascade, correctly inheriting or not as appropriate for the property (or all longhands of a shorthand).\r\n    | Unset\r\n\r\n[<StringEnum; RequireQualifiedAccess>]\r\n/// https://drafts.csswg.org/css-break-3/#break-between\r\ntype BreakOptions =\r\n    /// Allows, but does not force, any break (page, column, or region) to be inserted right after the principal box.\r\n    | Auto\r\n    /// Avoids any break (page, column, or region) from being inserted right after the principal box.\r\n    | Avoid\r\n    /// Forces a page break right after the principal box. The type of this break is that of the immediately-containing fragmentation context. If we are inside a multicol container then it would force a column break, inside paged media (but not inside a multicol container) a page break.\r\n    | Always\r\n    /// Forces a page break right after the principal box. Breaking through all possible fragmentation contexts. So a break inside a multicol container, which was inside a page container would force a column and page break.\r\n    | All\r\n    /// Avoids any page break right after the principal box.\r\n    | [<CompiledName(\"avoid-page\")>] AvoidPage\r\n    /// Forces a page break right after the principal box.\r\n    | Page\r\n    /// Forces one or two page breaks right after the principal box, whichever will make the next page into a left page.\r\n    | Left\r\n    /// Forces one or two page breaks right after the principal box, whichever will make the next page into a right page.\r\n    | Right\r\n    /// Forces one or two page breaks right after the principal box, whichever will make the next page into a recto page. (A recto page is a right page in a left-to-right spread or a left page in a right-to-left spread.)\r\n    | Recto\r\n    /// Forces one or two page breaks right after the principal box, whichever will make the next page into a verso page. (A verso page is a left page in a left-to-right spread or a left right in a right-to-left spread.)\r\n    | Verso\r\n    /// Avoids any column break right after the principal box.\r\n    | [<CompiledName(\"avoid-column\")>] AvoidColumn\r\n    /// Forces a column break right after the principal box.\r\n    | Column\r\n    /// Avoids any region break right after the principal box.\r\n    | [<CompiledName(\"avoid-region\")>] AvoidRegion\r\n    /// Forces a region break right after the principal box.\r\n    | Region\r\n    \r\n    /// Sets this property to its default value. Read more about [CSS Initial value](https://www.w3schools.com/CSSref/css_initial.asp)\r\n    | Initial\r\n    /// Inherits this property from its parent element. Read about [CSS Inherit](https://www.w3schools.com/CSSref/css_inherit.asp)\r\n    | Inherit\r\n    /// If the cascaded value of a property is the unset keyword, then if it is an inherited property, this is treated as inherit, and if it is not, this is treated as initial. This keyword effectively erases all declared values occurring earlier in the cascade, correctly inheriting or not as appropriate for the property (or all longhands of a shorthand).\r\n    | Unset\r\n\r\n[<StringEnum; RequireQualifiedAccess>]\r\n/// https://drafts.csswg.org/css-break-3/#break-within\r\ntype BreakInsideOptions =\r\n    /// Impose no additional breaking constraints within the box.\r\n    | Auto\r\n    /// Avoid breaks within the box.\r\n    | Avoid\r\n    /// Avoid a page break within the box.\r\n    | [<CompiledName(\"avoid-page\")>] AvoidPage\r\n    /// Avoid a column break within the box.\r\n    | [<CompiledName(\"avoid-column\")>] AvoidColumn\r\n    /// Avoid a region break within the box.\r\n    | [<CompiledName(\"avoid-region\")>] AvoidRegion\r\n    \r\n    /// Sets this property to its default value. Read more about [CSS Initial value](https://www.w3schools.com/CSSref/css_initial.asp)\r\n    | Initial\r\n    /// Inherits this property from its parent element. Read about [CSS Inherit](https://www.w3schools.com/CSSref/css_inherit.asp)\r\n    | Inherit\r\n    /// If the cascaded value of a property is the unset keyword, then if it is an inherited property, this is treated as inherit, and if it is not, this is treated as initial. This keyword effectively erases all declared values occurring earlier in the cascade, correctly inheriting or not as appropriate for the property (or all longhands of a shorthand).\r\n    | Unset\r\n\r\n[<StringEnum; RequireQualifiedAccess>]\r\n/// https://developer.mozilla.org/en-US/docs/Web/CSS/caption-side#Specifications\r\ntype CaptionSideOptions =\r\n    | Top\r\n    | Bottom\r\n    | [<CompiledName(\"block-start\")>] BlockStart\r\n    | [<CompiledName(\"block-end\")>] BlockEnd\r\n    | [<CompiledName(\"inline-start\")>] InlineStart\r\n    | [<CompiledName(\"inline-end\")>] InlineEnd\r\n    \r\n    /// Sets this property to its default value. Read more about [CSS Initial value](https://www.w3schools.com/CSSref/css_initial.asp)\r\n    | Initial\r\n    /// Inherits this property from its parent element. Read about [CSS Inherit](https://www.w3schools.com/CSSref/css_inherit.asp)\r\n    | Inherit\r\n    /// If the cascaded value of a property is the unset keyword, then if it is an inherited property, this is treated as inherit, and if it is not, this is treated as initial. This keyword effectively erases all declared values occurring earlier in the cascade, correctly inheriting or not as appropriate for the property (or all longhands of a shorthand).\r\n    | Unset\r\n    \r\n[<StringEnum; RequireQualifiedAccess>]\r\n/// https://www.w3.org/TR/CSS2/visuren.html#flow-control\r\ntype ClearOptions =\r\n    /// Requires that the top border edge of the box be below the bottom outer edge of any left-floating boxes that resulted from elements earlier in the source document.\r\n    | Left\r\n    /// Requires that the top border edge of the box be below the bottom outer edge of any right-floating boxes that resulted from elements earlier in the source document.\r\n    | Right\r\n    /// Requires that the top border edge of the box be below the bottom outer edge of any right-floating and left-floating boxes that resulted from elements earlier in the source document.\r\n    | Both\r\n    /// No constraint on the box's position with respect to floats.\r\n    | None\r\n    | [<CompiledName(\"inline-start\")>] InlineStart\r\n    | [<CompiledName(\"inline-end\")>] InlineEnd\r\n    \r\n    /// Sets this property to its default value. Read more about [CSS Initial value](https://www.w3schools.com/CSSref/css_initial.asp)\r\n    | Initial\r\n    /// Inherits this property from its parent element. Read about [CSS Inherit](https://www.w3schools.com/CSSref/css_inherit.asp)\r\n    | Inherit\r\n    /// If the cascaded value of a property is the unset keyword, then if it is an inherited property, this is treated as inherit, and if it is not, this is treated as initial. This keyword effectively erases all declared values occurring earlier in the cascade, correctly inheriting or not as appropriate for the property (or all longhands of a shorthand).\r\n    | Unset\r\n\r\n[<StringEnum; RequireQualifiedAccess>]\r\n/// https://www.w3.org/TR/CSS2/visuren.html#direction\r\ntype DirectionOptions =\r\n    /// Left-to-right direction.\r\n    | Ltr\r\n    /// Right-to-left direction.\r\n    | Rtl\r\n    \r\n    /// Sets this property to its default value. Read more about [CSS Initial value](https://www.w3schools.com/CSSref/css_initial.asp)\r\n    | Initial\r\n    /// Inherits this property from its parent element. Read about [CSS Inherit](https://www.w3schools.com/CSSref/css_inherit.asp)\r\n    | Inherit\r\n    /// If the cascaded value of a property is the unset keyword, then if it is an inherited property, this is treated as inherit, and if it is not, this is treated as initial. This keyword effectively erases all declared values occurring earlier in the cascade, correctly inheriting or not as appropriate for the property (or all longhands of a shorthand).\r\n    | Unset\r\n\r\n[<StringEnum; RequireQualifiedAccess>]\r\n/// https://developer.mozilla.org/en-US/docs/Web/CSS/user-select\r\ntype UserSelectOptions =\r\n    /// The text of the element and its sub-elements is not selectable. Note that the Selection object can contain these elements.\r\n    | None\r\n    /// The computed value of auto is determined as follows:\r\n    /// - On the ::before and ::after pseudo elements, the computed value is none\r\n    /// - If the element is an editable element, the computed value is contain\r\n    /// - Otherwise, if the computed value of user-select on the parent of this element is all, the computed value is all\r\n    /// - Otherwise, if the computed value of user-select on the parent of this element is none, the computed value is none\r\n    /// - Otherwise, the computed value is text\r\n    | Auto\r\n    /// The text can be selected by the user.\r\n    | Text\r\n    /// Enables selection to start within the element; however, the selection will be contained by the bounds of that element.\r\n    | Contain\r\n    /// In an HTML editor, if a double-click or context-click occurred in sub-elements, the highest ancestor with this value will be selected.\r\n    | All\r\n    \r\n    /// Sets this property to its default value. Read more about [CSS Initial value](https://www.w3schools.com/CSSref/css_initial.asp)\r\n    | Initial\r\n    /// Inherits this property from its parent element. Read about [CSS Inherit](https://www.w3schools.com/CSSref/css_inherit.asp)\r\n    | Inherit\r\n    /// If the cascaded value of a property is the unset keyword, then if it is an inherited property, this is treated as inherit, and if it is not, this is treated as initial. This keyword effectively erases all declared values occurring earlier in the cascade, correctly inheriting or not as appropriate for the property (or all longhands of a shorthand).\r\n    | Unset\r\n\r\ntype CSSProp =\r\n    | AlignContent of AlignContentOptions\r\n    | AlignItems of AlignItemsOptions\r\n    | AlignSelf of AlignSelfOptions\r\n    | AlignmentAdjust of obj\r\n    | AlignmentBaseline of AlignmentBaselineOptions\r\n    | All of AllOptions\r\n    | Animation of obj\r\n    | AnimationDelay of obj\r\n    | AnimationDirection of SingleAnimationDirection\r\n    | AnimationDuration of obj\r\n    | AnimationFillMode of SingleAnimationFillMode\r\n    | AnimationIterationCount of obj\r\n    | AnimationName of obj\r\n    | AnimationPlayState of obj\r\n    | AnimationTimingFunction of obj\r\n    | Appearance of AppearanceOptions\r\n    | BackfaceVisibility of BackfaceVisibilityOptions\r\n    | Background of obj\r\n    | BackgroundAttachment of obj\r\n    | BackgroundBlendMode of obj\r\n    | BackgroundClip of obj\r\n    | BackgroundColor of obj\r\n    | BackgroundComposite of obj\r\n    | BackgroundImage of obj\r\n    | BackgroundOrigin of obj\r\n    | BackgroundPosition of obj\r\n    | BackgroundPositionX of obj\r\n    | BackgroundPositionY of obj\r\n    | BackgroundRepeat of obj\r\n    | BackgroundSize of obj\r\n    | BaselineShift of obj\r\n    | Behavior of obj\r\n    | BlockSize of obj\r\n    | Border of obj\r\n    | BorderBlockEnd of obj\r\n    | BorderBlockEndColor of obj\r\n    | BorderBlockEndStyle of obj\r\n    | BorderBlockEndWidth of obj\r\n    | BorderBlockStart of obj\r\n    | BorderBlockStartColor of obj\r\n    | BorderBlockStartStyle of obj\r\n    | BorderBlockStartWidth of obj\r\n    | BorderBottom of obj\r\n    | BorderBottomColor of obj\r\n    | BorderBottomLeftRadius of obj\r\n    | BorderBottomRightRadius of obj\r\n    | BorderBottomStyle of obj\r\n    | BorderBottomWidth of obj\r\n    | BorderCollapse of obj\r\n    | BorderColor of obj\r\n    | BorderCornerShape of obj\r\n    | BorderImage of obj\r\n    | BorderImageOutset of obj\r\n    | BorderImageRepeat of obj\r\n    | BorderImageSlice of obj\r\n    | BorderImageSource of obj\r\n    | BorderImageWidth of obj\r\n    | BorderInlineEnd of obj\r\n    | BorderInlineEndColor of obj\r\n    | BorderInlineEndStyle of obj\r\n    | BorderInlineEndWidth of obj\r\n    | BorderInlineStart of obj\r\n    | BorderInlineStartColor of obj\r\n    | BorderInlineStartStyle of obj\r\n    | BorderInlineStartWidth of obj\r\n    | BorderLeft of obj\r\n    | BorderLeftColor of obj\r\n    | BorderLeftStyle of obj\r\n    | BorderLeftWidth of obj\r\n    | BorderRadius of obj\r\n    | BorderRight of obj\r\n    | BorderRightColor of obj\r\n    | BorderRightStyle of obj\r\n    | BorderRightWidth of obj\r\n    | BorderSpacing of obj\r\n    | BorderStyle of obj\r\n    | BorderTop of obj\r\n    | BorderTopColor of obj\r\n    | BorderTopLeftRadius of obj\r\n    | BorderTopRightRadius of obj\r\n    | BorderTopStyle of obj\r\n    | BorderTopWidth of obj\r\n    | BorderWidth of obj\r\n    | Bottom of obj\r\n    | BoxAlign of BoxAlignOptions\r\n    | BoxDecorationBreak of BoxDecorationBreakOptions\r\n    | BoxDirection of BoxDirectionOptions\r\n    | BoxFlex of obj\r\n    | BoxFlexGroup of obj\r\n    | BoxLineProgression of obj\r\n    | BoxLines of obj\r\n    | BoxOrdinalGroup of obj\r\n    | BoxShadow of obj\r\n    | BoxSizing of BoxSizingOptions\r\n    | BreakAfter of BreakOptions\r\n    | BreakBefore of BreakOptions\r\n    | BreakInside of BreakInsideOptions\r\n    | CaptionSide of CaptionSideOptions\r\n    | CaretColor of obj\r\n    | Clear of ClearOptions\r\n    | Clip of obj\r\n    | ClipPath of obj\r\n    | ClipRule of obj\r\n    | Color of obj\r\n    | ColorInterpolation of obj\r\n    | ColorInterpolationFilters of obj\r\n    | ColorProfile of obj\r\n    | ColorRendering of obj\r\n    | ColumnCount of obj\r\n    | ColumnFill of obj\r\n    | ColumnGap of obj\r\n    | ColumnRule of obj\r\n    | ColumnRuleColor of obj\r\n    | ColumnRuleStyle of obj\r\n    | ColumnRuleWidth of obj\r\n    | ColumnSpan of obj\r\n    | ColumnWidth of obj\r\n    | Columns of obj\r\n    | Content of obj\r\n    | CounterIncrement of obj\r\n    | CounterReset of obj\r\n    | Cue of obj\r\n    | CueAfter of obj\r\n    | Cursor of obj\r\n    | Direction of DirectionOptions\r\n    | Display of DisplayOptions\r\n    | DominantBaseline of obj\r\n    | EmptyCells of obj\r\n    | EnableBackground of obj\r\n    | Fill of obj\r\n    | FillOpacity of obj\r\n    | FillRule of obj\r\n    | Filter of obj\r\n    | Flex of obj\r\n    | FlexAlign of obj\r\n    | FlexBasis of obj\r\n    | FlexDirection of obj\r\n    | FlexFlow of obj\r\n    | FlexGrow of obj\r\n    | FlexItemAlign of obj\r\n    | FlexLinePack of obj\r\n    | FlexOrder of obj\r\n    | FlexShrink of obj\r\n    | FlexWrap of obj\r\n    | Float of FloatOptions\r\n    | FloodColor of obj\r\n    | FloodOpacity of obj\r\n    | FlowFrom of obj\r\n    | Font of obj\r\n    | FontFamily of obj\r\n    | FontFeatureSettings of obj\r\n    | FontKerning of obj\r\n    | FontLanguageOverride of obj\r\n    | FontSize of obj\r\n    | FontSizeAdjust of obj\r\n    | FontStretch of obj\r\n    | FontStyle of obj\r\n    | FontSynthesis of obj\r\n    | FontVariant of obj\r\n    | FontVariantAlternates of obj\r\n    | FontVariantCaps of obj\r\n    | FontVariantEastAsian of obj\r\n    | FontVariantLigatures of obj\r\n    | FontVariantNumeric of obj\r\n    | FontVariantPosition of obj\r\n    | FontWeight of obj\r\n    | GlyphOrientationHorizontal of obj\r\n    | GlyphOrientationVertical of obj\r\n    | Grid of obj\r\n    | GridArea of obj\r\n    | GridAutoColumns of obj\r\n    | GridAutoFlow of obj\r\n    | GridAutoRows of obj\r\n    | GridColumn of obj\r\n    | GridColumnEnd of obj\r\n    | GridColumnGap of obj\r\n    | GridColumnStart of obj\r\n    | GridGap of obj\r\n    | GridRow of obj\r\n    | GridRowEnd of obj\r\n    | GridRowGap of obj\r\n    | GridRowPosition of obj\r\n    | GridRowSpan of obj\r\n    | GridRowStart of obj\r\n    | GridTemplate of obj\r\n    | GridTemplateAreas of obj\r\n    | GridTemplateColumns of obj\r\n    | GridTemplateRows of obj\r\n    | HangingPunctuation of obj\r\n    | Height of obj\r\n    | HyphenateLimitChars of obj\r\n    | HyphenateLimitLines of obj\r\n    | HyphenateLimitZone of obj\r\n    | Hyphens of obj\r\n    | ImageOrientation of obj // Likely to be deprecated in the near future\r\n    | ImageRendering of ImageRenderingOptions\r\n    | ImageResolution of obj\r\n    | ImeMode of obj\r\n    | InlineSize of obj\r\n    | Isolation of obj\r\n    | JustifyContent of obj\r\n    | JustifySelf of JustifySelfOptions\r\n    | Kerning of obj\r\n    | LayoutGrid of obj\r\n    | LayoutGridChar of obj\r\n    | LayoutGridLine of obj\r\n    | LayoutGridMode of obj\r\n    | LayoutGridType of obj\r\n    | Left of obj\r\n    | LetterSpacing of obj\r\n    | LightingColor of obj\r\n    | LineBreak of obj\r\n    | LineClamp of obj\r\n    | LineHeight of obj\r\n    | ListStyle of obj\r\n    | ListStyleImage of obj\r\n    | ListStylePosition of obj\r\n    | ListStyleType of obj\r\n    | Margin of obj\r\n    | MarginBlockEnd of obj\r\n    | MarginBlockStart of obj\r\n    | MarginBottom of obj\r\n    | MarginInlineEnd of obj\r\n    | MarginInlineStart of obj\r\n    | MarginLeft of obj\r\n    | MarginRight of obj\r\n    | MarginTop of obj\r\n    | MarkerEnd of obj\r\n    | MarkerMid of obj\r\n    | MarkerStart of obj\r\n    | MarqueeDirection of obj\r\n    | MarqueeStyle of obj\r\n    | Mask of obj\r\n    | MaskBorder of obj\r\n    | MaskBorderRepeat of obj\r\n    | MaskBorderSlice of obj\r\n    | MaskBorderSource of obj\r\n    | MaskBorderWidth of obj\r\n    | MaskClip of obj\r\n    | MaskComposite of obj\r\n    | MaskImage of obj\r\n    | MaskMode of obj\r\n    | MaskOrigin of obj\r\n    | MaskPosition of obj\r\n    | MaskRepeat of obj\r\n    | MaskSize of obj\r\n    | MaskType of obj\r\n    | MaxFontSize of obj\r\n    | MaxHeight of obj\r\n    | MaxWidth of obj\r\n    | MinBlockSize of obj\r\n    | MinHeight of obj\r\n    | MinInlineSize of obj\r\n    | MinWidth of obj\r\n    | MixBlendMode of obj\r\n    | ObjectFit of obj\r\n    | ObjectPosition of obj\r\n    | OffsetBlockEnd of obj\r\n    | OffsetBlockStart of obj\r\n    | OffsetInlineEnd of obj\r\n    | OffsetInlineStart of obj\r\n    | Opacity of obj\r\n    | Order of obj\r\n    | Orphans of obj\r\n    | Outline of obj\r\n    | OutlineColor of obj\r\n    | OutlineOffset of obj\r\n    | OutlineStyle of obj\r\n    | OutlineWidth of obj\r\n    | OverflowStyle of obj\r\n    | OverflowWrap of obj\r\n    | OverflowX of OverflowOptions\r\n    | OverflowY of OverflowOptions\r\n    | Padding of obj\r\n    | PaddingBlockEnd of obj\r\n    | PaddingBlockStart of obj\r\n    | PaddingBottom of obj\r\n    | PaddingInlineEnd of obj\r\n    | PaddingInlineStart of obj\r\n    | PaddingLeft of obj\r\n    | PaddingRight of obj\r\n    | PaddingTop of obj\r\n    | PageBreakAfter of obj\r\n    | PageBreakBefore of obj\r\n    | PageBreakInside of obj\r\n    | Pause of obj\r\n    | PauseAfter of obj\r\n    | PauseBefore of obj\r\n    | Perspective of obj\r\n    | PerspectiveOrigin of obj\r\n    | PointerEvents of obj\r\n    | Position of PositionOptions\r\n    | PunctuationTrim of obj\r\n    | Quotes of obj\r\n    | RegionFragment of obj\r\n    | Resize of obj\r\n    | RestAfter of obj\r\n    | RestBefore of obj\r\n    | Right of obj\r\n    | RubyAlign of obj\r\n    | RubyMerge of obj\r\n    | RubyPosition of obj\r\n    | ScrollBehavior of obj\r\n    | ScrollSnapCoordinate of obj\r\n    | ScrollSnapDestination of obj\r\n    | ScrollSnapType of obj\r\n    | ShapeImageThreshold of obj\r\n    | ShapeInside of obj\r\n    | ShapeMargin of obj\r\n    | ShapeOutside of obj\r\n    | ShapeRendering of obj\r\n    | Speak of obj\r\n    | SpeakAs of obj\r\n    | StopColor of obj\r\n    | StopOpacity of obj\r\n    | Stroke of obj\r\n    | StrokeDasharray of obj\r\n    | StrokeDashoffset of obj\r\n    | StrokeLinecap of obj\r\n    | StrokeLinejoin of obj\r\n    | StrokeMiterlimit of obj\r\n    | StrokeOpacity of obj\r\n    | StrokeWidth of obj\r\n    | TabSize of obj\r\n    | TableLayout of obj\r\n    | TextAlign of TextAlignOptions\r\n    | TextAlignLast of obj\r\n    | TextAnchor of obj\r\n    | TextCombineUpright of obj\r\n    | TextDecoration of obj\r\n    | TextDecorationColor of obj\r\n    | TextDecorationLine of obj\r\n    | TextDecorationLineThrough of obj\r\n    | TextDecorationNone of obj\r\n    | TextDecorationOverline of obj\r\n    | TextDecorationSkip of obj\r\n    | TextDecorationStyle of obj\r\n    | TextDecorationUnderline of obj\r\n    | TextEmphasis of obj\r\n    | TextEmphasisColor of obj\r\n    | TextEmphasisPosition of obj\r\n    | TextEmphasisStyle of obj\r\n    | TextHeight of obj\r\n    | TextIndent of obj\r\n    | TextJustify of obj\r\n    | TextJustifyTrim of obj\r\n    | TextKashidaSpace of obj\r\n    | TextLineThrough of obj\r\n    | TextLineThroughColor of obj\r\n    | TextLineThroughMode of obj\r\n    | TextLineThroughStyle of obj\r\n    | TextLineThroughWidth of obj\r\n    | TextOrientation of obj\r\n    | TextOverflow of obj\r\n    | TextOverline of obj\r\n    | TextOverlineColor of obj\r\n    | TextOverlineMode of obj\r\n    | TextOverlineStyle of obj\r\n    | TextOverlineWidth of obj\r\n    | TextRendering of obj\r\n    | TextScript of obj\r\n    | TextShadow of obj\r\n    | TextTransform of obj\r\n    | TextUnderlinePosition of obj\r\n    | TextUnderlineStyle of obj\r\n    | Top of obj\r\n    | TouchAction of obj\r\n    | Transform of obj\r\n    | TransformBox of obj\r\n    | TransformOrigin of obj\r\n    | TransformOriginZ of obj\r\n    | TransformStyle of obj\r\n    | Transition of obj\r\n    | TransitionDelay of obj\r\n    | TransitionDuration of obj\r\n    | TransitionProperty of obj\r\n    | TransitionTimingFunction of obj\r\n    | UnicodeBidi of obj\r\n    | UnicodeRange of obj\r\n    | UserFocus of obj\r\n    | UserInput of obj\r\n    | UserSelect of UserSelectOptions\r\n    | VerticalAlign of obj\r\n    | Visibility of obj\r\n    | VoiceBalance of obj\r\n    | VoiceDuration of obj\r\n    | VoiceFamily of obj\r\n    | VoicePitch of obj\r\n    | VoiceRange of obj\r\n    | VoiceRate of obj\r\n    | VoiceStress of obj\r\n    | VoiceVolume of obj\r\n    | WhiteSpace of WhiteSpaceOptions\r\n    | WhiteSpaceTreatment of obj\r\n    | Widows of obj\r\n    | Width of obj\r\n    | WillChange of obj\r\n    | WordBreak of obj\r\n    | WordSpacing of obj\r\n    | WordWrap of obj\r\n    | WrapFlow of obj\r\n    | WrapMargin of obj\r\n    | WrapOption of obj\r\n    | WritingMode of obj\r\n    | ZIndex of obj\r\n    | Zoom of obj\r\n    /// If you are searching for a way to provide a value not supported by this DSL then use something like: CSSProp.Custom (\"align-content\", \"center\")\r\n    | [<Erase>] Custom of string * obj\r\n    static member Overflow (overflow: OverflowOptions, ?overflowY: OverflowOptions) =\r\n        match overflowY with\r\n        | Some value -> CSSProp.Custom (\"overflow\", stringEnum overflow + \" \" + stringEnum value)\r\n        | None -> CSSProp.Custom (\"overflow\", stringEnum overflow)\r\n","namespace Fable.React\r\n\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Browser\r\nopen Props\r\n\r\n#if !FABLE_COMPILER\r\ntype HTMLNode =\r\n    | Text of string\r\n    | RawText of string\r\n    | Node of string * IProp seq * ReactElement seq\r\n    | List of ReactElement seq\r\n    | Empty\r\nwith interface ReactElement\r\n\r\ntype ServerElementType =\r\n    | Tag\r\n    | Fragment\r\n    | Component\r\n\r\ntype ReactElementTypeWrapper<'P> =\r\n    | Comp of obj\r\n    | Fn of ('P -> ReactElement)\r\n    | HtmlTag of string\r\n    interface ReactElementType<'P>\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule ServerRendering =\r\n    let [<Literal>] private ChildrenName = \"children\"\r\n\r\n    let private createServerElementPrivate(tag: obj, props: obj, children: ReactElement seq, elementType: ServerElementType) =\r\n        match elementType with\r\n        | ServerElementType.Tag ->\r\n            HTMLNode.Node (string tag, props :?> IProp seq, children) :> ReactElement\r\n        | ServerElementType.Fragment ->\r\n            HTMLNode.List children :> ReactElement\r\n        | ServerElementType.Component ->\r\n            let tag = tag :?> System.Type\r\n            let comp = System.Activator.CreateInstance(tag, props)\r\n            let childrenProp = tag.GetProperty(ChildrenName)\r\n            childrenProp.SetValue(comp, children |> Seq.toArray)\r\n            let render = tag.GetMethod(\"render\")\r\n            render.Invoke(comp, null) :?> ReactElement\r\n\r\n    let private createServerElementByFnPrivate(f, props, children) =\r\n        let propsType = props.GetType()\r\n        let props =\r\n            if propsType.GetProperty (ChildrenName) |> isNull then\r\n                props\r\n            else\r\n                let values = ResizeArray<obj> ()\r\n                let properties = propsType.GetProperties()\r\n                for p in properties do\r\n                    if p.Name = ChildrenName then\r\n                        values.Add (children |> Seq.toArray)\r\n                    else\r\n                        values.Add (FSharp.Reflection.FSharpValue.GetRecordField(props, p))\r\n                FSharp.Reflection.FSharpValue.MakeRecord(propsType, values.ToArray()) :?> 'P\r\n        f props\r\n\r\n    // In most cases these functions are inlined (mainly for Fable optimizations)\r\n    // so we create a proxy to avoid inlining big functions every time\r\n\r\n    let createServerElement(tag: obj, props: obj, children: ReactElement seq, elementType: ServerElementType) =\r\n        createServerElementPrivate(tag, props, children, elementType)\r\n\r\n    let createServerElementByFn(f, props, children) =\r\n        createServerElementByFnPrivate(f, props, children)\r\n#endif\r\n\r\n[<RequireQualifiedAccess>]\r\n[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]\r\nmodule ReactElementType =\r\n    let inline ofComponent<'comp, 'props, 'state when 'comp :> Component<'props, 'state>> : ReactElementType<'props> =\r\n#if FABLE_REPL_LIB\r\n        failwith \"Cannot create React components from types in Fable REPL\"\r\n#else\r\n#if FABLE_COMPILER\r\n        jsConstructor<'comp> |> unbox\r\n#else\r\n        Comp (typeof<'comp>) :> _\r\n#endif\r\n#endif\r\n\r\n    let inline ofFunction<'props> (f: 'props -> ReactElement): ReactElementType<'props> =\r\n#if FABLE_COMPILER\r\n        f |> unbox\r\n#else\r\n        Fn f :> _\r\n#endif\r\n\r\n    let inline ofHtmlElement<'props> (name: string): ReactElementType<'props> =\r\n#if FABLE_COMPILER\r\n        unbox name\r\n#else\r\n        HtmlTag name :> ReactElementType<'props>\r\n#endif\r\n\r\n    /// Create a ReactElement to be rendered from an element type, props and children\r\n    let inline create<'props> (comp: ReactElementType<'props>) (props: 'props) (children: ReactElement seq): ReactElement =\r\n#if FABLE_COMPILER\r\n        ReactBindings.React.createElement(comp, props, children)\r\n#else\r\n        match (comp :?> ReactElementTypeWrapper<'props>) with\r\n        | Comp obj -> ServerRendering.createServerElement(obj, props, children, ServerElementType.Component)\r\n        | Fn f -> ServerRendering.createServerElementByFn(f, props, children)\r\n        | HtmlTag obj -> ServerRendering.createServerElement(obj, props, children, ServerElementType.Tag)\r\n#endif\r\n\r\n    /// React.memo is a higher order component. It’s similar to React.PureComponent but for function components instead of classes.\r\n    /// If your function component renders the same result given the same props, you can wrap it in a call to React.memo.\r\n    /// React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. If you want control over the comparison, you can use `memoWith`.\r\n    let memo<'props> (render: 'props -> ReactElement) =\r\n#if FABLE_COMPILER\r\n        ReactBindings.React.memo(render, unbox null)\r\n#else\r\n        ofFunction render\r\n#endif\r\n\r\n    /// React.memo is a higher order component. It’s similar to React.PureComponent but for function components instead of classes.\r\n    /// If your function renders the same result given the \"same\" props (according to `areEqual`), you can wrap it in a call to React.memo.\r\n    /// React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. If you want control over the comparison, you can use `memoWith`.\r\n    /// This version allow you to control the comparison used instead of the default shallow one by provide a custom comparison function.\r\n    let memoWith<'props> (areEqual: 'props -> 'props -> bool) (render: 'props -> ReactElement) =\r\n#if FABLE_COMPILER\r\n        ReactBindings.React.memo(render, areEqual)\r\n#else\r\n        ofFunction render\r\n#endif\r\n\r\n\r\n[<AutoOpen>]\r\nmodule Helpers =\r\n    [<System.Obsolete(\"Use ReactBindings.React.createElement\")>]\r\n    let inline createElement(comp: obj, props: obj, [<ParamList>] children: ReactElement seq): ReactElement =\r\n#if FABLE_COMPILER\r\n        ReactBindings.React.createElement(comp, props, children)\r\n#else\r\n        HTMLNode.Empty :> _\r\n#endif\r\n\r\n    /// Instantiate a component from a type inheriting React.Component\r\n    /// Example: `ofType<MyComponent,_,_> { myProps = 5 } []`\r\n    let inline ofType<'T,'P,'S when 'T :> Component<'P,'S>> (props: 'P) (children: ReactElement seq): ReactElement =\r\n        ReactElementType.create ReactElementType.ofComponent<'T,_,_> props children\r\n\r\n    [<System.Obsolete(\"Use ofType\")>]\r\n    let inline com<'T,'P,'S when 'T :> Component<'P,'S>> (props: 'P) (children: ReactElement seq): ReactElement =\r\n        ofType<'T, 'P, 'S> props children\r\n\r\n    let inline ofFunction<'P> (f: 'P -> ReactElement) (props: 'P) (children: ReactElement seq): ReactElement =\r\n        ReactElementType.create (ReactElementType.ofFunction f) props children\r\n\r\n    /// Instantiate an imported React component. The first two arguments must be string literals, \"default\" can be used for the first one.\r\n    /// Example: `ofImport \"Map\" \"leaflet\" { x = 10; y = 50 } []`\r\n    let inline ofImport<'P> (importMember: string) (importPath: string) (props: 'P) (children: ReactElement seq): ReactElement =\r\n#if FABLE_REPL_LIB\r\n        failwith \"Cannot import React components in Fable REPL\"\r\n#else\r\n#if FABLE_COMPILER\r\n        ReactBindings.React.createElement(import importMember importPath, props, children)\r\n#else\r\n        failwith \"Cannot import React components in .NET\"\r\n#endif\r\n#endif\r\n\r\n#if FABLE_COMPILER\r\n    [<Emit(\"typeof $0 === 'function'\")>]\r\n    let private isFunction (x: obj): bool = jsNative\r\n\r\n    [<Emit(\"typeof $0 === 'object' && !$0[Symbol.iterator]\")>]\r\n    let private isNonEnumerableObject (x: obj): bool = jsNative\r\n#endif\r\n\r\n    /// Normal structural F# comparison, but ignores top-level functions (e.g. Elmish dispatch).\r\n    /// Can be used e.g. with the `FunctionComponent.Of` `memoizeWith` parameter.\r\n    let equalsButFunctions (x: 'a) (y: 'a) =\r\n#if FABLE_COMPILER\r\n        if obj.ReferenceEquals(x, y) then\r\n            true\r\n        elif isNonEnumerableObject x && not(isNull(box y)) then\r\n            let keys = JS.Constructors.Object.keys x\r\n            let length = keys.Count\r\n            let mutable i = 0\r\n            let mutable result = true\r\n            while i < length && result do\r\n                let key = keys.[i]\r\n                i <- i + 1\r\n                let xValue = x?(key)\r\n                result <- isFunction xValue || xValue = y?(key)\r\n            result\r\n        else\r\n            (box x) = (box y)\r\n#else\r\n        // Server rendering, won't be actually used\r\n        // Avoid `x = y` because it will force 'a to implement structural equality\r\n        false\r\n#endif\r\n\r\n    /// Comparison similar to default React.memo, but ignores functions (e.g. Elmish dispatch).\r\n    /// Performs a memberwise comparison where value types and strings are compared by value,\r\n    /// and other types by reference.\r\n    /// Can be used e.g. with the `FunctionComponent.Of` `memoizeWith` parameter.\r\n    let memoEqualsButFunctions (x: 'a) (y: 'a) =\r\n#if FABLE_COMPILER\r\n        if obj.ReferenceEquals(x, y) then\r\n            true\r\n        elif isNonEnumerableObject x && not(isNull(box y)) then\r\n            let keys = JS.Constructors.Object.keys x\r\n            let length = keys.Count\r\n            let mutable i = 0\r\n            let mutable result = true\r\n            while i < length && result do\r\n                let key = keys.[i]\r\n                i <- i + 1\r\n                let xValue = x?(key)\r\n                result <- isFunction xValue || obj.ReferenceEquals(xValue, y?(key))\r\n            result\r\n        else\r\n            false\r\n#else\r\n        // Server rendering, won't be actually used\r\n        // Avoid `x = y` because it will force 'a to implement structural equality\r\n        false\r\n#endif\r\n\r\n    [<System.Obsolete(\"Use FunctionComponent.Of with memoizeWith\")>]\r\n    let memoBuilder<'props> (name: string) (render: 'props -> ReactElement) : 'props -> ReactElement =\r\n#if FABLE_COMPILER\r\n        render?displayName <- name\r\n#endif\r\n        let memoType = ReactElementType.memo render\r\n        fun props ->\r\n            ReactElementType.create memoType props []\r\n\r\n    [<System.Obsolete(\"Use FunctionComponent.Of with memoizeWith\")>]\r\n    let memoBuilderWith<'props> (name: string) (areEqual: 'props -> 'props -> bool) (render: 'props -> ReactElement) : 'props -> ReactElement =\r\n#if FABLE_COMPILER\r\n        render?displayName <- name\r\n#endif\r\n        let memoType = ReactElementType.memoWith areEqual render\r\n        fun props ->\r\n            ReactElementType.create memoType props []\r\n\r\n    [<System.Obsolete(\"Use ReactElementType.create\")>]\r\n    let inline from<'P> (com: ReactElementType<'P>) (props: 'P) (children: ReactElement seq): ReactElement =\r\n        ReactElementType.create com props children\r\n\r\n    /// Alias of `ofString`\r\n    let inline str (s: string): ReactElement =\r\n#if FABLE_COMPILER\r\n        unbox s\r\n#else\r\n        HTMLNode.Text s :> ReactElement\r\n#endif\r\n\r\n    /// Cast a string to a React element (erased in runtime)\r\n    let inline ofString (s: string): ReactElement =\r\n        str s\r\n        \r\n    /// The equivalent of `sprintf (...) |> str`\r\n    let inline strf format =\r\n        Printf.kprintf str format\r\n\r\n    /// Cast an option value to a React element (erased in runtime)\r\n    let inline ofOption (o: ReactElement option): ReactElement =\r\n        match o with Some o -> o | None -> null // Option.toObj(o)\r\n\r\n    [<System.Obsolete(\"Use ofOption\")>]\r\n    let opt (o: ReactElement option): ReactElement =\r\n        ofOption o\r\n\r\n    /// Cast an int to a React element (erased in runtime)\r\n    let inline ofInt (i: int): ReactElement =\r\n#if FABLE_COMPILER\r\n        unbox i\r\n#else\r\n        HTMLNode.RawText (string i) :> ReactElement\r\n#endif\r\n\r\n    /// Cast a float to a React element (erased in runtime)\r\n    let inline ofFloat (f: float): ReactElement =\r\n#if FABLE_COMPILER\r\n        unbox f\r\n#else\r\n        HTMLNode.RawText (string f) :> ReactElement\r\n#endif\r\n\r\n    /// Returns a list **from .render() method**\r\n    let inline ofList (els: ReactElement list): ReactElement =\r\n#if FABLE_COMPILER\r\n        unbox(List.toArray els)\r\n#else\r\n        HTMLNode.List els :> ReactElement\r\n#endif\r\n\r\n    /// Returns an array **from .render() method**\r\n    let inline ofArray (els: ReactElement array): ReactElement =\r\n#if FABLE_COMPILER\r\n        unbox els\r\n#else\r\n        HTMLNode.List els :> ReactElement\r\n#endif\r\n\r\n    /// A ReactElement when you don't want to render anything (null in javascript)\r\n    let nothing: ReactElement =\r\n#if FABLE_COMPILER\r\n        null\r\n#else\r\n        HTMLNode.Empty :> ReactElement\r\n#endif\r\n\r\n    /// Instantiate a DOM React element\r\n    let inline domEl (tag: string) (props: IHTMLProp seq) (children: ReactElement seq): ReactElement =\r\n#if FABLE_COMPILER\r\n        ReactBindings.React.createElement(tag, keyValueList CaseRules.LowerFirst props, children)\r\n#else\r\n        ServerRendering.createServerElement(tag, (props |> Seq.cast<IProp>), children, ServerElementType.Tag)\r\n#endif\r\n\r\n    /// Instantiate a DOM React element (void)\r\n    let inline voidEl (tag: string) (props: IHTMLProp seq) : ReactElement =\r\n#if FABLE_COMPILER\r\n        ReactBindings.React.createElement(tag, keyValueList CaseRules.LowerFirst props, [])\r\n#else\r\n        ServerRendering.createServerElement(tag, (props |> Seq.cast<IProp>), [], ServerElementType.Tag)\r\n#endif\r\n\r\n    /// Instantiate an SVG React element\r\n    let inline svgEl (tag: string) (props: IProp seq) (children: ReactElement seq): ReactElement =\r\n#if FABLE_COMPILER\r\n        ReactBindings.React.createElement(tag, keyValueList CaseRules.LowerFirst props, children)\r\n#else\r\n        ServerRendering.createServerElement(tag, (props |> Seq.cast<IProp>), children, ServerElementType.Tag)\r\n#endif\r\n\r\n    /// Instantiate a React fragment\r\n    let inline fragment (props: IFragmentProp seq) (children: ReactElement seq): ReactElement =\r\n#if FABLE_COMPILER\r\n        ReactBindings.React.createElement(ReactBindings.React.Fragment, keyValueList CaseRules.LowerFirst props, children)\r\n#else\r\n        ServerRendering.createServerElement(typeof<Fragment>, (props |> Seq.cast<IProp>), children, ServerElementType.Fragment)\r\n#endif\r\n\r\n    /// Accepts a context value to be passed to consuming components that are descendants of this Provider.\r\n    /// One Provider can be connected to many consumers. Providers can be nested to override values deeper within the tree.\r\n    /// Important: In SSR, this is ignored, and the DEFAULT value is consumed!\r\n    /// More info at https://reactjs.org/docs/context.html#contextprovider\r\n    let inline contextProvider (ctx: IContext<'T>) (value: 'T) (children: ReactElement seq): ReactElement =\r\n#if FABLE_COMPILER\r\n        ReactBindings.React.createElement(ctx?Provider, createObj [\"value\" ==> value], children)\r\n#else\r\n        fragment [] children\r\n#endif\r\n\r\n    /// Consumes a context value, either from the nearest parent in the tree, or from the default value.\r\n    /// Important: in SSR, this will always consume the context DEFAULT value!\r\n    /// More info at https://reactjs.org/docs/context.html#contextconsumer\r\n    let inline contextConsumer (ctx: IContext<'T>) (children: 'T -> ReactElement): ReactElement =\r\n#if FABLE_COMPILER\r\n        ReactBindings.React.createElement(ctx?Consumer, null, [!!children])\r\n#else\r\n        let ctx = ctx :?> ISSRContext<_>\r\n        fragment [] [children(ctx.DefaultValue)]\r\n#endif\r\n\r\n    /// Creates a Context object. When React renders a component that subscribes to this Context\r\n    /// object it will read the current context value from the closest matching Provider above it\r\n    /// in the tree. More info at https://reactjs.org/docs/context.html#reactcreatecontext\r\n    let inline createContext (defaultValue: 'T): IContext<'T> =\r\n#if FABLE_COMPILER\r\n        ReactBindings.React.createContext(defaultValue)\r\n#else\r\n        upcast { new ISSRContext<_> with member __.DefaultValue = defaultValue }\r\n#endif\r\n\r\n    /// To be used in constructors of class components\r\n    /// (for function components use `useRef` hook)\r\n    let inline createRef (initialValue: 'T): IRefValue<'T> =\r\n#if FABLE_COMPILER\r\n        ReactBindings.React.createRef(initialValue)\r\n#else\r\n        { new IRefValue<_> with\r\n            member __.current with get() = initialValue and set _ = () }\r\n#endif\r\n\r\n    // Class list helpers\r\n    let classBaseList baseClass classes =\r\n        classes\r\n        |> Seq.choose (fun (name, condition) ->\r\n            if condition && not(System.String.IsNullOrEmpty(name)) then Some name\r\n            else None)\r\n        |> Seq.fold (fun state name -> state + \" \" + name) baseClass\r\n        |> ClassName\r\n\r\n    let classList classes = classBaseList \"\" classes\r\n\r\n    /// Finds a DOM element by its ID and mounts the React element there\r\n    /// Important: Not available in SSR\r\n    let inline mountById (domElId: string) (reactEl: ReactElement): unit =\r\n#if FABLE_COMPILER\r\n        ReactDom.render(reactEl, document.getElementById(domElId))\r\n#else\r\n        failwith \"mountById is not available for SSR\"\r\n#endif\r\n    /// Finds the first DOM element matching a CSS selector and mounts the React element there\r\n    /// Important: Not available in SSR\r\n    let inline mountBySelector (domElSelector: string) (reactEl: ReactElement): unit =\r\n#if FABLE_COMPILER\r\n        ReactDom.render(reactEl, document.querySelector(domElSelector))\r\n#else\r\n        failwith \"mountBySelector is not available for SSR\"\r\n#endif\r\n","namespace Fulma\r\n\r\nopen Fulma\r\nopen Fable.React\r\nopen Fable.React.Props\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Icon =\r\n\r\n    type Option =\r\n        // Sizes\r\n        | Size of ISize\r\n        /// Add `is-left` class\r\n        | [<CompiledName(\"is-left\")>] IsLeft\r\n        /// Add `is-right` class\r\n        | [<CompiledName(\"is-right\")>] IsRight\r\n        // Extra\r\n        | CustomClass of string\r\n        | Props of IHTMLProp list\r\n        | Modifiers of Modifier.IModifier list\r\n\r\n    /// Generate <span class=\"icon\"></span>\r\n    let icon options children =\r\n        let parseOptions (result : GenericOptions) option =\r\n            match option with\r\n            // Sizes\r\n            | Size size -> ofSize size |> result.AddClass\r\n            // Position\r\n            | IsLeft\r\n            | IsRight -> result.AddCaseName option\r\n            // Extra\r\n            | Props props -> result.AddProps props\r\n            | CustomClass customClass -> result.AddClass customClass\r\n            | Modifiers modifiers -> result.AddModifiers modifiers\r\n\r\n        GenericOptions.Parse(options, parseOptions, \"icon\").ToReactElement(span, children)\r\n\r\n    module Text =\r\n\r\n        let span (options: GenericOption list) children =\r\n            GenericOptions.Parse(options, parseOptions, \"icon-text\").ToReactElement(span, children)\r\n\r\n        let div (options: GenericOption list) children =\r\n            GenericOptions.Parse(options, parseOptions, \"icon-text\").ToReactElement(div, children)\r\n","module CodeHelpers.FableHelpers\r\n#line 2\r\nopen Fable.Core.JS\r\nopen Fable.Core.JsInterop\r\nopen Shared\r\nopen Shared.Helpers\r\nopen Elmish\r\nopen Fable.Core\r\nopen Thoth.Json\r\n\r\nmodule Map = FSharp.Collections.Map\r\ntype Map<'k,'v when 'k : comparison> = FSharp.Collections.Map<'k,'v>\r\n\r\nlet private debug = false\r\n// let Resolver.serialize x = JSON.Resolver.serialize x\r\n// let parse x = JSON.parse(x)\r\ntype Resolver =\r\n    // type Encoder<'T> = 'T -> JsonValue\r\n    static member inline MapEncoder<'t>(coders) = // : Encoder<FSharp.Collections.Map<_,_>> =\r\n        let mapEncoder : Encoder<_> =\r\n            fun (x:Map<string,float>) ->\r\n            Thoth.Json.Encode.object (\r\n                                        x\r\n                                        |> Map.toSeq\r\n                                        |> Seq.map(fun (k,v) ->\r\n                                            k, Thoth.Json.Encode.float v\r\n                                        )\r\n                    )\r\n        // type Decoder<'T> = string -> JsonValue -> Result<'T, DecoderError>\r\n        let mapDecoder : Decoder<Map<string,float>> =\r\n            fun x jv ->\r\n                let decoderish= Decode.dict Decode.float\r\n                decoderish x jv\r\n        let coders =\r\n            coders\r\n            |> Extra.withCustom mapEncoder mapDecoder\r\n        coders\r\n    // static member Serialize(x:'t, [<Inject>] ?resolver: ITypeResolver<'t>): string =\r\n    //     let extra = Resolver.MapEncoder Extra.empty\r\n    //     Thoth.Json.Encode.Auto.toString(2,x,extra=extra, resolver=resolver.Value)\r\n    static member inline Serialize(x:'t): string =\r\n        let extra = Resolver.MapEncoder Extra.empty\r\n        Thoth.Json.Encode.Auto.toString(2,x,extra=extra)\r\n    static member inline Deserialize<'t>(x:string) : 't option =\r\n        let extra = Resolver.MapEncoder Extra.empty\r\n        match Thoth.Json.Decode.Auto.fromString(x, extra= extra) with\r\n        | Ok v -> Some v\r\n        | _ ->\r\n            None\r\n\r\n// for debugging\r\nlet inline toGlobal (name:string) value =\r\n    printfn \"Adding global %s\" name\r\n    Browser.Dom.self?(name) <- value\r\n    ()\r\n// let addDays (x:Date,days:int):Date =\r\n//     let date = Constructors.Date.Create(x.valueOf())\r\n//     date.AddDays(days)\r\n\r\nlet pascal (x:string) =\r\n    (string x.[0]).ToUpper() + x.[1..]\r\n\r\nlet formatNumber (places: int option) (num:float) : string =\r\n    let formatCommas (x:string) =\r\n        // printfn \"Format %s\" x\r\n        [0 .. x.Length - 1]\r\n        |> List.map(fun i -> string x.[i])\r\n        // |> List.skip 1\r\n        |> List.rev\r\n        |> List.mapi (fun i c ->\r\n            if (i+1) % 3 = 0 then\r\n                sprintf \",%s\" c\r\n            else\r\n                c\r\n        )\r\n        |> List.rev\r\n        |> String.concat \"\"\r\n        |> String.trim1 [\",\"]\r\n    let places = Option.defaultValue 2 places\r\n    if isNull <| box num then \"null\"\r\n    elif isNaN num then \"NaN\"\r\n    else\r\n        let input = string num\r\n        // printfn \"Testing input %s %.2f\" input num\r\n        match input with\r\n        | Before \".\" b & After \".\" aft ->\r\n            b, if places > 0 then Some aft else None\r\n        | _ -> input, None\r\n        |> function // fix up commas\r\n            | b, aft when b.Length > 3 ->\r\n                formatCommas b, aft\r\n            | b,aft -> b,aft\r\n        |> function\r\n            | b, None -> if places > 0 then sprintf \"%s.%s\" b <| String.replicate places \"0\" else b\r\n            | b, Some aft ->\r\n                if places > aft.Length then\r\n                    \"0\"\r\n                    |> String.replicate (places - aft.Length)\r\n                    |> fun padding -> aft + padding\r\n                    |> sprintf \"%s.%s\" b\r\n                elif places < aft.Length then\r\n                    aft.[0 .. places - 1]\r\n                    |> sprintf \"%s.%s\" b\r\n                else sprintf \"%s.%s\" b aft\r\n\r\n\r\nlet formatInt (num:int) : string =\r\n    formatNumber (Some 0) (float num)\r\n\r\nlet getAttrValue name (x:Browser.Types.HTMLElement) =\r\n    if not <| isNull x.attributes then\r\n        if debug then\r\n            eprintfn \"Found attribute values %i\" x.attributes.length\r\n            console.log(x)\r\n            [0 .. x.attributes.length - 1]\r\n            |> Seq.iter(fun i ->\r\n                let attr = x.attributes.[i]\r\n                eprintfn \"\\tFound attribute: %s %A\" attr.name attr.value\r\n            )\r\n        x.attributes.getNamedItem name\r\n        |> Option.ofObj\r\n        |> Option.bind (fun x -> x.value |> Option.ofObj)\r\n    else None\r\n\r\nlet getTargetAsHtml (ev:Browser.Types.Event) =\r\n    Option.ofObj ev\r\n    |> Option.bind (fun ev -> Option.ofObj ev.target)\r\n    |> Option.map(box >> unbox<Browser.Types.HTMLElement>)\r\n\r\nlet getName (ev:Browser.Types.Event) =\r\n    match getTargetAsHtml ev with\r\n    | Some target ->\r\n        getAttrValue\"data-name\" target\r\n        |> Option.orElseWith (fun () -> getAttrValue \"name\" target)\r\n        |> Option.defaultValue \"\"\r\n    | None -> \"\"\r\n\r\nlet getTargetName title ev =\r\n    try\r\n        let name = getName ev\r\n        Ok name\r\n    with ex ->\r\n        console.error(title + \".getTargetName\")\r\n        Error ex.Message\r\n\r\nlet getTargetValue title (ev:Browser.Types.Event):string option =\r\n    try\r\n        console.log(\"getTargetValue.target\", ev.target)\r\n        let value =\r\n            // https://stackoverflow.com/questions/55093894/how-to-add-the-selected-attribute-to-a-select-option-in-fable\r\n            ev.target?value\r\n            |> Option.ofObj\r\n        value\r\n    with e ->\r\n        console.error(title + \".getTargetValue\",e)\r\n        None\r\n\r\nlet toggleArrayValue (source: _[],target) =\r\n    if source |> FSharp.Collections.Array.contains target then\r\n        source |> FSharp.Collections.Array.filter(fun x -> x <> target)\r\n    else source |> FSharp.Collections.Array.append ([| target |])\r\nlet toggleListValue (source: _ list) target =\r\n    if source |> List.contains target then\r\n        source |> List.filter(fun x -> x <> target)\r\n    else target::source\r\n\r\nlet toggleMapListValue (source: Map<_,_ list>) k v =\r\n    source\r\n    |> Map.tryFind k\r\n    |> function\r\n        | None ->\r\n            source |> Map.add k [v]\r\n        | Some [x] when x = v ->\r\n            source |> Map.remove k\r\n        | Some items when items |> List.contains v ->\r\n            source |> Map.add k (items |> List.filter(fun x -> x = v))\r\n        | Some items ->\r\n            source |> Map.add k (v::items)\r\n\r\n\r\n\r\nlet mapCmd f model cmd =\r\n    model, cmd |> Cmd.map f\r\nlet mapUpdate fModel fMsg model cmd =\r\n    fModel model, cmd |> Cmd.map fMsg","module Index\r\n\r\nopen Elmish\r\n\r\nopen Elmish.React\r\nopen Fable.Core.JsInterop\r\nopen Fable.Import\r\nopen Fable.FontAwesome\r\nopen Fable.React\r\nopen Fable.React.Props\r\nopen Fulma\r\n\r\nopen Shared\r\nopen Shared.Helpers\r\nopen CodeHelpers.FableHelpers\r\n\r\n\r\n// open GrimClickerHelper\r\nopen Components.SharedComponents\r\nopen Components.SharedComponents.TabLink\r\n\r\nlet private debug = false\r\n\r\ntype Component =\r\n    | Summary\r\n\r\n    with\r\n        static member All =\r\n            [\r\n                Summary\r\n            ]\r\n\r\ntype ComponentStates = {\r\n    Summary: Components.Summary.Model\r\n}\r\n\r\ntype State = {\r\n    ActiveTab: Component\r\n    ShowTextMenus: bool\r\n    Theme: string\r\n}\r\n\r\ntype Model = {\r\n    ComponentStates: ComponentStates\r\n    AppState:State\r\n}\r\n\r\n// The Msg type defines what events/actions can occur while the application is running\r\n// the state of the application changes *only* in reaction to these events\r\n\r\ntype ComponentMsg =\r\n    | SumMsg of Components.Summary.Msg\r\n\r\ntype Msg =\r\n    | TabChange of Component\r\n    | ThemeChange of string option\r\n    | TextMenuChange\r\n    | CMsg of ComponentMsg\r\n\r\n// debug section forces local dev code consistentcy across components\r\n#if DEBUG\r\n// model, msg, init, update\r\n[<RequireQualifiedAccess>]\r\ntype InitType<'tState,'tInit,'tMsg> =\r\n    | Value of 'tState*Cmd<'tMsg>\r\n    | Method of ('tInit -> 'tState*Cmd<'tMsg>)\r\n\r\ntype SubComponent<'tProps,'tState,'tMsg, 'tInit> = {\r\n    Wrapper: 'tMsg -> Msg\r\n    Init: InitType<'tState,'tInit,'tMsg>\r\n    View: 'tProps -> 'tState -> ('tMsg -> unit) -> ReactElement\r\n    Update: 'tMsg -> 'tState -> 'tState * Cmd<'tMsg>\r\n}\r\n\r\nlet _subcomponents x =\r\n    match x with\r\n    | Summary _ ->\r\n        {\r\n            Wrapper= SumMsg >> CMsg\r\n            Init= InitType.Method Components.Summary.init\r\n            View= fun _ -> Components.Summary.view // ignore 'props\r\n            Update= Components.Summary.update\r\n        }\r\n        |> ignore\r\n\r\n\r\n#endif\r\n\r\nmodule Storage =\r\n    open BrowserStorage\r\n    let app : StorageAccess<State> =  BrowserStorage.StorageAccess.CreateStorage \"AppState\"\r\n    let sum = BrowserStorage.StorageAccess.CreateStorage \"AppState_Sum\"\r\n\r\nlet init () =\r\n    printfn \"Starting up Index.init\"\r\n    let inline mapCmd title (wrapper: _ -> Msg) (cmd1:Cmd<Msg>) init fOverride : 't * Cmd<Msg> =\r\n        let m,cmd =\r\n            try\r\n                fOverride()\r\n            with ex ->\r\n                eprintfn \"Failed to deserialize for %s: %s\" title ex.Message\r\n                None\r\n            |> init\r\n\r\n        m, cmd |> Cmd.map wrapper |> List.append cmd1\r\n\r\n    let sum, cmd = mapCmd \"SumInit\" (SumMsg>>CMsg) Cmd.none Components.Summary.init Storage.sum.Get\r\n    let app =\r\n        try\r\n        Storage.app.Get()\r\n        |> function\r\n            | Some x -> x\r\n            | None ->\r\n                eprintfn \"init: no stored site\"\r\n                { ActiveTab= Summary; ShowTextMenus= false; Theme= \"\"}\r\n        with ex ->\r\n            eprintfn \"App Init: %s\" ex.Message\r\n            { ActiveTab= Summary; ShowTextMenus= false; Theme= \"\"}\r\n    if debug then Fable.Core.JS.console.log(\"starting up app with state\", Resolver.Serialize app)\r\n\r\n    let model =\r\n        {   AppState = app\r\n            ComponentStates= {\r\n                            Summary = sum\r\n            }\r\n        }\r\n    // Fable.Core.JS.console.log(\"starting up app with comstate\", model.ComponentStates)\r\n    model,cmd\r\n\r\nlet updateC msg cs =\r\n    let inline fRegular fu msg model save fmsg fmodel =\r\n        let next,cmd = fu msg model\r\n        Some next\r\n        |> save\r\n        |> ignore\r\n        fmodel cs next, cmd |> Cmd.map fmsg\r\n\r\n    match msg with\r\n    | SumMsg msg ->\r\n        fRegular Components.Summary.update msg cs.Summary Storage.sum.Save\r\n            SumMsg\r\n            <| fun model next -> {model with Summary= next}\r\n\r\n\r\nlet update (msg:Msg) (model:Model) =\r\n    let lensState f =\r\n        let next = f model.AppState\r\n        Storage.app.Save (Some next)\r\n        |> function\r\n            | Ok () -> ()\r\n            | Error e ->\r\n                eprintfn \"Storage failed\"\r\n        {model with AppState= next}\r\n    match msg with\r\n    | TabChange c ->\r\n        lensState (fun s -> {s with ActiveTab= c}), Cmd.none\r\n    | ThemeChange t ->\r\n        lensState (fun s -> {s with Theme = t |> Option.defaultValue \"\"}), Cmd.none\r\n    | TextMenuChange ->\r\n        lensState (fun s -> {s with ShowTextMenus = not s.ShowTextMenus}), Cmd.none\r\n\r\n    | CMsg msg ->\r\n        let next,cmd = updateC msg model.ComponentStates\r\n        {model with ComponentStates = next},cmd |> Cmd.map CMsg\r\n\r\nimportAll \"./style.scss\"\r\n\r\nlet tabSelector ({AppState={Theme=theme;ActiveTab=at};ComponentStates=cs} as x) (dispatch:ComponentMsg -> unit) =\r\n    try\r\n        match at with\r\n        | Summary -> Components.Summary.view cs.Summary (SumMsg >> dispatch)\r\n        // | Bazaar ->\r\n        //     Components.Bazaar.view {Theme=theme} cs.Bazaar (BazMsg >> dispatch)\r\n    with ex ->\r\n        div [] [\r\n            unbox ex.Message\r\n        ]\r\n\r\nlet view (model : Model) (dispatch : Msg -> unit) =\r\n    printfn \"Starting up Index.view\"\r\n    let tabs =\r\n        Component.All\r\n        |> List.map(fun x ->\r\n            let icon =\r\n                match x with\r\n                | Summary -> Fa.Solid.Brain\r\n                // | Bazaar -> Fa.Solid.DollarSign\r\n                // | Brewing -> Fa.Solid.Flask\r\n                // | Collections -> Fa.Solid.Warehouse\r\n                // | Damage -> Fa.Solid.Biohazard\r\n                // | Enchanting -> Fa.Solid.HatWizard\r\n                // | EventCalc -> Fa.Solid.CalendarAlt\r\n                // | Minions -> Fa.Solid.HardHat\r\n                // | Pets -> Fa.Solid.Bone\r\n\r\n\r\n            {| c= x; icon = icon |}\r\n        )\r\n\r\n    let tabIt (c:Component) (icon:Fa.IconOption) =\r\n        TabLink {Name= string c; Active=Some <| string model.AppState.ActiveTab\r\n                 Title= None; OnClick= fun _ -> TabChange c |> dispatch\r\n                 Children= [\r\n                    Fa.FaIcon List.empty icon\r\n                 ] }\r\n    div []\r\n        [\r\n\r\n            TabContainer None None (\r\n                [\r\n                    yield! tabs\r\n                    |> List.map(fun x ->\r\n                        if model.AppState.ShowTextMenus then\r\n                            TabTextLink (string x.c) (Some <| string model.AppState.ActiveTab) (fun _ -> TabChange x.c |> dispatch)\r\n                        else\r\n                            tabIt x.c (x.icon)\r\n                    )\r\n                    yield li [Class \"select is-pulled-right\"] [\r\n                        select [\r\n                            OnChange (getTargetValue(\"theme select\") >> Msg.ThemeChange >> dispatch)\r\n                            Value model.AppState.Theme\r\n                        ] [\r\n                            option [Value \"\"] [unbox \"Themes...\"]\r\n                            option [Value \"callout\"] [unbox \"Callout\"]\r\n                            option [Value \"text\"] [unbox \"Text\"]\r\n                        ]\r\n                    ]\r\n                    yield li [Class \"m-left\"] [\r\n                        label [Class \"checkbox\"] [\r\n                            input [ Type \"checkbox\"; Checked model.AppState.ShowTextMenus\r\n                                    OnChange (fun _ -> dispatch Msg.TextMenuChange)\r\n                            ]\r\n                            unbox \"Text menus\"\r\n                        ]\r\n                    ]\r\n                ]\r\n            )\r\n\r\n            Container.container [] []\r\n            h2 [Class \"is-size-2 has-text-centered\"] [\r\n                unbox (string model.AppState.ActiveTab)\r\n            ]\r\n            tabSelector model (CMsg >> dispatch)\r\n        ]","module Client\r\n\r\nprintfn \"Starting up Client\"\r\nopen Elmish\r\nopen Elmish.React\r\n\r\n#if DEBUG\r\nopen Elmish.Debug\r\nopen Elmish.HMR\r\n#endif\r\n\r\nProgram.mkProgram Index.init Index.update Index.view\r\n#if DEBUG\r\n|> Program.withConsoleTrace\r\n#endif\r\n|> Program.withReactSynchronous \"elmish-app\"\r\n#if DEBUG\r\n|> Program.withDebugger\r\n#endif\r\n|> Program.run\r\n","module Components.Summary\r\nopen Fable.React\r\nopen Fable.React.Props\r\n\r\nopen Elmish\r\nopen Fulma\r\n\r\nopen Shared\r\nopen Shared.Helpers\r\nopen CodeHelpers.FableHelpers\r\nopen Components.SharedComponents\r\n\r\ntype Model = {\r\n    Str: int\r\n    Dex: int\r\n    Wis: int\r\n    StrDiscount: int\r\n    DexDiscount: int\r\n    WisDiscount: int\r\n}\r\ntype StatChange =\r\n    | StrChange of int\r\n    | DexChange of int\r\n    | WisChange of int\r\n    | StrDiscChange of int\r\n    | DexDiscChange of int\r\n    | WisDiscChange of int\r\n\r\ntype Msg =\r\n    | StatChange of StatChange\r\n\r\n// override allows parent to load from storage old values for example\r\nlet init overrideOpt : Model * Cmd<Msg> =\r\n    overrideOpt\r\n    |> Option.defaultValue {\r\n        Str=0\r\n        Dex=0\r\n        Wis=0\r\n        StrDiscount=0\r\n        DexDiscount=0\r\n        WisDiscount=0\r\n    }, Cmd.none\r\n\r\nlet update msg model : Model * Cmd<Msg> =\r\n    match msg with\r\n    | StatChange v ->\r\n        match v with\r\n        |StrChange v -> {model with Str= v}, Cmd.none\r\n        |DexChange v -> {model with Str= v}, Cmd.none\r\n        |WisChange v -> {model with Str= v}, Cmd.none\r\n        |StrDiscChange v -> {model with StrDiscount= v}, Cmd.none\r\n        |DexDiscChange v -> {model with StrDiscount= v}, Cmd.none\r\n        |WisDiscChange v -> {model with StrDiscount= v}, Cmd.none\r\n\r\nlet view (model: Model) (dispatch : Msg -> unit) =\r\n    div [] []","// This files has been generated using a script do not edit it\n\nnamespace Fable.FontAwesome\n\nopen Fable.Core\n\n[<AutoOpen>]\nmodule Free =\n\n    [<RequireQualifiedAccess>]\n    module Fa =\n\n        module Solid =\n            let inline Ad<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-ad\"\n            let inline AddressBook<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-address-book\"\n            let inline AddressCard<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-address-card\"\n            let inline Adjust<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-adjust\"\n            let inline AirFreshener<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-air-freshener\"\n            let inline AlignCenter<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-align-center\"\n            let inline AlignJustify<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-align-justify\"\n            let inline AlignLeft<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-align-left\"\n            let inline AlignRight<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-align-right\"\n            let inline Allergies<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-allergies\"\n            let inline Ambulance<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-ambulance\"\n            let inline AmericanSignLanguageInterpreting<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-american-sign-language-interpreting\"\n            let inline Anchor<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-anchor\"\n            let inline AngleDoubleDown<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-angle-double-down\"\n            let inline AngleDoubleLeft<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-angle-double-left\"\n            let inline AngleDoubleRight<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-angle-double-right\"\n            let inline AngleDoubleUp<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-angle-double-up\"\n            let inline AngleDown<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-angle-down\"\n            let inline AngleLeft<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-angle-left\"\n            let inline AngleRight<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-angle-right\"\n            let inline AngleUp<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-angle-up\"\n            let inline Angry<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-angry\"\n            let inline Ankh<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-ankh\"\n            let inline AppleAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-apple-alt\"\n            let inline Archive<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-archive\"\n            let inline Archway<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-archway\"\n            let inline ArrowAltCircleDown<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-arrow-alt-circle-down\"\n            let inline ArrowAltCircleLeft<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-arrow-alt-circle-left\"\n            let inline ArrowAltCircleRight<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-arrow-alt-circle-right\"\n            let inline ArrowAltCircleUp<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-arrow-alt-circle-up\"\n            let inline ArrowCircleDown<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-arrow-circle-down\"\n            let inline ArrowCircleLeft<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-arrow-circle-left\"\n            let inline ArrowCircleRight<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-arrow-circle-right\"\n            let inline ArrowCircleUp<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-arrow-circle-up\"\n            let inline ArrowDown<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-arrow-down\"\n            let inline ArrowLeft<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-arrow-left\"\n            let inline ArrowRight<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-arrow-right\"\n            let inline ArrowUp<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-arrow-up\"\n            let inline ArrowsAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-arrows-alt\"\n            let inline ArrowsAltH<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-arrows-alt-h\"\n            let inline ArrowsAltV<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-arrows-alt-v\"\n            let inline AssistiveListeningSystems<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-assistive-listening-systems\"\n            let inline Asterisk<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-asterisk\"\n            let inline At<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-at\"\n            let inline Atlas<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-atlas\"\n            let inline Atom<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-atom\"\n            let inline AudioDescription<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-audio-description\"\n            let inline Award<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-award\"\n            let inline Baby<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-baby\"\n            let inline BabyCarriage<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-baby-carriage\"\n            let inline Backspace<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-backspace\"\n            let inline Backward<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-backward\"\n            let inline Bacon<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-bacon\"\n            let inline Bahai<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-bahai\"\n            let inline BalanceScale<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-balance-scale\"\n            let inline BalanceScaleLeft<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-balance-scale-left\"\n            let inline BalanceScaleRight<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-balance-scale-right\"\n            let inline Ban<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-ban\"\n            let inline BandAid<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-band-aid\"\n            let inline Barcode<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-barcode\"\n            let inline Bars<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-bars\"\n            let inline BaseballBall<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-baseball-ball\"\n            let inline BasketballBall<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-basketball-ball\"\n            let inline Bath<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-bath\"\n            let inline BatteryEmpty<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-battery-empty\"\n            let inline BatteryFull<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-battery-full\"\n            let inline BatteryHalf<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-battery-half\"\n            let inline BatteryQuarter<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-battery-quarter\"\n            let inline BatteryThreeQuarters<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-battery-three-quarters\"\n            let inline Bed<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-bed\"\n            let inline Beer<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-beer\"\n            let inline Bell<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-bell\"\n            let inline BellSlash<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-bell-slash\"\n            let inline BezierCurve<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-bezier-curve\"\n            let inline Bible<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-bible\"\n            let inline Bicycle<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-bicycle\"\n            let inline Biking<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-biking\"\n            let inline Binoculars<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-binoculars\"\n            let inline Biohazard<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-biohazard\"\n            let inline BirthdayCake<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-birthday-cake\"\n            let inline Blender<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-blender\"\n            let inline BlenderPhone<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-blender-phone\"\n            let inline Blind<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-blind\"\n            let inline Blog<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-blog\"\n            let inline Bold<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-bold\"\n            let inline Bolt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-bolt\"\n            let inline Bomb<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-bomb\"\n            let inline Bone<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-bone\"\n            let inline Bong<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-bong\"\n            let inline Book<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-book\"\n            let inline BookDead<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-book-dead\"\n            let inline BookMedical<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-book-medical\"\n            let inline BookOpen<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-book-open\"\n            let inline BookReader<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-book-reader\"\n            let inline Bookmark<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-bookmark\"\n            let inline BorderAll<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-border-all\"\n            let inline BorderNone<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-border-none\"\n            let inline BorderStyle<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-border-style\"\n            let inline BowlingBall<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-bowling-ball\"\n            let inline Box<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-box\"\n            let inline BoxOpen<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-box-open\"\n            let inline Boxes<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-boxes\"\n            let inline Braille<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-braille\"\n            let inline Brain<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-brain\"\n            let inline BreadSlice<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-bread-slice\"\n            let inline Briefcase<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-briefcase\"\n            let inline BriefcaseMedical<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-briefcase-medical\"\n            let inline BroadcastTower<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-broadcast-tower\"\n            let inline Broom<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-broom\"\n            let inline Brush<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-brush\"\n            let inline Bug<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-bug\"\n            let inline Building<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-building\"\n            let inline Bullhorn<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-bullhorn\"\n            let inline Bullseye<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-bullseye\"\n            let inline Burn<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-burn\"\n            let inline Bus<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-bus\"\n            let inline BusAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-bus-alt\"\n            let inline BusinessTime<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-business-time\"\n            let inline Calculator<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-calculator\"\n            let inline Calendar<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-calendar\"\n            let inline CalendarAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-calendar-alt\"\n            let inline CalendarCheck<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-calendar-check\"\n            let inline CalendarDay<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-calendar-day\"\n            let inline CalendarMinus<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-calendar-minus\"\n            let inline CalendarPlus<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-calendar-plus\"\n            let inline CalendarTimes<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-calendar-times\"\n            let inline CalendarWeek<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-calendar-week\"\n            let inline Camera<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-camera\"\n            let inline CameraRetro<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-camera-retro\"\n            let inline Campground<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-campground\"\n            let inline CandyCane<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-candy-cane\"\n            let inline Cannabis<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-cannabis\"\n            let inline Capsules<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-capsules\"\n            let inline Car<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-car\"\n            let inline CarAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-car-alt\"\n            let inline CarBattery<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-car-battery\"\n            let inline CarCrash<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-car-crash\"\n            let inline CarSide<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-car-side\"\n            let inline Caravan<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-caravan\"\n            let inline CaretDown<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-caret-down\"\n            let inline CaretLeft<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-caret-left\"\n            let inline CaretRight<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-caret-right\"\n            let inline CaretSquareDown<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-caret-square-down\"\n            let inline CaretSquareLeft<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-caret-square-left\"\n            let inline CaretSquareRight<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-caret-square-right\"\n            let inline CaretSquareUp<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-caret-square-up\"\n            let inline CaretUp<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-caret-up\"\n            let inline Carrot<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-carrot\"\n            let inline CartArrowDown<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-cart-arrow-down\"\n            let inline CartPlus<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-cart-plus\"\n            let inline CashRegister<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-cash-register\"\n            let inline Cat<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-cat\"\n            let inline Certificate<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-certificate\"\n            let inline Chair<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-chair\"\n            let inline Chalkboard<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-chalkboard\"\n            let inline ChalkboardTeacher<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-chalkboard-teacher\"\n            let inline ChargingStation<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-charging-station\"\n            let inline ChartArea<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-chart-area\"\n            let inline ChartBar<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-chart-bar\"\n            let inline ChartLine<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-chart-line\"\n            let inline ChartPie<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-chart-pie\"\n            let inline Check<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-check\"\n            let inline CheckCircle<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-check-circle\"\n            let inline CheckDouble<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-check-double\"\n            let inline CheckSquare<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-check-square\"\n            let inline Cheese<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-cheese\"\n            let inline Chess<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-chess\"\n            let inline ChessBishop<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-chess-bishop\"\n            let inline ChessBoard<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-chess-board\"\n            let inline ChessKing<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-chess-king\"\n            let inline ChessKnight<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-chess-knight\"\n            let inline ChessPawn<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-chess-pawn\"\n            let inline ChessQueen<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-chess-queen\"\n            let inline ChessRook<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-chess-rook\"\n            let inline ChevronCircleDown<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-chevron-circle-down\"\n            let inline ChevronCircleLeft<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-chevron-circle-left\"\n            let inline ChevronCircleRight<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-chevron-circle-right\"\n            let inline ChevronCircleUp<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-chevron-circle-up\"\n            let inline ChevronDown<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-chevron-down\"\n            let inline ChevronLeft<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-chevron-left\"\n            let inline ChevronRight<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-chevron-right\"\n            let inline ChevronUp<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-chevron-up\"\n            let inline Child<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-child\"\n            let inline Church<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-church\"\n            let inline Circle<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-circle\"\n            let inline CircleNotch<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-circle-notch\"\n            let inline City<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-city\"\n            let inline ClinicMedical<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-clinic-medical\"\n            let inline Clipboard<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-clipboard\"\n            let inline ClipboardCheck<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-clipboard-check\"\n            let inline ClipboardList<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-clipboard-list\"\n            let inline Clock<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-clock\"\n            let inline Clone<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-clone\"\n            let inline ClosedCaptioning<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-closed-captioning\"\n            let inline Cloud<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-cloud\"\n            let inline CloudDownloadAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-cloud-download-alt\"\n            let inline CloudMeatball<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-cloud-meatball\"\n            let inline CloudMoon<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-cloud-moon\"\n            let inline CloudMoonRain<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-cloud-moon-rain\"\n            let inline CloudRain<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-cloud-rain\"\n            let inline CloudShowersHeavy<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-cloud-showers-heavy\"\n            let inline CloudSun<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-cloud-sun\"\n            let inline CloudSunRain<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-cloud-sun-rain\"\n            let inline CloudUploadAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-cloud-upload-alt\"\n            let inline Cocktail<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-cocktail\"\n            let inline Code<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-code\"\n            let inline CodeBranch<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-code-branch\"\n            let inline Coffee<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-coffee\"\n            let inline Cog<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-cog\"\n            let inline Cogs<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-cogs\"\n            let inline Coins<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-coins\"\n            let inline Columns<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-columns\"\n            let inline Comment<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-comment\"\n            let inline CommentAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-comment-alt\"\n            let inline CommentDollar<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-comment-dollar\"\n            let inline CommentDots<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-comment-dots\"\n            let inline CommentMedical<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-comment-medical\"\n            let inline CommentSlash<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-comment-slash\"\n            let inline Comments<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-comments\"\n            let inline CommentsDollar<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-comments-dollar\"\n            let inline CompactDisc<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-compact-disc\"\n            let inline Compass<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-compass\"\n            let inline Compress<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-compress\"\n            let inline CompressAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-compress-alt\"\n            let inline CompressArrowsAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-compress-arrows-alt\"\n            let inline ConciergeBell<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-concierge-bell\"\n            let inline Cookie<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-cookie\"\n            let inline CookieBite<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-cookie-bite\"\n            let inline Copy<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-copy\"\n            let inline Copyright<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-copyright\"\n            let inline Couch<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-couch\"\n            let inline CreditCard<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-credit-card\"\n            let inline Crop<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-crop\"\n            let inline CropAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-crop-alt\"\n            let inline Cross<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-cross\"\n            let inline Crosshairs<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-crosshairs\"\n            let inline Crow<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-crow\"\n            let inline Crown<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-crown\"\n            let inline Crutch<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-crutch\"\n            let inline Cube<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-cube\"\n            let inline Cubes<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-cubes\"\n            let inline Cut<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-cut\"\n            let inline Database<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-database\"\n            let inline Deaf<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-deaf\"\n            let inline Democrat<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-democrat\"\n            let inline Desktop<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-desktop\"\n            let inline Dharmachakra<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-dharmachakra\"\n            let inline Diagnoses<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-diagnoses\"\n            let inline Dice<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-dice\"\n            let inline DiceD20<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-dice-d20\"\n            let inline DiceD6<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-dice-d6\"\n            let inline DiceFive<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-dice-five\"\n            let inline DiceFour<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-dice-four\"\n            let inline DiceOne<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-dice-one\"\n            let inline DiceSix<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-dice-six\"\n            let inline DiceThree<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-dice-three\"\n            let inline DiceTwo<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-dice-two\"\n            let inline DigitalTachograph<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-digital-tachograph\"\n            let inline Directions<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-directions\"\n            let inline Divide<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-divide\"\n            let inline Dizzy<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-dizzy\"\n            let inline Dna<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-dna\"\n            let inline Dog<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-dog\"\n            let inline DollarSign<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-dollar-sign\"\n            let inline Dolly<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-dolly\"\n            let inline DollyFlatbed<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-dolly-flatbed\"\n            let inline Donate<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-donate\"\n            let inline DoorClosed<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-door-closed\"\n            let inline DoorOpen<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-door-open\"\n            let inline DotCircle<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-dot-circle\"\n            let inline Dove<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-dove\"\n            let inline Download<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-download\"\n            let inline DraftingCompass<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-drafting-compass\"\n            let inline Dragon<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-dragon\"\n            let inline DrawPolygon<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-draw-polygon\"\n            let inline Drum<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-drum\"\n            let inline DrumSteelpan<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-drum-steelpan\"\n            let inline DrumstickBite<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-drumstick-bite\"\n            let inline Dumbbell<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-dumbbell\"\n            let inline Dumpster<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-dumpster\"\n            let inline DumpsterFire<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-dumpster-fire\"\n            let inline Dungeon<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-dungeon\"\n            let inline Edit<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-edit\"\n            let inline Egg<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-egg\"\n            let inline Eject<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-eject\"\n            let inline EllipsisH<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-ellipsis-h\"\n            let inline EllipsisV<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-ellipsis-v\"\n            let inline Envelope<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-envelope\"\n            let inline EnvelopeOpen<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-envelope-open\"\n            let inline EnvelopeOpenText<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-envelope-open-text\"\n            let inline EnvelopeSquare<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-envelope-square\"\n            let inline Equals<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-equals\"\n            let inline Eraser<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-eraser\"\n            let inline Ethernet<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-ethernet\"\n            let inline EuroSign<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-euro-sign\"\n            let inline ExchangeAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-exchange-alt\"\n            let inline Exclamation<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-exclamation\"\n            let inline ExclamationCircle<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-exclamation-circle\"\n            let inline ExclamationTriangle<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-exclamation-triangle\"\n            let inline Expand<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-expand\"\n            let inline ExpandAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-expand-alt\"\n            let inline ExpandArrowsAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-expand-arrows-alt\"\n            let inline ExternalLinkAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-external-link-alt\"\n            let inline ExternalLinkSquareAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-external-link-square-alt\"\n            let inline Eye<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-eye\"\n            let inline EyeDropper<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-eye-dropper\"\n            let inline EyeSlash<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-eye-slash\"\n            let inline Fan<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-fan\"\n            let inline FastBackward<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-fast-backward\"\n            let inline FastForward<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-fast-forward\"\n            let inline Fax<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-fax\"\n            let inline Feather<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-feather\"\n            let inline FeatherAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-feather-alt\"\n            let inline Female<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-female\"\n            let inline FighterJet<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-fighter-jet\"\n            let inline File<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-file\"\n            let inline FileAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-file-alt\"\n            let inline FileArchive<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-file-archive\"\n            let inline FileAudio<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-file-audio\"\n            let inline FileCode<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-file-code\"\n            let inline FileContract<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-file-contract\"\n            let inline FileCsv<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-file-csv\"\n            let inline FileDownload<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-file-download\"\n            let inline FileExcel<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-file-excel\"\n            let inline FileExport<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-file-export\"\n            let inline FileImage<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-file-image\"\n            let inline FileImport<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-file-import\"\n            let inline FileInvoice<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-file-invoice\"\n            let inline FileInvoiceDollar<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-file-invoice-dollar\"\n            let inline FileMedical<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-file-medical\"\n            let inline FileMedicalAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-file-medical-alt\"\n            let inline FilePdf<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-file-pdf\"\n            let inline FilePowerpoint<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-file-powerpoint\"\n            let inline FilePrescription<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-file-prescription\"\n            let inline FileSignature<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-file-signature\"\n            let inline FileUpload<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-file-upload\"\n            let inline FileVideo<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-file-video\"\n            let inline FileWord<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-file-word\"\n            let inline Fill<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-fill\"\n            let inline FillDrip<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-fill-drip\"\n            let inline Film<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-film\"\n            let inline Filter<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-filter\"\n            let inline Fingerprint<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-fingerprint\"\n            let inline Fire<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-fire\"\n            let inline FireAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-fire-alt\"\n            let inline FireExtinguisher<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-fire-extinguisher\"\n            let inline FirstAid<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-first-aid\"\n            let inline Fish<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-fish\"\n            let inline FistRaised<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-fist-raised\"\n            let inline Flag<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-flag\"\n            let inline FlagCheckered<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-flag-checkered\"\n            let inline FlagUsa<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-flag-usa\"\n            let inline Flask<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-flask\"\n            let inline Flushed<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-flushed\"\n            let inline Folder<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-folder\"\n            let inline FolderMinus<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-folder-minus\"\n            let inline FolderOpen<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-folder-open\"\n            let inline FolderPlus<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-folder-plus\"\n            let inline Font<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-font\"\n            let inline FootballBall<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-football-ball\"\n            let inline Forward<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-forward\"\n            let inline Frog<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-frog\"\n            let inline Frown<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-frown\"\n            let inline FrownOpen<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-frown-open\"\n            let inline FunnelDollar<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-funnel-dollar\"\n            let inline Futbol<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-futbol\"\n            let inline Gamepad<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-gamepad\"\n            let inline GasPump<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-gas-pump\"\n            let inline Gavel<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-gavel\"\n            let inline Gem<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-gem\"\n            let inline Genderless<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-genderless\"\n            let inline Ghost<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-ghost\"\n            let inline Gift<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-gift\"\n            let inline Gifts<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-gifts\"\n            let inline GlassCheers<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-glass-cheers\"\n            let inline GlassMartini<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-glass-martini\"\n            let inline GlassMartiniAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-glass-martini-alt\"\n            let inline GlassWhiskey<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-glass-whiskey\"\n            let inline Glasses<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-glasses\"\n            let inline Globe<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-globe\"\n            let inline GlobeAfrica<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-globe-africa\"\n            let inline GlobeAmericas<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-globe-americas\"\n            let inline GlobeAsia<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-globe-asia\"\n            let inline GlobeEurope<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-globe-europe\"\n            let inline GolfBall<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-golf-ball\"\n            let inline Gopuram<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-gopuram\"\n            let inline GraduationCap<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-graduation-cap\"\n            let inline GreaterThan<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-greater-than\"\n            let inline GreaterThanEqual<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-greater-than-equal\"\n            let inline Grimace<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-grimace\"\n            let inline Grin<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-grin\"\n            let inline GrinAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-grin-alt\"\n            let inline GrinBeam<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-grin-beam\"\n            let inline GrinBeamSweat<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-grin-beam-sweat\"\n            let inline GrinHearts<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-grin-hearts\"\n            let inline GrinSquint<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-grin-squint\"\n            let inline GrinSquintTears<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-grin-squint-tears\"\n            let inline GrinStars<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-grin-stars\"\n            let inline GrinTears<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-grin-tears\"\n            let inline GrinTongue<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-grin-tongue\"\n            let inline GrinTongueSquint<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-grin-tongue-squint\"\n            let inline GrinTongueWink<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-grin-tongue-wink\"\n            let inline GrinWink<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-grin-wink\"\n            let inline GripHorizontal<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-grip-horizontal\"\n            let inline GripLines<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-grip-lines\"\n            let inline GripLinesVertical<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-grip-lines-vertical\"\n            let inline GripVertical<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-grip-vertical\"\n            let inline Guitar<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-guitar\"\n            let inline HSquare<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-h-square\"\n            let inline Hamburger<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hamburger\"\n            let inline Hammer<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hammer\"\n            let inline Hamsa<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hamsa\"\n            let inline HandHolding<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hand-holding\"\n            let inline HandHoldingHeart<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hand-holding-heart\"\n            let inline HandHoldingUsd<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hand-holding-usd\"\n            let inline HandLizard<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hand-lizard\"\n            let inline HandMiddleFinger<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hand-middle-finger\"\n            let inline HandPaper<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hand-paper\"\n            let inline HandPeace<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hand-peace\"\n            let inline HandPointDown<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hand-point-down\"\n            let inline HandPointLeft<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hand-point-left\"\n            let inline HandPointRight<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hand-point-right\"\n            let inline HandPointUp<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hand-point-up\"\n            let inline HandPointer<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hand-pointer\"\n            let inline HandRock<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hand-rock\"\n            let inline HandScissors<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hand-scissors\"\n            let inline HandSpock<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hand-spock\"\n            let inline Hands<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hands\"\n            let inline HandsHelping<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hands-helping\"\n            let inline Handshake<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-handshake\"\n            let inline Hanukiah<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hanukiah\"\n            let inline HardHat<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hard-hat\"\n            let inline Hashtag<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hashtag\"\n            let inline HatCowboy<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hat-cowboy\"\n            let inline HatCowboySide<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hat-cowboy-side\"\n            let inline HatWizard<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hat-wizard\"\n            let inline Hdd<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hdd\"\n            let inline Heading<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-heading\"\n            let inline Headphones<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-headphones\"\n            let inline HeadphonesAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-headphones-alt\"\n            let inline Headset<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-headset\"\n            let inline Heart<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-heart\"\n            let inline HeartBroken<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-heart-broken\"\n            let inline Heartbeat<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-heartbeat\"\n            let inline Helicopter<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-helicopter\"\n            let inline Highlighter<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-highlighter\"\n            let inline Hiking<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hiking\"\n            let inline Hippo<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hippo\"\n            let inline History<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-history\"\n            let inline HockeyPuck<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hockey-puck\"\n            let inline HollyBerry<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-holly-berry\"\n            let inline Home<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-home\"\n            let inline Horse<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-horse\"\n            let inline HorseHead<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-horse-head\"\n            let inline Hospital<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hospital\"\n            let inline HospitalAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hospital-alt\"\n            let inline HospitalSymbol<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hospital-symbol\"\n            let inline HotTub<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hot-tub\"\n            let inline Hotdog<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hotdog\"\n            let inline Hotel<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hotel\"\n            let inline Hourglass<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hourglass\"\n            let inline HourglassEnd<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hourglass-end\"\n            let inline HourglassHalf<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hourglass-half\"\n            let inline HourglassStart<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hourglass-start\"\n            let inline HouseDamage<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-house-damage\"\n            let inline Hryvnia<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-hryvnia\"\n            let inline ICursor<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-i-cursor\"\n            let inline IceCream<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-ice-cream\"\n            let inline Icicles<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-icicles\"\n            let inline Icons<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-icons\"\n            let inline IdBadge<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-id-badge\"\n            let inline IdCard<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-id-card\"\n            let inline IdCardAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-id-card-alt\"\n            let inline Igloo<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-igloo\"\n            let inline Image<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-image\"\n            let inline Images<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-images\"\n            let inline Inbox<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-inbox\"\n            let inline Indent<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-indent\"\n            let inline Industry<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-industry\"\n            let inline Infinity<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-infinity\"\n            let inline Info<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-info\"\n            let inline InfoCircle<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-info-circle\"\n            let inline Italic<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-italic\"\n            let inline Jedi<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-jedi\"\n            let inline Joint<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-joint\"\n            let inline JournalWhills<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-journal-whills\"\n            let inline Kaaba<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-kaaba\"\n            let inline Key<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-key\"\n            let inline Keyboard<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-keyboard\"\n            let inline Khanda<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-khanda\"\n            let inline Kiss<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-kiss\"\n            let inline KissBeam<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-kiss-beam\"\n            let inline KissWinkHeart<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-kiss-wink-heart\"\n            let inline KiwiBird<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-kiwi-bird\"\n            let inline Landmark<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-landmark\"\n            let inline Language<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-language\"\n            let inline Laptop<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-laptop\"\n            let inline LaptopCode<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-laptop-code\"\n            let inline LaptopMedical<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-laptop-medical\"\n            let inline Laugh<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-laugh\"\n            let inline LaughBeam<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-laugh-beam\"\n            let inline LaughSquint<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-laugh-squint\"\n            let inline LaughWink<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-laugh-wink\"\n            let inline LayerGroup<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-layer-group\"\n            let inline Leaf<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-leaf\"\n            let inline Lemon<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-lemon\"\n            let inline LessThan<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-less-than\"\n            let inline LessThanEqual<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-less-than-equal\"\n            let inline LevelDownAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-level-down-alt\"\n            let inline LevelUpAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-level-up-alt\"\n            let inline LifeRing<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-life-ring\"\n            let inline Lightbulb<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-lightbulb\"\n            let inline Link<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-link\"\n            let inline LiraSign<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-lira-sign\"\n            let inline List<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-list\"\n            let inline ListAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-list-alt\"\n            let inline ListOl<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-list-ol\"\n            let inline ListUl<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-list-ul\"\n            let inline LocationArrow<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-location-arrow\"\n            let inline Lock<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-lock\"\n            let inline LockOpen<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-lock-open\"\n            let inline LongArrowAltDown<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-long-arrow-alt-down\"\n            let inline LongArrowAltLeft<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-long-arrow-alt-left\"\n            let inline LongArrowAltRight<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-long-arrow-alt-right\"\n            let inline LongArrowAltUp<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-long-arrow-alt-up\"\n            let inline LowVision<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-low-vision\"\n            let inline LuggageCart<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-luggage-cart\"\n            let inline Magic<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-magic\"\n            let inline Magnet<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-magnet\"\n            let inline MailBulk<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-mail-bulk\"\n            let inline Male<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-male\"\n            let inline Map<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-map\"\n            let inline MapMarked<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-map-marked\"\n            let inline MapMarkedAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-map-marked-alt\"\n            let inline MapMarker<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-map-marker\"\n            let inline MapMarkerAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-map-marker-alt\"\n            let inline MapPin<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-map-pin\"\n            let inline MapSigns<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-map-signs\"\n            let inline Marker<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-marker\"\n            let inline Mars<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-mars\"\n            let inline MarsDouble<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-mars-double\"\n            let inline MarsStroke<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-mars-stroke\"\n            let inline MarsStrokeH<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-mars-stroke-h\"\n            let inline MarsStrokeV<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-mars-stroke-v\"\n            let inline Mask<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-mask\"\n            let inline Medal<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-medal\"\n            let inline Medkit<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-medkit\"\n            let inline Meh<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-meh\"\n            let inline MehBlank<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-meh-blank\"\n            let inline MehRollingEyes<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-meh-rolling-eyes\"\n            let inline Memory<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-memory\"\n            let inline Menorah<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-menorah\"\n            let inline Mercury<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-mercury\"\n            let inline Meteor<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-meteor\"\n            let inline Microchip<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-microchip\"\n            let inline Microphone<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-microphone\"\n            let inline MicrophoneAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-microphone-alt\"\n            let inline MicrophoneAltSlash<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-microphone-alt-slash\"\n            let inline MicrophoneSlash<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-microphone-slash\"\n            let inline Microscope<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-microscope\"\n            let inline Minus<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-minus\"\n            let inline MinusCircle<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-minus-circle\"\n            let inline MinusSquare<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-minus-square\"\n            let inline Mitten<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-mitten\"\n            let inline Mobile<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-mobile\"\n            let inline MobileAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-mobile-alt\"\n            let inline MoneyBill<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-money-bill\"\n            let inline MoneyBillAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-money-bill-alt\"\n            let inline MoneyBillWave<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-money-bill-wave\"\n            let inline MoneyBillWaveAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-money-bill-wave-alt\"\n            let inline MoneyCheck<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-money-check\"\n            let inline MoneyCheckAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-money-check-alt\"\n            let inline Monument<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-monument\"\n            let inline Moon<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-moon\"\n            let inline MortarPestle<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-mortar-pestle\"\n            let inline Mosque<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-mosque\"\n            let inline Motorcycle<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-motorcycle\"\n            let inline Mountain<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-mountain\"\n            let inline Mouse<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-mouse\"\n            let inline MousePointer<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-mouse-pointer\"\n            let inline MugHot<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-mug-hot\"\n            let inline Music<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-music\"\n            let inline NetworkWired<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-network-wired\"\n            let inline Neuter<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-neuter\"\n            let inline Newspaper<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-newspaper\"\n            let inline NotEqual<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-not-equal\"\n            let inline NotesMedical<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-notes-medical\"\n            let inline ObjectGroup<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-object-group\"\n            let inline ObjectUngroup<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-object-ungroup\"\n            let inline OilCan<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-oil-can\"\n            let inline Om<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-om\"\n            let inline Otter<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-otter\"\n            let inline Outdent<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-outdent\"\n            let inline Pager<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-pager\"\n            let inline PaintBrush<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-paint-brush\"\n            let inline PaintRoller<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-paint-roller\"\n            let inline Palette<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-palette\"\n            let inline Pallet<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-pallet\"\n            let inline PaperPlane<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-paper-plane\"\n            let inline Paperclip<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-paperclip\"\n            let inline ParachuteBox<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-parachute-box\"\n            let inline Paragraph<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-paragraph\"\n            let inline Parking<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-parking\"\n            let inline Passport<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-passport\"\n            let inline Pastafarianism<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-pastafarianism\"\n            let inline Paste<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-paste\"\n            let inline Pause<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-pause\"\n            let inline PauseCircle<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-pause-circle\"\n            let inline Paw<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-paw\"\n            let inline Peace<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-peace\"\n            let inline Pen<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-pen\"\n            let inline PenAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-pen-alt\"\n            let inline PenFancy<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-pen-fancy\"\n            let inline PenNib<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-pen-nib\"\n            let inline PenSquare<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-pen-square\"\n            let inline PencilAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-pencil-alt\"\n            let inline PencilRuler<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-pencil-ruler\"\n            let inline PeopleCarry<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-people-carry\"\n            let inline PepperHot<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-pepper-hot\"\n            let inline Percent<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-percent\"\n            let inline Percentage<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-percentage\"\n            let inline PersonBooth<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-person-booth\"\n            let inline Phone<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-phone\"\n            let inline PhoneAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-phone-alt\"\n            let inline PhoneSlash<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-phone-slash\"\n            let inline PhoneSquare<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-phone-square\"\n            let inline PhoneSquareAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-phone-square-alt\"\n            let inline PhoneVolume<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-phone-volume\"\n            let inline PhotoVideo<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-photo-video\"\n            let inline PiggyBank<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-piggy-bank\"\n            let inline Pills<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-pills\"\n            let inline PizzaSlice<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-pizza-slice\"\n            let inline PlaceOfWorship<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-place-of-worship\"\n            let inline Plane<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-plane\"\n            let inline PlaneArrival<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-plane-arrival\"\n            let inline PlaneDeparture<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-plane-departure\"\n            let inline Play<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-play\"\n            let inline PlayCircle<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-play-circle\"\n            let inline Plug<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-plug\"\n            let inline Plus<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-plus\"\n            let inline PlusCircle<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-plus-circle\"\n            let inline PlusSquare<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-plus-square\"\n            let inline Podcast<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-podcast\"\n            let inline Poll<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-poll\"\n            let inline PollH<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-poll-h\"\n            let inline Poo<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-poo\"\n            let inline PooStorm<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-poo-storm\"\n            let inline Poop<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-poop\"\n            let inline Portrait<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-portrait\"\n            let inline PoundSign<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-pound-sign\"\n            let inline PowerOff<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-power-off\"\n            let inline Pray<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-pray\"\n            let inline PrayingHands<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-praying-hands\"\n            let inline Prescription<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-prescription\"\n            let inline PrescriptionBottle<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-prescription-bottle\"\n            let inline PrescriptionBottleAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-prescription-bottle-alt\"\n            let inline Print<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-print\"\n            let inline Procedures<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-procedures\"\n            let inline ProjectDiagram<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-project-diagram\"\n            let inline PuzzlePiece<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-puzzle-piece\"\n            let inline Qrcode<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-qrcode\"\n            let inline Question<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-question\"\n            let inline QuestionCircle<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-question-circle\"\n            let inline Quidditch<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-quidditch\"\n            let inline QuoteLeft<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-quote-left\"\n            let inline QuoteRight<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-quote-right\"\n            let inline Quran<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-quran\"\n            let inline Radiation<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-radiation\"\n            let inline RadiationAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-radiation-alt\"\n            let inline Rainbow<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-rainbow\"\n            let inline Random<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-random\"\n            let inline Receipt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-receipt\"\n            let inline RecordVinyl<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-record-vinyl\"\n            let inline Recycle<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-recycle\"\n            let inline Redo<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-redo\"\n            let inline RedoAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-redo-alt\"\n            let inline Registered<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-registered\"\n            let inline RemoveFormat<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-remove-format\"\n            let inline Reply<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-reply\"\n            let inline ReplyAll<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-reply-all\"\n            let inline Republican<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-republican\"\n            let inline Restroom<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-restroom\"\n            let inline Retweet<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-retweet\"\n            let inline Ribbon<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-ribbon\"\n            let inline Ring<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-ring\"\n            let inline Road<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-road\"\n            let inline Robot<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-robot\"\n            let inline Rocket<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-rocket\"\n            let inline Route<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-route\"\n            let inline Rss<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-rss\"\n            let inline RssSquare<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-rss-square\"\n            let inline RubleSign<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-ruble-sign\"\n            let inline Ruler<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-ruler\"\n            let inline RulerCombined<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-ruler-combined\"\n            let inline RulerHorizontal<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-ruler-horizontal\"\n            let inline RulerVertical<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-ruler-vertical\"\n            let inline Running<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-running\"\n            let inline RupeeSign<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-rupee-sign\"\n            let inline SadCry<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-sad-cry\"\n            let inline SadTear<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-sad-tear\"\n            let inline Satellite<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-satellite\"\n            let inline SatelliteDish<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-satellite-dish\"\n            let inline Save<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-save\"\n            let inline School<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-school\"\n            let inline Screwdriver<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-screwdriver\"\n            let inline Scroll<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-scroll\"\n            let inline SdCard<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-sd-card\"\n            let inline Search<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-search\"\n            let inline SearchDollar<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-search-dollar\"\n            let inline SearchLocation<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-search-location\"\n            let inline SearchMinus<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-search-minus\"\n            let inline SearchPlus<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-search-plus\"\n            let inline Seedling<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-seedling\"\n            let inline Server<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-server\"\n            let inline Shapes<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-shapes\"\n            let inline Share<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-share\"\n            let inline ShareAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-share-alt\"\n            let inline ShareAltSquare<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-share-alt-square\"\n            let inline ShareSquare<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-share-square\"\n            let inline ShekelSign<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-shekel-sign\"\n            let inline ShieldAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-shield-alt\"\n            let inline Ship<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-ship\"\n            let inline ShippingFast<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-shipping-fast\"\n            let inline ShoePrints<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-shoe-prints\"\n            let inline ShoppingBag<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-shopping-bag\"\n            let inline ShoppingBasket<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-shopping-basket\"\n            let inline ShoppingCart<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-shopping-cart\"\n            let inline Shower<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-shower\"\n            let inline ShuttleVan<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-shuttle-van\"\n            let inline Sign<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-sign\"\n            let inline SignInAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-sign-in-alt\"\n            let inline SignLanguage<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-sign-language\"\n            let inline SignOutAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-sign-out-alt\"\n            let inline Signal<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-signal\"\n            let inline Signature<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-signature\"\n            let inline SimCard<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-sim-card\"\n            let inline Sitemap<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-sitemap\"\n            let inline Skating<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-skating\"\n            let inline Skiing<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-skiing\"\n            let inline SkiingNordic<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-skiing-nordic\"\n            let inline Skull<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-skull\"\n            let inline SkullCrossbones<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-skull-crossbones\"\n            let inline Slash<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-slash\"\n            let inline Sleigh<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-sleigh\"\n            let inline SlidersH<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-sliders-h\"\n            let inline Smile<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-smile\"\n            let inline SmileBeam<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-smile-beam\"\n            let inline SmileWink<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-smile-wink\"\n            let inline Smog<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-smog\"\n            let inline Smoking<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-smoking\"\n            let inline SmokingBan<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-smoking-ban\"\n            let inline Sms<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-sms\"\n            let inline Snowboarding<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-snowboarding\"\n            let inline Snowflake<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-snowflake\"\n            let inline Snowman<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-snowman\"\n            let inline Snowplow<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-snowplow\"\n            let inline Socks<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-socks\"\n            let inline SolarPanel<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-solar-panel\"\n            let inline Sort<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-sort\"\n            let inline SortAlphaDown<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-sort-alpha-down\"\n            let inline SortAlphaDownAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-sort-alpha-down-alt\"\n            let inline SortAlphaUp<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-sort-alpha-up\"\n            let inline SortAlphaUpAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-sort-alpha-up-alt\"\n            let inline SortAmountDown<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-sort-amount-down\"\n            let inline SortAmountDownAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-sort-amount-down-alt\"\n            let inline SortAmountUp<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-sort-amount-up\"\n            let inline SortAmountUpAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-sort-amount-up-alt\"\n            let inline SortDown<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-sort-down\"\n            let inline SortNumericDown<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-sort-numeric-down\"\n            let inline SortNumericDownAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-sort-numeric-down-alt\"\n            let inline SortNumericUp<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-sort-numeric-up\"\n            let inline SortNumericUpAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-sort-numeric-up-alt\"\n            let inline SortUp<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-sort-up\"\n            let inline Spa<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-spa\"\n            let inline SpaceShuttle<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-space-shuttle\"\n            let inline SpellCheck<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-spell-check\"\n            let inline Spider<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-spider\"\n            let inline Spinner<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-spinner\"\n            let inline Splotch<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-splotch\"\n            let inline SprayCan<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-spray-can\"\n            let inline Square<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-square\"\n            let inline SquareFull<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-square-full\"\n            let inline SquareRootAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-square-root-alt\"\n            let inline Stamp<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-stamp\"\n            let inline Star<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-star\"\n            let inline StarAndCrescent<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-star-and-crescent\"\n            let inline StarHalf<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-star-half\"\n            let inline StarHalfAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-star-half-alt\"\n            let inline StarOfDavid<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-star-of-david\"\n            let inline StarOfLife<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-star-of-life\"\n            let inline StepBackward<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-step-backward\"\n            let inline StepForward<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-step-forward\"\n            let inline Stethoscope<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-stethoscope\"\n            let inline StickyNote<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-sticky-note\"\n            let inline Stop<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-stop\"\n            let inline StopCircle<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-stop-circle\"\n            let inline Stopwatch<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-stopwatch\"\n            let inline Store<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-store\"\n            let inline StoreAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-store-alt\"\n            let inline Stream<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-stream\"\n            let inline StreetView<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-street-view\"\n            let inline Strikethrough<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-strikethrough\"\n            let inline Stroopwafel<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-stroopwafel\"\n            let inline Subscript<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-subscript\"\n            let inline Subway<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-subway\"\n            let inline Suitcase<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-suitcase\"\n            let inline SuitcaseRolling<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-suitcase-rolling\"\n            let inline Sun<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-sun\"\n            let inline Superscript<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-superscript\"\n            let inline Surprise<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-surprise\"\n            let inline Swatchbook<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-swatchbook\"\n            let inline Swimmer<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-swimmer\"\n            let inline SwimmingPool<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-swimming-pool\"\n            let inline Synagogue<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-synagogue\"\n            let inline Sync<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-sync\"\n            let inline SyncAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-sync-alt\"\n            let inline Syringe<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-syringe\"\n            let inline Table<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-table\"\n            let inline TableTennis<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-table-tennis\"\n            let inline Tablet<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-tablet\"\n            let inline TabletAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-tablet-alt\"\n            let inline Tablets<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-tablets\"\n            let inline TachometerAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-tachometer-alt\"\n            let inline Tag<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-tag\"\n            let inline Tags<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-tags\"\n            let inline Tape<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-tape\"\n            let inline Tasks<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-tasks\"\n            let inline Taxi<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-taxi\"\n            let inline Teeth<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-teeth\"\n            let inline TeethOpen<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-teeth-open\"\n            let inline TemperatureHigh<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-temperature-high\"\n            let inline TemperatureLow<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-temperature-low\"\n            let inline Tenge<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-tenge\"\n            let inline Terminal<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-terminal\"\n            let inline TextHeight<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-text-height\"\n            let inline TextWidth<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-text-width\"\n            let inline Th<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-th\"\n            let inline ThLarge<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-th-large\"\n            let inline ThList<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-th-list\"\n            let inline TheaterMasks<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-theater-masks\"\n            let inline Thermometer<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-thermometer\"\n            let inline ThermometerEmpty<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-thermometer-empty\"\n            let inline ThermometerFull<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-thermometer-full\"\n            let inline ThermometerHalf<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-thermometer-half\"\n            let inline ThermometerQuarter<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-thermometer-quarter\"\n            let inline ThermometerThreeQuarters<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-thermometer-three-quarters\"\n            let inline ThumbsDown<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-thumbs-down\"\n            let inline ThumbsUp<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-thumbs-up\"\n            let inline Thumbtack<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-thumbtack\"\n            let inline TicketAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-ticket-alt\"\n            let inline Times<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-times\"\n            let inline TimesCircle<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-times-circle\"\n            let inline Tint<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-tint\"\n            let inline TintSlash<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-tint-slash\"\n            let inline Tired<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-tired\"\n            let inline ToggleOff<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-toggle-off\"\n            let inline ToggleOn<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-toggle-on\"\n            let inline Toilet<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-toilet\"\n            let inline ToiletPaper<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-toilet-paper\"\n            let inline Toolbox<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-toolbox\"\n            let inline Tools<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-tools\"\n            let inline Tooth<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-tooth\"\n            let inline Torah<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-torah\"\n            let inline ToriiGate<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-torii-gate\"\n            let inline Tractor<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-tractor\"\n            let inline Trademark<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-trademark\"\n            let inline TrafficLight<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-traffic-light\"\n            let inline Trailer<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-trailer\"\n            let inline Train<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-train\"\n            let inline Tram<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-tram\"\n            let inline Transgender<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-transgender\"\n            let inline TransgenderAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-transgender-alt\"\n            let inline Trash<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-trash\"\n            let inline TrashAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-trash-alt\"\n            let inline TrashRestore<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-trash-restore\"\n            let inline TrashRestoreAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-trash-restore-alt\"\n            let inline Tree<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-tree\"\n            let inline Trophy<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-trophy\"\n            let inline Truck<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-truck\"\n            let inline TruckLoading<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-truck-loading\"\n            let inline TruckMonster<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-truck-monster\"\n            let inline TruckMoving<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-truck-moving\"\n            let inline TruckPickup<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-truck-pickup\"\n            let inline Tshirt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-tshirt\"\n            let inline Tty<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-tty\"\n            let inline Tv<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-tv\"\n            let inline Umbrella<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-umbrella\"\n            let inline UmbrellaBeach<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-umbrella-beach\"\n            let inline Underline<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-underline\"\n            let inline Undo<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-undo\"\n            let inline UndoAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-undo-alt\"\n            let inline UniversalAccess<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-universal-access\"\n            let inline University<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-university\"\n            let inline Unlink<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-unlink\"\n            let inline Unlock<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-unlock\"\n            let inline UnlockAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-unlock-alt\"\n            let inline Upload<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-upload\"\n            let inline User<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-user\"\n            let inline UserAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-user-alt\"\n            let inline UserAltSlash<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-user-alt-slash\"\n            let inline UserAstronaut<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-user-astronaut\"\n            let inline UserCheck<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-user-check\"\n            let inline UserCircle<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-user-circle\"\n            let inline UserClock<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-user-clock\"\n            let inline UserCog<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-user-cog\"\n            let inline UserEdit<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-user-edit\"\n            let inline UserFriends<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-user-friends\"\n            let inline UserGraduate<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-user-graduate\"\n            let inline UserInjured<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-user-injured\"\n            let inline UserLock<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-user-lock\"\n            let inline UserMd<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-user-md\"\n            let inline UserMinus<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-user-minus\"\n            let inline UserNinja<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-user-ninja\"\n            let inline UserNurse<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-user-nurse\"\n            let inline UserPlus<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-user-plus\"\n            let inline UserSecret<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-user-secret\"\n            let inline UserShield<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-user-shield\"\n            let inline UserSlash<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-user-slash\"\n            let inline UserTag<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-user-tag\"\n            let inline UserTie<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-user-tie\"\n            let inline UserTimes<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-user-times\"\n            let inline Users<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-users\"\n            let inline UsersCog<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-users-cog\"\n            let inline UtensilSpoon<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-utensil-spoon\"\n            let inline Utensils<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-utensils\"\n            let inline VectorSquare<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-vector-square\"\n            let inline Venus<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-venus\"\n            let inline VenusDouble<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-venus-double\"\n            let inline VenusMars<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-venus-mars\"\n            let inline Vial<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-vial\"\n            let inline Vials<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-vials\"\n            let inline Video<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-video\"\n            let inline VideoSlash<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-video-slash\"\n            let inline Vihara<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-vihara\"\n            let inline Voicemail<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-voicemail\"\n            let inline VolleyballBall<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-volleyball-ball\"\n            let inline VolumeDown<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-volume-down\"\n            let inline VolumeMute<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-volume-mute\"\n            let inline VolumeOff<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-volume-off\"\n            let inline VolumeUp<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-volume-up\"\n            let inline VoteYea<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-vote-yea\"\n            let inline VrCardboard<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-vr-cardboard\"\n            let inline Walking<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-walking\"\n            let inline Wallet<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-wallet\"\n            let inline Warehouse<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-warehouse\"\n            let inline Water<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-water\"\n            let inline WaveSquare<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-wave-square\"\n            let inline Weight<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-weight\"\n            let inline WeightHanging<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-weight-hanging\"\n            let inline Wheelchair<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-wheelchair\"\n            let inline Wifi<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-wifi\"\n            let inline Wind<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-wind\"\n            let inline WindowClose<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-window-close\"\n            let inline WindowMaximize<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-window-maximize\"\n            let inline WindowMinimize<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-window-minimize\"\n            let inline WindowRestore<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-window-restore\"\n            let inline WineBottle<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-wine-bottle\"\n            let inline WineGlass<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-wine-glass\"\n            let inline WineGlassAlt<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-wine-glass-alt\"\n            let inline WonSign<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-won-sign\"\n            let inline Wrench<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-wrench\"\n            let inline XRay<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-x-ray\"\n            let inline YenSign<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-yen-sign\"\n            let inline YinYang<'a> = Fable.FontAwesome.Fa.Icon \"fas fa-yin-yang\"\n\n        module Regular =\n            let inline AddressBook<'a> = Fable.FontAwesome.Fa.Icon \"far fa-address-book\"\n            let inline AddressCard<'a> = Fable.FontAwesome.Fa.Icon \"far fa-address-card\"\n            let inline Angry<'a> = Fable.FontAwesome.Fa.Icon \"far fa-angry\"\n            let inline ArrowAltCircleDown<'a> = Fable.FontAwesome.Fa.Icon \"far fa-arrow-alt-circle-down\"\n            let inline ArrowAltCircleLeft<'a> = Fable.FontAwesome.Fa.Icon \"far fa-arrow-alt-circle-left\"\n            let inline ArrowAltCircleRight<'a> = Fable.FontAwesome.Fa.Icon \"far fa-arrow-alt-circle-right\"\n            let inline ArrowAltCircleUp<'a> = Fable.FontAwesome.Fa.Icon \"far fa-arrow-alt-circle-up\"\n            let inline Bell<'a> = Fable.FontAwesome.Fa.Icon \"far fa-bell\"\n            let inline BellSlash<'a> = Fable.FontAwesome.Fa.Icon \"far fa-bell-slash\"\n            let inline Bookmark<'a> = Fable.FontAwesome.Fa.Icon \"far fa-bookmark\"\n            let inline Building<'a> = Fable.FontAwesome.Fa.Icon \"far fa-building\"\n            let inline Calendar<'a> = Fable.FontAwesome.Fa.Icon \"far fa-calendar\"\n            let inline CalendarAlt<'a> = Fable.FontAwesome.Fa.Icon \"far fa-calendar-alt\"\n            let inline CalendarCheck<'a> = Fable.FontAwesome.Fa.Icon \"far fa-calendar-check\"\n            let inline CalendarMinus<'a> = Fable.FontAwesome.Fa.Icon \"far fa-calendar-minus\"\n            let inline CalendarPlus<'a> = Fable.FontAwesome.Fa.Icon \"far fa-calendar-plus\"\n            let inline CalendarTimes<'a> = Fable.FontAwesome.Fa.Icon \"far fa-calendar-times\"\n            let inline CaretSquareDown<'a> = Fable.FontAwesome.Fa.Icon \"far fa-caret-square-down\"\n            let inline CaretSquareLeft<'a> = Fable.FontAwesome.Fa.Icon \"far fa-caret-square-left\"\n            let inline CaretSquareRight<'a> = Fable.FontAwesome.Fa.Icon \"far fa-caret-square-right\"\n            let inline CaretSquareUp<'a> = Fable.FontAwesome.Fa.Icon \"far fa-caret-square-up\"\n            let inline ChartBar<'a> = Fable.FontAwesome.Fa.Icon \"far fa-chart-bar\"\n            let inline CheckCircle<'a> = Fable.FontAwesome.Fa.Icon \"far fa-check-circle\"\n            let inline CheckSquare<'a> = Fable.FontAwesome.Fa.Icon \"far fa-check-square\"\n            let inline Circle<'a> = Fable.FontAwesome.Fa.Icon \"far fa-circle\"\n            let inline Clipboard<'a> = Fable.FontAwesome.Fa.Icon \"far fa-clipboard\"\n            let inline Clock<'a> = Fable.FontAwesome.Fa.Icon \"far fa-clock\"\n            let inline Clone<'a> = Fable.FontAwesome.Fa.Icon \"far fa-clone\"\n            let inline ClosedCaptioning<'a> = Fable.FontAwesome.Fa.Icon \"far fa-closed-captioning\"\n            let inline Comment<'a> = Fable.FontAwesome.Fa.Icon \"far fa-comment\"\n            let inline CommentAlt<'a> = Fable.FontAwesome.Fa.Icon \"far fa-comment-alt\"\n            let inline CommentDots<'a> = Fable.FontAwesome.Fa.Icon \"far fa-comment-dots\"\n            let inline Comments<'a> = Fable.FontAwesome.Fa.Icon \"far fa-comments\"\n            let inline Compass<'a> = Fable.FontAwesome.Fa.Icon \"far fa-compass\"\n            let inline Copy<'a> = Fable.FontAwesome.Fa.Icon \"far fa-copy\"\n            let inline Copyright<'a> = Fable.FontAwesome.Fa.Icon \"far fa-copyright\"\n            let inline CreditCard<'a> = Fable.FontAwesome.Fa.Icon \"far fa-credit-card\"\n            let inline Dizzy<'a> = Fable.FontAwesome.Fa.Icon \"far fa-dizzy\"\n            let inline DotCircle<'a> = Fable.FontAwesome.Fa.Icon \"far fa-dot-circle\"\n            let inline Edit<'a> = Fable.FontAwesome.Fa.Icon \"far fa-edit\"\n            let inline Envelope<'a> = Fable.FontAwesome.Fa.Icon \"far fa-envelope\"\n            let inline EnvelopeOpen<'a> = Fable.FontAwesome.Fa.Icon \"far fa-envelope-open\"\n            let inline Eye<'a> = Fable.FontAwesome.Fa.Icon \"far fa-eye\"\n            let inline EyeSlash<'a> = Fable.FontAwesome.Fa.Icon \"far fa-eye-slash\"\n            let inline File<'a> = Fable.FontAwesome.Fa.Icon \"far fa-file\"\n            let inline FileAlt<'a> = Fable.FontAwesome.Fa.Icon \"far fa-file-alt\"\n            let inline FileArchive<'a> = Fable.FontAwesome.Fa.Icon \"far fa-file-archive\"\n            let inline FileAudio<'a> = Fable.FontAwesome.Fa.Icon \"far fa-file-audio\"\n            let inline FileCode<'a> = Fable.FontAwesome.Fa.Icon \"far fa-file-code\"\n            let inline FileExcel<'a> = Fable.FontAwesome.Fa.Icon \"far fa-file-excel\"\n            let inline FileImage<'a> = Fable.FontAwesome.Fa.Icon \"far fa-file-image\"\n            let inline FilePdf<'a> = Fable.FontAwesome.Fa.Icon \"far fa-file-pdf\"\n            let inline FilePowerpoint<'a> = Fable.FontAwesome.Fa.Icon \"far fa-file-powerpoint\"\n            let inline FileVideo<'a> = Fable.FontAwesome.Fa.Icon \"far fa-file-video\"\n            let inline FileWord<'a> = Fable.FontAwesome.Fa.Icon \"far fa-file-word\"\n            let inline Flag<'a> = Fable.FontAwesome.Fa.Icon \"far fa-flag\"\n            let inline Flushed<'a> = Fable.FontAwesome.Fa.Icon \"far fa-flushed\"\n            let inline Folder<'a> = Fable.FontAwesome.Fa.Icon \"far fa-folder\"\n            let inline FolderOpen<'a> = Fable.FontAwesome.Fa.Icon \"far fa-folder-open\"\n            let inline Frown<'a> = Fable.FontAwesome.Fa.Icon \"far fa-frown\"\n            let inline FrownOpen<'a> = Fable.FontAwesome.Fa.Icon \"far fa-frown-open\"\n            let inline Futbol<'a> = Fable.FontAwesome.Fa.Icon \"far fa-futbol\"\n            let inline Gem<'a> = Fable.FontAwesome.Fa.Icon \"far fa-gem\"\n            let inline Grimace<'a> = Fable.FontAwesome.Fa.Icon \"far fa-grimace\"\n            let inline Grin<'a> = Fable.FontAwesome.Fa.Icon \"far fa-grin\"\n            let inline GrinAlt<'a> = Fable.FontAwesome.Fa.Icon \"far fa-grin-alt\"\n            let inline GrinBeam<'a> = Fable.FontAwesome.Fa.Icon \"far fa-grin-beam\"\n            let inline GrinBeamSweat<'a> = Fable.FontAwesome.Fa.Icon \"far fa-grin-beam-sweat\"\n            let inline GrinHearts<'a> = Fable.FontAwesome.Fa.Icon \"far fa-grin-hearts\"\n            let inline GrinSquint<'a> = Fable.FontAwesome.Fa.Icon \"far fa-grin-squint\"\n            let inline GrinSquintTears<'a> = Fable.FontAwesome.Fa.Icon \"far fa-grin-squint-tears\"\n            let inline GrinStars<'a> = Fable.FontAwesome.Fa.Icon \"far fa-grin-stars\"\n            let inline GrinTears<'a> = Fable.FontAwesome.Fa.Icon \"far fa-grin-tears\"\n            let inline GrinTongue<'a> = Fable.FontAwesome.Fa.Icon \"far fa-grin-tongue\"\n            let inline GrinTongueSquint<'a> = Fable.FontAwesome.Fa.Icon \"far fa-grin-tongue-squint\"\n            let inline GrinTongueWink<'a> = Fable.FontAwesome.Fa.Icon \"far fa-grin-tongue-wink\"\n            let inline GrinWink<'a> = Fable.FontAwesome.Fa.Icon \"far fa-grin-wink\"\n            let inline HandLizard<'a> = Fable.FontAwesome.Fa.Icon \"far fa-hand-lizard\"\n            let inline HandPaper<'a> = Fable.FontAwesome.Fa.Icon \"far fa-hand-paper\"\n            let inline HandPeace<'a> = Fable.FontAwesome.Fa.Icon \"far fa-hand-peace\"\n            let inline HandPointDown<'a> = Fable.FontAwesome.Fa.Icon \"far fa-hand-point-down\"\n            let inline HandPointLeft<'a> = Fable.FontAwesome.Fa.Icon \"far fa-hand-point-left\"\n            let inline HandPointRight<'a> = Fable.FontAwesome.Fa.Icon \"far fa-hand-point-right\"\n            let inline HandPointUp<'a> = Fable.FontAwesome.Fa.Icon \"far fa-hand-point-up\"\n            let inline HandPointer<'a> = Fable.FontAwesome.Fa.Icon \"far fa-hand-pointer\"\n            let inline HandRock<'a> = Fable.FontAwesome.Fa.Icon \"far fa-hand-rock\"\n            let inline HandScissors<'a> = Fable.FontAwesome.Fa.Icon \"far fa-hand-scissors\"\n            let inline HandSpock<'a> = Fable.FontAwesome.Fa.Icon \"far fa-hand-spock\"\n            let inline Handshake<'a> = Fable.FontAwesome.Fa.Icon \"far fa-handshake\"\n            let inline Hdd<'a> = Fable.FontAwesome.Fa.Icon \"far fa-hdd\"\n            let inline Heart<'a> = Fable.FontAwesome.Fa.Icon \"far fa-heart\"\n            let inline Hospital<'a> = Fable.FontAwesome.Fa.Icon \"far fa-hospital\"\n            let inline Hourglass<'a> = Fable.FontAwesome.Fa.Icon \"far fa-hourglass\"\n            let inline IdBadge<'a> = Fable.FontAwesome.Fa.Icon \"far fa-id-badge\"\n            let inline IdCard<'a> = Fable.FontAwesome.Fa.Icon \"far fa-id-card\"\n            let inline Image<'a> = Fable.FontAwesome.Fa.Icon \"far fa-image\"\n            let inline Images<'a> = Fable.FontAwesome.Fa.Icon \"far fa-images\"\n            let inline Keyboard<'a> = Fable.FontAwesome.Fa.Icon \"far fa-keyboard\"\n            let inline Kiss<'a> = Fable.FontAwesome.Fa.Icon \"far fa-kiss\"\n            let inline KissBeam<'a> = Fable.FontAwesome.Fa.Icon \"far fa-kiss-beam\"\n            let inline KissWinkHeart<'a> = Fable.FontAwesome.Fa.Icon \"far fa-kiss-wink-heart\"\n            let inline Laugh<'a> = Fable.FontAwesome.Fa.Icon \"far fa-laugh\"\n            let inline LaughBeam<'a> = Fable.FontAwesome.Fa.Icon \"far fa-laugh-beam\"\n            let inline LaughSquint<'a> = Fable.FontAwesome.Fa.Icon \"far fa-laugh-squint\"\n            let inline LaughWink<'a> = Fable.FontAwesome.Fa.Icon \"far fa-laugh-wink\"\n            let inline Lemon<'a> = Fable.FontAwesome.Fa.Icon \"far fa-lemon\"\n            let inline LifeRing<'a> = Fable.FontAwesome.Fa.Icon \"far fa-life-ring\"\n            let inline Lightbulb<'a> = Fable.FontAwesome.Fa.Icon \"far fa-lightbulb\"\n            let inline ListAlt<'a> = Fable.FontAwesome.Fa.Icon \"far fa-list-alt\"\n            let inline Map<'a> = Fable.FontAwesome.Fa.Icon \"far fa-map\"\n            let inline Meh<'a> = Fable.FontAwesome.Fa.Icon \"far fa-meh\"\n            let inline MehBlank<'a> = Fable.FontAwesome.Fa.Icon \"far fa-meh-blank\"\n            let inline MehRollingEyes<'a> = Fable.FontAwesome.Fa.Icon \"far fa-meh-rolling-eyes\"\n            let inline MinusSquare<'a> = Fable.FontAwesome.Fa.Icon \"far fa-minus-square\"\n            let inline MoneyBillAlt<'a> = Fable.FontAwesome.Fa.Icon \"far fa-money-bill-alt\"\n            let inline Moon<'a> = Fable.FontAwesome.Fa.Icon \"far fa-moon\"\n            let inline Newspaper<'a> = Fable.FontAwesome.Fa.Icon \"far fa-newspaper\"\n            let inline ObjectGroup<'a> = Fable.FontAwesome.Fa.Icon \"far fa-object-group\"\n            let inline ObjectUngroup<'a> = Fable.FontAwesome.Fa.Icon \"far fa-object-ungroup\"\n            let inline PaperPlane<'a> = Fable.FontAwesome.Fa.Icon \"far fa-paper-plane\"\n            let inline PauseCircle<'a> = Fable.FontAwesome.Fa.Icon \"far fa-pause-circle\"\n            let inline PlayCircle<'a> = Fable.FontAwesome.Fa.Icon \"far fa-play-circle\"\n            let inline PlusSquare<'a> = Fable.FontAwesome.Fa.Icon \"far fa-plus-square\"\n            let inline QuestionCircle<'a> = Fable.FontAwesome.Fa.Icon \"far fa-question-circle\"\n            let inline Registered<'a> = Fable.FontAwesome.Fa.Icon \"far fa-registered\"\n            let inline SadCry<'a> = Fable.FontAwesome.Fa.Icon \"far fa-sad-cry\"\n            let inline SadTear<'a> = Fable.FontAwesome.Fa.Icon \"far fa-sad-tear\"\n            let inline Save<'a> = Fable.FontAwesome.Fa.Icon \"far fa-save\"\n            let inline ShareSquare<'a> = Fable.FontAwesome.Fa.Icon \"far fa-share-square\"\n            let inline Smile<'a> = Fable.FontAwesome.Fa.Icon \"far fa-smile\"\n            let inline SmileBeam<'a> = Fable.FontAwesome.Fa.Icon \"far fa-smile-beam\"\n            let inline SmileWink<'a> = Fable.FontAwesome.Fa.Icon \"far fa-smile-wink\"\n            let inline Snowflake<'a> = Fable.FontAwesome.Fa.Icon \"far fa-snowflake\"\n            let inline Square<'a> = Fable.FontAwesome.Fa.Icon \"far fa-square\"\n            let inline Star<'a> = Fable.FontAwesome.Fa.Icon \"far fa-star\"\n            let inline StarHalf<'a> = Fable.FontAwesome.Fa.Icon \"far fa-star-half\"\n            let inline StickyNote<'a> = Fable.FontAwesome.Fa.Icon \"far fa-sticky-note\"\n            let inline StopCircle<'a> = Fable.FontAwesome.Fa.Icon \"far fa-stop-circle\"\n            let inline Sun<'a> = Fable.FontAwesome.Fa.Icon \"far fa-sun\"\n            let inline Surprise<'a> = Fable.FontAwesome.Fa.Icon \"far fa-surprise\"\n            let inline ThumbsDown<'a> = Fable.FontAwesome.Fa.Icon \"far fa-thumbs-down\"\n            let inline ThumbsUp<'a> = Fable.FontAwesome.Fa.Icon \"far fa-thumbs-up\"\n            let inline TimesCircle<'a> = Fable.FontAwesome.Fa.Icon \"far fa-times-circle\"\n            let inline Tired<'a> = Fable.FontAwesome.Fa.Icon \"far fa-tired\"\n            let inline TrashAlt<'a> = Fable.FontAwesome.Fa.Icon \"far fa-trash-alt\"\n            let inline User<'a> = Fable.FontAwesome.Fa.Icon \"far fa-user\"\n            let inline UserCircle<'a> = Fable.FontAwesome.Fa.Icon \"far fa-user-circle\"\n            let inline WindowClose<'a> = Fable.FontAwesome.Fa.Icon \"far fa-window-close\"\n            let inline WindowMaximize<'a> = Fable.FontAwesome.Fa.Icon \"far fa-window-maximize\"\n            let inline WindowMinimize<'a> = Fable.FontAwesome.Fa.Icon \"far fa-window-minimize\"\n            let inline WindowRestore<'a> = Fable.FontAwesome.Fa.Icon \"far fa-window-restore\"\n\n        module Brand =\n            let inline ``500px``<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-500px\"\n            let inline AccessibleIcon<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-accessible-icon\"\n            let inline Accusoft<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-accusoft\"\n            let inline AcquisitionsIncorporated<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-acquisitions-incorporated\"\n            let inline Adn<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-adn\"\n            let inline Adobe<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-adobe\"\n            let inline Adversal<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-adversal\"\n            let inline Affiliatetheme<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-affiliatetheme\"\n            let inline Airbnb<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-airbnb\"\n            let inline Algolia<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-algolia\"\n            let inline Alipay<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-alipay\"\n            let inline Amazon<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-amazon\"\n            let inline AmazonPay<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-amazon-pay\"\n            let inline Amilia<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-amilia\"\n            let inline Android<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-android\"\n            let inline Angellist<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-angellist\"\n            let inline Angrycreative<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-angrycreative\"\n            let inline Angular<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-angular\"\n            let inline AppStore<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-app-store\"\n            let inline AppStoreIos<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-app-store-ios\"\n            let inline Apper<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-apper\"\n            let inline Apple<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-apple\"\n            let inline ApplePay<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-apple-pay\"\n            let inline Artstation<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-artstation\"\n            let inline Asymmetrik<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-asymmetrik\"\n            let inline Atlassian<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-atlassian\"\n            let inline Audible<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-audible\"\n            let inline Autoprefixer<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-autoprefixer\"\n            let inline Avianex<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-avianex\"\n            let inline Aviato<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-aviato\"\n            let inline Aws<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-aws\"\n            let inline Bandcamp<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-bandcamp\"\n            let inline BattleNet<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-battle-net\"\n            let inline Behance<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-behance\"\n            let inline BehanceSquare<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-behance-square\"\n            let inline Bimobject<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-bimobject\"\n            let inline Bitbucket<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-bitbucket\"\n            let inline Bitcoin<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-bitcoin\"\n            let inline Bity<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-bity\"\n            let inline BlackTie<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-black-tie\"\n            let inline Blackberry<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-blackberry\"\n            let inline Blogger<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-blogger\"\n            let inline BloggerB<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-blogger-b\"\n            let inline Bluetooth<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-bluetooth\"\n            let inline BluetoothB<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-bluetooth-b\"\n            let inline Bootstrap<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-bootstrap\"\n            let inline Btc<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-btc\"\n            let inline Buffer<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-buffer\"\n            let inline Buromobelexperte<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-buromobelexperte\"\n            let inline BuyNLarge<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-buy-n-large\"\n            let inline Buysellads<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-buysellads\"\n            let inline CanadianMapleLeaf<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-canadian-maple-leaf\"\n            let inline CcAmazonPay<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-cc-amazon-pay\"\n            let inline CcAmex<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-cc-amex\"\n            let inline CcApplePay<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-cc-apple-pay\"\n            let inline CcDinersClub<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-cc-diners-club\"\n            let inline CcDiscover<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-cc-discover\"\n            let inline CcJcb<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-cc-jcb\"\n            let inline CcMastercard<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-cc-mastercard\"\n            let inline CcPaypal<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-cc-paypal\"\n            let inline CcStripe<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-cc-stripe\"\n            let inline CcVisa<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-cc-visa\"\n            let inline Centercode<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-centercode\"\n            let inline Centos<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-centos\"\n            let inline Chrome<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-chrome\"\n            let inline Chromecast<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-chromecast\"\n            let inline Cloudscale<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-cloudscale\"\n            let inline Cloudsmith<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-cloudsmith\"\n            let inline Cloudversify<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-cloudversify\"\n            let inline Codepen<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-codepen\"\n            let inline Codiepie<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-codiepie\"\n            let inline Confluence<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-confluence\"\n            let inline Connectdevelop<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-connectdevelop\"\n            let inline Contao<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-contao\"\n            let inline CottonBureau<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-cotton-bureau\"\n            let inline Cpanel<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-cpanel\"\n            let inline CreativeCommons<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-creative-commons\"\n            let inline CreativeCommonsBy<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-creative-commons-by\"\n            let inline CreativeCommonsNc<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-creative-commons-nc\"\n            let inline CreativeCommonsNcEu<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-creative-commons-nc-eu\"\n            let inline CreativeCommonsNcJp<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-creative-commons-nc-jp\"\n            let inline CreativeCommonsNd<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-creative-commons-nd\"\n            let inline CreativeCommonsPd<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-creative-commons-pd\"\n            let inline CreativeCommonsPdAlt<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-creative-commons-pd-alt\"\n            let inline CreativeCommonsRemix<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-creative-commons-remix\"\n            let inline CreativeCommonsSa<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-creative-commons-sa\"\n            let inline CreativeCommonsSampling<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-creative-commons-sampling\"\n            let inline CreativeCommonsSamplingPlus<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-creative-commons-sampling-plus\"\n            let inline CreativeCommonsShare<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-creative-commons-share\"\n            let inline CreativeCommonsZero<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-creative-commons-zero\"\n            let inline CriticalRole<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-critical-role\"\n            let inline Css3<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-css3\"\n            let inline Css3Alt<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-css3-alt\"\n            let inline Cuttlefish<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-cuttlefish\"\n            let inline DAndD<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-d-and-d\"\n            let inline DAndDBeyond<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-d-and-d-beyond\"\n            let inline Dailymotion<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-dailymotion\"\n            let inline Dashcube<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-dashcube\"\n            let inline Delicious<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-delicious\"\n            let inline Deploydog<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-deploydog\"\n            let inline Deskpro<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-deskpro\"\n            let inline Dev<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-dev\"\n            let inline Deviantart<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-deviantart\"\n            let inline Dhl<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-dhl\"\n            let inline Diaspora<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-diaspora\"\n            let inline Digg<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-digg\"\n            let inline DigitalOcean<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-digital-ocean\"\n            let inline Discord<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-discord\"\n            let inline Discourse<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-discourse\"\n            let inline Dochub<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-dochub\"\n            let inline Docker<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-docker\"\n            let inline Draft2digital<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-draft2digital\"\n            let inline Dribbble<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-dribbble\"\n            let inline DribbbleSquare<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-dribbble-square\"\n            let inline Dropbox<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-dropbox\"\n            let inline Drupal<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-drupal\"\n            let inline Dyalog<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-dyalog\"\n            let inline Earlybirds<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-earlybirds\"\n            let inline Ebay<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-ebay\"\n            let inline Edge<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-edge\"\n            let inline Elementor<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-elementor\"\n            let inline Ello<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-ello\"\n            let inline Ember<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-ember\"\n            let inline Empire<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-empire\"\n            let inline Envira<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-envira\"\n            let inline Erlang<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-erlang\"\n            let inline Ethereum<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-ethereum\"\n            let inline Etsy<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-etsy\"\n            let inline Evernote<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-evernote\"\n            let inline Expeditedssl<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-expeditedssl\"\n            let inline Facebook<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-facebook\"\n            let inline FacebookF<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-facebook-f\"\n            let inline FacebookMessenger<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-facebook-messenger\"\n            let inline FacebookSquare<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-facebook-square\"\n            let inline FantasyFlightGames<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-fantasy-flight-games\"\n            let inline Fedex<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-fedex\"\n            let inline Fedora<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-fedora\"\n            let inline Figma<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-figma\"\n            let inline Firefox<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-firefox\"\n            let inline FirefoxBrowser<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-firefox-browser\"\n            let inline FirstOrder<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-first-order\"\n            let inline FirstOrderAlt<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-first-order-alt\"\n            let inline Firstdraft<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-firstdraft\"\n            let inline Flickr<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-flickr\"\n            let inline Flipboard<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-flipboard\"\n            let inline Fly<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-fly\"\n            let inline FontAwesome<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-font-awesome\"\n            let inline FontAwesomeAlt<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-font-awesome-alt\"\n            let inline FontAwesomeFlag<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-font-awesome-flag\"\n            let inline Fonticons<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-fonticons\"\n            let inline FonticonsFi<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-fonticons-fi\"\n            let inline FortAwesome<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-fort-awesome\"\n            let inline FortAwesomeAlt<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-fort-awesome-alt\"\n            let inline Forumbee<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-forumbee\"\n            let inline Foursquare<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-foursquare\"\n            let inline FreeCodeCamp<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-free-code-camp\"\n            let inline Freebsd<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-freebsd\"\n            let inline Fulcrum<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-fulcrum\"\n            let inline GalacticRepublic<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-galactic-republic\"\n            let inline GalacticSenate<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-galactic-senate\"\n            let inline GetPocket<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-get-pocket\"\n            let inline Gg<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-gg\"\n            let inline GgCircle<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-gg-circle\"\n            let inline Git<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-git\"\n            let inline GitAlt<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-git-alt\"\n            let inline GitSquare<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-git-square\"\n            let inline Github<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-github\"\n            let inline GithubAlt<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-github-alt\"\n            let inline GithubSquare<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-github-square\"\n            let inline Gitkraken<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-gitkraken\"\n            let inline Gitlab<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-gitlab\"\n            let inline Gitter<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-gitter\"\n            let inline Glide<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-glide\"\n            let inline GlideG<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-glide-g\"\n            let inline Gofore<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-gofore\"\n            let inline Goodreads<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-goodreads\"\n            let inline GoodreadsG<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-goodreads-g\"\n            let inline Google<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-google\"\n            let inline GoogleDrive<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-google-drive\"\n            let inline GooglePlay<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-google-play\"\n            let inline GooglePlus<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-google-plus\"\n            let inline GooglePlusG<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-google-plus-g\"\n            let inline GooglePlusSquare<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-google-plus-square\"\n            let inline GoogleWallet<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-google-wallet\"\n            let inline Gratipay<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-gratipay\"\n            let inline Grav<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-grav\"\n            let inline Gripfire<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-gripfire\"\n            let inline Grunt<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-grunt\"\n            let inline Gulp<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-gulp\"\n            let inline HackerNews<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-hacker-news\"\n            let inline HackerNewsSquare<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-hacker-news-square\"\n            let inline Hackerrank<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-hackerrank\"\n            let inline Hips<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-hips\"\n            let inline HireAHelper<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-hire-a-helper\"\n            let inline Hooli<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-hooli\"\n            let inline Hornbill<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-hornbill\"\n            let inline Hotjar<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-hotjar\"\n            let inline Houzz<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-houzz\"\n            let inline Html5<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-html5\"\n            let inline Hubspot<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-hubspot\"\n            let inline Ideal<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-ideal\"\n            let inline Imdb<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-imdb\"\n            let inline Instagram<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-instagram\"\n            let inline InstagramSquare<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-instagram-square\"\n            let inline Intercom<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-intercom\"\n            let inline InternetExplorer<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-internet-explorer\"\n            let inline Invision<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-invision\"\n            let inline Ioxhost<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-ioxhost\"\n            let inline ItchIo<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-itch-io\"\n            let inline Itunes<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-itunes\"\n            let inline ItunesNote<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-itunes-note\"\n            let inline Java<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-java\"\n            let inline JediOrder<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-jedi-order\"\n            let inline Jenkins<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-jenkins\"\n            let inline Jira<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-jira\"\n            let inline Joget<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-joget\"\n            let inline Joomla<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-joomla\"\n            let inline Js<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-js\"\n            let inline JsSquare<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-js-square\"\n            let inline Jsfiddle<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-jsfiddle\"\n            let inline Kaggle<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-kaggle\"\n            let inline Keybase<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-keybase\"\n            let inline Keycdn<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-keycdn\"\n            let inline Kickstarter<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-kickstarter\"\n            let inline KickstarterK<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-kickstarter-k\"\n            let inline Korvue<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-korvue\"\n            let inline Laravel<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-laravel\"\n            let inline Lastfm<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-lastfm\"\n            let inline LastfmSquare<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-lastfm-square\"\n            let inline Leanpub<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-leanpub\"\n            let inline Less<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-less\"\n            let inline Line<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-line\"\n            let inline Linkedin<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-linkedin\"\n            let inline LinkedinIn<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-linkedin-in\"\n            let inline Linode<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-linode\"\n            let inline Linux<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-linux\"\n            let inline Lyft<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-lyft\"\n            let inline Magento<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-magento\"\n            let inline Mailchimp<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-mailchimp\"\n            let inline Mandalorian<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-mandalorian\"\n            let inline Markdown<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-markdown\"\n            let inline Mastodon<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-mastodon\"\n            let inline Maxcdn<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-maxcdn\"\n            let inline Mdb<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-mdb\"\n            let inline Medapps<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-medapps\"\n            let inline Medium<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-medium\"\n            let inline MediumM<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-medium-m\"\n            let inline Medrt<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-medrt\"\n            let inline Meetup<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-meetup\"\n            let inline Megaport<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-megaport\"\n            let inline Mendeley<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-mendeley\"\n            let inline Microblog<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-microblog\"\n            let inline Microsoft<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-microsoft\"\n            let inline Mix<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-mix\"\n            let inline Mixcloud<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-mixcloud\"\n            let inline Mixer<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-mixer\"\n            let inline Mizuni<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-mizuni\"\n            let inline Modx<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-modx\"\n            let inline Monero<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-monero\"\n            let inline Napster<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-napster\"\n            let inline Neos<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-neos\"\n            let inline Nimblr<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-nimblr\"\n            let inline Node<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-node\"\n            let inline NodeJs<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-node-js\"\n            let inline Npm<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-npm\"\n            let inline Ns8<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-ns8\"\n            let inline Nutritionix<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-nutritionix\"\n            let inline Odnoklassniki<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-odnoklassniki\"\n            let inline OdnoklassnikiSquare<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-odnoklassniki-square\"\n            let inline OldRepublic<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-old-republic\"\n            let inline Opencart<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-opencart\"\n            let inline Openid<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-openid\"\n            let inline Opera<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-opera\"\n            let inline OptinMonster<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-optin-monster\"\n            let inline Orcid<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-orcid\"\n            let inline Osi<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-osi\"\n            let inline Page4<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-page4\"\n            let inline Pagelines<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-pagelines\"\n            let inline Palfed<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-palfed\"\n            let inline Patreon<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-patreon\"\n            let inline Paypal<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-paypal\"\n            let inline PennyArcade<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-penny-arcade\"\n            let inline Periscope<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-periscope\"\n            let inline Phabricator<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-phabricator\"\n            let inline PhoenixFramework<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-phoenix-framework\"\n            let inline PhoenixSquadron<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-phoenix-squadron\"\n            let inline Php<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-php\"\n            let inline PiedPiper<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-pied-piper\"\n            let inline PiedPiperAlt<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-pied-piper-alt\"\n            let inline PiedPiperHat<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-pied-piper-hat\"\n            let inline PiedPiperPp<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-pied-piper-pp\"\n            let inline PiedPiperSquare<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-pied-piper-square\"\n            let inline Pinterest<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-pinterest\"\n            let inline PinterestP<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-pinterest-p\"\n            let inline PinterestSquare<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-pinterest-square\"\n            let inline Playstation<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-playstation\"\n            let inline ProductHunt<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-product-hunt\"\n            let inline Pushed<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-pushed\"\n            let inline Python<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-python\"\n            let inline Qq<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-qq\"\n            let inline Quinscape<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-quinscape\"\n            let inline Quora<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-quora\"\n            let inline RProject<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-r-project\"\n            let inline RaspberryPi<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-raspberry-pi\"\n            let inline Ravelry<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-ravelry\"\n            let inline React<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-react\"\n            let inline Reacteurope<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-reacteurope\"\n            let inline Readme<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-readme\"\n            let inline Rebel<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-rebel\"\n            let inline RedRiver<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-red-river\"\n            let inline Reddit<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-reddit\"\n            let inline RedditAlien<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-reddit-alien\"\n            let inline RedditSquare<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-reddit-square\"\n            let inline Redhat<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-redhat\"\n            let inline Renren<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-renren\"\n            let inline Replyd<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-replyd\"\n            let inline Researchgate<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-researchgate\"\n            let inline Resolving<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-resolving\"\n            let inline Rev<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-rev\"\n            let inline Rocketchat<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-rocketchat\"\n            let inline Rockrms<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-rockrms\"\n            let inline Safari<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-safari\"\n            let inline Salesforce<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-salesforce\"\n            let inline Sass<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-sass\"\n            let inline Schlix<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-schlix\"\n            let inline Scribd<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-scribd\"\n            let inline Searchengin<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-searchengin\"\n            let inline Sellcast<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-sellcast\"\n            let inline Sellsy<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-sellsy\"\n            let inline Servicestack<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-servicestack\"\n            let inline Shirtsinbulk<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-shirtsinbulk\"\n            let inline Shopify<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-shopify\"\n            let inline Shopware<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-shopware\"\n            let inline Simplybuilt<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-simplybuilt\"\n            let inline Sistrix<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-sistrix\"\n            let inline Sith<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-sith\"\n            let inline Sketch<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-sketch\"\n            let inline Skyatlas<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-skyatlas\"\n            let inline Skype<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-skype\"\n            let inline Slack<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-slack\"\n            let inline SlackHash<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-slack-hash\"\n            let inline Slideshare<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-slideshare\"\n            let inline Snapchat<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-snapchat\"\n            let inline SnapchatGhost<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-snapchat-ghost\"\n            let inline SnapchatSquare<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-snapchat-square\"\n            let inline Soundcloud<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-soundcloud\"\n            let inline Sourcetree<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-sourcetree\"\n            let inline Speakap<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-speakap\"\n            let inline SpeakerDeck<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-speaker-deck\"\n            let inline Spotify<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-spotify\"\n            let inline Squarespace<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-squarespace\"\n            let inline StackExchange<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-stack-exchange\"\n            let inline StackOverflow<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-stack-overflow\"\n            let inline Stackpath<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-stackpath\"\n            let inline Staylinked<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-staylinked\"\n            let inline Steam<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-steam\"\n            let inline SteamSquare<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-steam-square\"\n            let inline SteamSymbol<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-steam-symbol\"\n            let inline StickerMule<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-sticker-mule\"\n            let inline Strava<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-strava\"\n            let inline Stripe<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-stripe\"\n            let inline StripeS<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-stripe-s\"\n            let inline Studiovinari<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-studiovinari\"\n            let inline Stumbleupon<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-stumbleupon\"\n            let inline StumbleuponCircle<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-stumbleupon-circle\"\n            let inline Superpowers<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-superpowers\"\n            let inline Supple<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-supple\"\n            let inline Suse<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-suse\"\n            let inline Swift<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-swift\"\n            let inline Symfony<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-symfony\"\n            let inline Teamspeak<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-teamspeak\"\n            let inline Telegram<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-telegram\"\n            let inline TelegramPlane<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-telegram-plane\"\n            let inline TencentWeibo<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-tencent-weibo\"\n            let inline TheRedYeti<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-the-red-yeti\"\n            let inline Themeco<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-themeco\"\n            let inline Themeisle<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-themeisle\"\n            let inline ThinkPeaks<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-think-peaks\"\n            let inline TradeFederation<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-trade-federation\"\n            let inline Trello<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-trello\"\n            let inline Tripadvisor<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-tripadvisor\"\n            let inline Tumblr<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-tumblr\"\n            let inline TumblrSquare<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-tumblr-square\"\n            let inline Twitch<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-twitch\"\n            let inline Twitter<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-twitter\"\n            let inline TwitterSquare<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-twitter-square\"\n            let inline Typo3<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-typo3\"\n            let inline Uber<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-uber\"\n            let inline Ubuntu<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-ubuntu\"\n            let inline Uikit<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-uikit\"\n            let inline Umbraco<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-umbraco\"\n            let inline Uniregistry<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-uniregistry\"\n            let inline Unity<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-unity\"\n            let inline Untappd<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-untappd\"\n            let inline Ups<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-ups\"\n            let inline Usb<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-usb\"\n            let inline Usps<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-usps\"\n            let inline Ussunnah<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-ussunnah\"\n            let inline Vaadin<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-vaadin\"\n            let inline Viacoin<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-viacoin\"\n            let inline Viadeo<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-viadeo\"\n            let inline ViadeoSquare<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-viadeo-square\"\n            let inline Viber<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-viber\"\n            let inline Vimeo<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-vimeo\"\n            let inline VimeoSquare<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-vimeo-square\"\n            let inline VimeoV<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-vimeo-v\"\n            let inline Vine<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-vine\"\n            let inline Vk<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-vk\"\n            let inline Vnv<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-vnv\"\n            let inline Vuejs<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-vuejs\"\n            let inline Waze<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-waze\"\n            let inline Weebly<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-weebly\"\n            let inline Weibo<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-weibo\"\n            let inline Weixin<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-weixin\"\n            let inline Whatsapp<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-whatsapp\"\n            let inline WhatsappSquare<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-whatsapp-square\"\n            let inline Whmcs<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-whmcs\"\n            let inline WikipediaW<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-wikipedia-w\"\n            let inline Windows<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-windows\"\n            let inline Wix<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-wix\"\n            let inline WizardsOfTheCoast<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-wizards-of-the-coast\"\n            let inline WolfPackBattalion<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-wolf-pack-battalion\"\n            let inline Wordpress<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-wordpress\"\n            let inline WordpressSimple<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-wordpress-simple\"\n            let inline Wpbeginner<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-wpbeginner\"\n            let inline Wpexplorer<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-wpexplorer\"\n            let inline Wpforms<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-wpforms\"\n            let inline Wpressr<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-wpressr\"\n            let inline Xbox<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-xbox\"\n            let inline Xing<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-xing\"\n            let inline XingSquare<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-xing-square\"\n            let inline YCombinator<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-y-combinator\"\n            let inline Yahoo<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-yahoo\"\n            let inline Yammer<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-yammer\"\n            let inline Yandex<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-yandex\"\n            let inline YandexInternational<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-yandex-international\"\n            let inline Yarn<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-yarn\"\n            let inline Yelp<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-yelp\"\n            let inline Yoast<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-yoast\"\n            let inline Youtube<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-youtube\"\n            let inline YoutubeSquare<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-youtube-square\"\n            let inline Zhihu<'a> = Fable.FontAwesome.Fa.Icon \"fab fa-zhihu\"\n\n","namespace Fulma\r\n\r\nopen Fulma\r\nopen Fable.React\r\nopen Fable.React.Props\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Container =\r\n\r\n    type Option =\r\n        /// Add `is-fluid` class\r\n        | [<CompiledName(\"is-fluid\")>] IsFluid\r\n        /// Add `is-widescreen` class\r\n        | [<CompiledName(\"is-widescreen\")>] IsWideScreen\r\n        /// Add `is-fullhd` class\r\n        | [<CompiledName(\"is-fullhd\")>] IsFullHD\r\n        | Props of IHTMLProp list\r\n        | CustomClass of string\r\n        | Modifiers of Modifier.IModifier list\r\n\r\n    /// Generate <div class=\"container\"></div>\r\n    let container (options: Option list) children =\r\n        let parseOptions (result : GenericOptions) option =\r\n            match option with\r\n            | IsFluid\r\n            | IsWideScreen\r\n            | IsFullHD -> result.AddCaseName option\r\n            | Props props -> result.AddProps props\r\n            | CustomClass customClass -> result.AddClass customClass\r\n            | Modifiers modifiers -> result.AddModifiers modifiers\r\n\r\n        GenericOptions.Parse(options, parseOptions, \"container\").ToReactElement(div, children)\r\n","namespace Elmish\n\n(**\nLog\n---------\nBasic cross-platform logging API.\n\n*)\nmodule internal Log =\n\n#if FABLE_COMPILER\n    open Fable.Core.JS\n\n    let onError (text: string, ex: exn) = console.error (text,ex)\n    let toConsole(text: string, o: #obj) = console.log(text,o)\n\n#else\n#if NETSTANDARD2_0\n    let onError (text: string, ex: exn) = System.Diagnostics.Trace.TraceError(\"{0}: {1}\", text, ex)\n    let toConsole(text: string, o: #obj) = printfn \"%s: %A\" text o\n#else\n    let onError (text: string, ex: exn) = System.Console.Error.WriteLine(\"{0}: {1}\", text, ex)\n    let toConsole(text: string, o: #obj) = printfn \"%s: %A\" text o\n#endif\n#endif\n\n#if FABLE_COMPILER\nmodule internal Timer =\n    open System.Timers\n    let delay interval callback =\n        let t = new Timer(float interval, AutoReset = false)\n        t.Elapsed.Add callback\n        t.Enabled <- true\n        t.Start()\n#endif\n","namespace Elmish.React\n\n[<AutoOpen>]\nmodule Helpers =\n    open Fable.React.Props\n    open Fable.Core.JsInterop\n\n    /// `Ref` callback that sets the value of an input textbox after DOM element is created.\n    /// Can be used instead of `DefaultValue` and `Value` props to override input box value.\n    let inline valueOrDefault value =\n        Ref <| (fun e -> if e |> isNull |> not && !!e?value <> !!value then e?value <- !!value)\n\n[<RequireQualifiedAccess>]\nmodule Program =\n\n    module Internal =\n\n        open Fable.React\n        open Browser\n        open Elmish\n\n        let withReactBatchedUsing lazyView2With placeholderId (program:Program<_,_,_,_>) =\n            let mutable lastRequest = None\n            let setState model dispatch =\n                match lastRequest with\n                | Some r -> window.cancelAnimationFrame r\n                | _ -> ()\n\n                lastRequest <- Some (window.requestAnimationFrame (fun _ ->\n                    ReactDom.render(\n                        lazyView2With (fun x y -> obj.ReferenceEquals(x,y)) (Program.view program) model dispatch,\n                        document.getElementById placeholderId\n                    )))\n\n            program\n            |> Program.withSetState setState\n\n        let withReactSynchronousUsing lazyView2With placeholderId (program:Elmish.Program<_,_,_,_>) =\n            let setState model dispatch =\n                ReactDom.render(\n                    lazyView2With (fun x y -> obj.ReferenceEquals(x,y)) (Program.view program) model dispatch,\n                    document.getElementById placeholderId\n                )\n\n            program\n            |> Program.withSetState setState\n\n        let withReactHydrateUsing lazyView2With placeholderId (program:Elmish.Program<_,_,_,_>) =\n            let setState model dispatch =\n                ReactDom.hydrate(\n                    lazyView2With (fun x y -> obj.ReferenceEquals(x,y)) (Program.view program) model dispatch,\n                    document.getElementById placeholderId\n                )\n\n            program\n            |> Program.withSetState setState\n\n\n    /// Renders React root component inside html element identified by placeholderId.\n    /// Uses `requestAnimationFrame` to batch updates to prevent drops in frame rate.\n    /// NOTE: This may have unexpected effects in React controlled inputs, see https://github.com/elmish/react/issues/12\n    let withReactBatched placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactBatchedUsing lazyView2With placeholderId program\n\n    /// Renders React root component inside html element identified by placeholderId.\n    /// New renders are triggered immediately after an update.\n    let withReactSynchronous placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactSynchronousUsing lazyView2With placeholderId program\n\n    [<System.Obsolete(\"Use withReactBatched\")>]\n    let withReact placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactBatchedUsing lazyView2With placeholderId program\n\n    [<System.Obsolete(\"Use withReactSynchronous\")>]\n    let withReactUnoptimized placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactSynchronousUsing lazyView2With placeholderId program\n\n    /// Renders React root component inside html element identified by placeholderId using `React.hydrate`.\n    let withReactHydrate placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactHydrateUsing lazyView2With placeholderId program\n"],"names":["x","Array","isArray","ArrayBuffer","isView","Dispose","sameConstructor","y","Object","getPrototypeOf","constructor","Symbol","iterator","Enumerator","iter","this","current","cur","next","value","done","Error","e","GetEnumerator","en","hasNext","undefined","Lazy","factory","isValueCreated","Value","createdValue","IsValueCreated","i","length","str","toString","date","date1","offset","kind","getTimezoneOffset","radix","ObjectRef","static","o","idMap","has","set","count","get","stringHash","s","h","len","charCodeAt","numberHash","combineHashCodes","hashes","h1","bigintHash","GetHashCode","isHashable","arrayHash","Date","getTime","dateHash","values","map","v","id","equalArraysWith","eq","Equals","isEquatable","xKeys","keys","yKeys","sort","equalObjects","xtime","ytime","compareArrays","comp","j","compareArraysWith","compare","CompareTo","isComparable","key","compareObjects","WeakMap","curried","f","f2","a1","a2","isMinus","minutes","Math","abs","dateToHalfUTCString","half","toISOString","substring","indexOf","dateToStringWithCustomFormat","format","utc","replace","match","rep","Number","NaN","getUTCFullYear","getFullYear","getUTCMonth","getMonth","getUTCDate","getDate","getUTCHours","getHours","getUTCMinutes","getMinutes","getUTCSeconds","getSeconds","getUTCMilliseconds","getMilliseconds","isNaN","_provider","d","dateWithOffset","dateToISOStringWithOffset","dateToStringWithOffset","toUTCString","toLocaleString","toLocaleDateString","toLocaleTimeString","printOffset","dateToISOString","dateToStringWithKind","parseRaw","input","fail","trim","m","exec","baseDate","timeInSeconds","timeParts","split","parseInt","parseFloat","toUpperCase","offsetInMinutes","tryParse","defValue","contents","detectUTC","_err","symbol","isNumeric","multiply","BigInt","toFixed","dp","toPrecision","sd","toExponential","toHex","asUintN","matches","reg","startAt","global","lastIndex","lastMatchIndex","index","push","callStack","self","seqToString","cons","entries","k","join","name","String","cases","tag","toJSON","fields","concat","fieldStr","withParens","unionToString","splice","other","recordToJSON","recordToString","recordGetHashCode","thisNames","recordEquals","result","recordCompareTo","getter","setter","contentsOrGetter","fsFormatRegExp","formatRegExp","isLessThan","cont","strParts","strIdx","matchIndex","createPrinter","continuePrint","arg","console","log","error","toFail","formatReplacement","flags","padLength","precision","sign","toLowerCase","zeroFlag","minusFlag","ch","pad","_strParts","_matches","_result","padArg","args","slice","_padLength","delimiter","xs","from","isRight","padLeft","Some","opt","defaultValue","mapping","binder","target","targetIndex","start","fill","source","folder","state","array","reduce","foldBack2","array1","array2","acc","differentLengths","size","foldBackIndexed2","_arg","head","tail","super","xs_1_mut","ys_1_mut","loop","xs_1","ys_1","matchValue","matchValue_1","xt","yt","i_mut","h_mut","t","c","ListEnumerator$1","it","_","FSharpList_get_Empty","FSharpList_Cons_305B8EAC","FSharpList__get_IsEmpty","FSharpList__get_Head","FSharpList__get_Tail","FSharpList__get_Length","res","action","unitVar","ofArrayWithTail","tail_1","ofSeq","xs_3","root","node","enumerator","xs_5","t_2","ys","call","dispatch","onError","ex","cmd","Enumerator_notStarted","Enumerator_alreadyFinished","Enumerator_Seq","Enumerator_FromFunctions$1","dispose","Enumerator_noReset","Enumerator_FromFunctions$1_$ctor_58C54629","Enumerator_generateWhileSome","openf","compute","closef","curr","started","x_1","finish","mkSeq","Enumerator_Seq_$ctor_673A07F2","argName","Operators_NullArg","generator","sources","outerOpt","innerOpt","finished","inner","outer","copyOfStruct","outerOpt_1","innerOpt_1","inner_1","outer_1","Enumerator_concat","ar","generateIndexed","create","comparer","found","e_1","Enumerator_enumerateThenFinally","integralRangeStep","step","stop","zero","add","stepFn","stepComparedWithZero","stepGreaterThanZero","comparedWithLast","makeRangeStepFunction","st_1","Enumerator_unfold","wix","rix","items","rix'","patternInput","program","init","model","rb","reentered","syncDispatch","item","wix'","ix","msg","nextMsg","update","model'","lists","forEach","xs_6","props","nextProps","CaseInfo","declaringType","TypeInfo","fullname","generics","construct","parent","enumCases","getHashCode","getGenerics","t1","t2","getRecordElements","k1","v1","k2","v2","info","elemType","getElementType","lastIndexOf","substr","isGenericType","isEnum","getGenericTypeDefinition","getEnumUnderlyingType","getEnumValues","kv","parseEnum","getEnumCase","getUnionCases","getTupleElements","isTuple","isUnion","isRecord","startsWith","getUnionCaseFields","uci","makeUnion","expectedLength","assertUnion","ResultValue","ErrorValue","caseStrategy","replacement","limit","tmp","pattern","options","RegExp","arguments","withGroups","pLast","groups","_s","sub1","sub2","fieldName","guidRegex","guidRegexNoHyphen","guidRegexHex","hyphenateGuid","wsTrimAndLowered","test","chars","b","a","random","NumberStyles","getRange","unsigned","bitsize","style","prefix","digits","AllowHexSpecifier","getRadix","invalidDigits","getInvalidDigits","regexMatch","validResponse","isValid","umin","umax","min","max","DateTimeOffset","checkOffsetInRange","offsetMatch","signedRound","ceil","floor","ms","ticks","firstDot","search","firstColon","r","MapTreeLeaf$2","MapTreeLeaf$2_$ctor_5BDDA1","MapTreeLeaf$2__get_Key","MapTreeLeaf$2__get_Value","MapTreeNode$2","left","right","MapTreeNode$2_$ctor_Z39DE9543","MapTreeNode$2__get_Left","MapTreeNode$2__get_Right","MapTreeNode$2__get_Height","MapTreeModule_sizeAux","acc_mut","m_mut","m2","mn","MapTreeModule_size","MapTreeModule_mk","l","mn_1","hl","hr","m2_1","m_2","MapTreeModule_rebalance","m2_2","mn_2","m_3","m2_3","mn_3","t1h","t2h","t2$0027","t2l","matchValue_2","t1$0027","matchValue_3","t1r","MapTreeModule_add","Compare","MapTreeModule_empty","MapTreeModule_tryFind","comparer_mut","k_mut","MapTreeModule_iterOpt","f_mut","MapTreeModule_iter","MapTreeModule_mapiOpt","l2","r2","MapTreeModule_mapi","MapTreeModule_ofSeq","arr","idx","forLoopVar","MapTreeModule_ofArray","tupledArg","MapTreeModule_ofList","ie","e_mut","MapTreeModule_mkFromEnumerator","MapTreeModule_MapIterator$2","stack","MapTreeModule_collapseLHS","stack_mut","rest","MapTreeModule_mkIterator","MapTreeModule_current","MapTreeModule_alreadyFinished","MapTreeModule_notStarted","MapTreeModule_mkIEnumerator","MapTreeModule_moveNext","FSharpMap","tree","this$","combineHash","activePatternResult","FSharpMap__ComputeHashCode","that","that_1","e1","e2","m1","e1c","e2c","str2","shift","intPart","decimalPart","repInt","repDecimal","rightZeros","padRight","thousandGroups","thousands","toStringTag","obj","b1","b2","kvp1","kvp2","FSharpMap__ContainsKey","FSharpMap__get_Item","MapTreeModule_copyToArray","FSharpMap__get_Count","clear","delete","p","thisArg","FSharpMap_$ctor","MapTreeModule_find","MapTreeModule_mem","table","FSharpMap__Add","FSharpMap__TryFind","kvp","FSharpMap_Empty","SetTreeLeaf$1","SetTreeLeaf$1_$ctor_2B595","SetTreeLeaf$1__get_Key","SetTreeNode$1","SetTreeNode$1_$ctor_5F465FC9","SetTreeNode$1__get_Left","SetTreeNode$1__get_Right","SetTreeNode$1__get_Height","SetTreeModule_countAux","t_mut","tn","SetTreeModule_count","SetTreeModule_mk","tn_1","t2_1","SetTreeModule_rebalance","t2_3","tn_2","t_3","t2_4","tn_3","t2_2","SetTreeModule_add","c_1","SetTreeModule_empty","SetTreeModule_mem","SetTreeModule_iter","SetTreeModule_SetIterator$1","SetTreeModule_collapseLHS","x2","xn","SetTreeModule_mkIterator","SetTreeModule_current","SetTreeModule_alreadyFinished","SetTreeModule_notStarted","SetTreeModule_mkIEnumerator","SetTreeModule_moveNext","SetTreeModule_compare","l1_mut","l2_mut","SetTreeModule_compareStacks","l1","x1_3","x2_3","x1n_2","x2n_2","matchResult","t1_6","x1_4","t2_6","x2_4","x1n_3","x2n_3","matchResult_1","t1_7","x1_5","t2_7","x2_5","x1n_4","x2n_4","c_3","x2n_5","c_2","matchResult_2","t1_8","x1_6","t2_8","x2_6","x1n_5","x2n_6","matchResult_3","t1_2","x1","x2_1","x1n","x2n","matchResult_4","t1_4","x1_2","x2_2","x1n_1","x2n_1","SetTreeModule_copyToArray","SetTreeModule_ofSeq","SetTreeModule_ofArray","SetTreeModule_ofList","SetTreeModule_mkFromEnumerator","FSharpSet","FSharpSet__ComputeHashCode","FSharpSet__get_Comparer","FSharpSet__get_Tree","FSharpSet__get_Count","FSharpSet__Contains","set$","reason","genericMsg","path","decoder","errorToString","fromValue","outArg","currentPath","requestedIndex","vArray","tokens","cb","d1","ctor","prop","keyValuePairs","elements","decoder1","andThen","a3","decoder2","``arg20@``","FSharpSet_$ctor","arg10","arg30","decoders","predicate","find","mixedArray","autoDecoder","extra","fi","decoderRef","_t","reduceRight","delegateArg","delegateArg_1","decoderInfos","autoObject","isOptional","enumValue","clo2","arg20","list","keyDecoder","valueDecoder","_arg1","autoObject2","tuple2","oneOf","runner","errors","toMap","toSet","autoDecodeRecordsAndUnions","bool","unit","string","sbyte","byte","int16","uint16","int","uint32","float32","datetime","datetimeOffset","timespan","guid","makeExtra","ts","days","hours","seconds","milliseconds","lengthLeft","lengthRight","padLeftAndRightWithZeros","space","encoderRef","encoder","setters","targetKey","encode","autoEncoder","skipNullField","case_","fieldTypes","encoders","keyType","valueEncoder","activePatternResult7533","keyEncoder","clo4","activePatternResult7538","_arg2","autoEncodeRecordsAndUnions","dashify","separator","charAt","caseRule","definedCaseRule","kvPair","assign","changeCase","baseElement","baseClass","opts","Icon","Size","Border","Pull","Rotation","Flip","CustomClass","StackSize","FixedWidth","IsLi","HavePulse","HaveSpin","IsInverse","complete","std","booleans","Props","children","case","screen","parser","baseProps","cl","modifiers","option","level","display","typ","amount","direction","cls","el","active","Name","Title","Active","Children","onClick","addedClasses","tabs","stdTabs","n","names","fa","faOptions","caseNames","prototype","fromString","jv","app","lensState","AppState","valueOpt","serial","cs","Summary","arg00","arg0","updateC","ComponentStates","TabContainer","ShowTextMenus","ActiveTab","Theme","tabSelector","view","text","setState","lazyView2With","document","getElementById","placeholderId","equal"],"sourceRoot":""}